{
  "Hello": "Are you there?",
  "courses": {
    "ENGL 251B": "Introduction to British Literature II",
    "CS 241": "Foundations of Sequential Programs"
  },
  "notes": {
    "ENGL 251B": {
      "course_content_by_units": {
        "2 What is Literature?": {
          "null": [
            "What makes something a piece of literature, or what is the nature of being literary? No one knows for sure.",
            "What makes something a piece of literature, while another piece isn’t? All we know is that literature is all complicated in a specific way. So who decides what is literature? Literary scholars, critics and reviewers, and the market all play their role.",
            "Literary arguments concern what works are part of a certain tradition. “The Call of the Wild” by Jack London was part of English Literary Studies in the USSR because of its societal criticism, but wasn’t to be found in American syllabi. Many great disputes of who is and isn’t literary have occurred around John Milton and John Donne. Milton was considered universally praiseworthy until he was attacked by T.S. Elliot. He championed Donne and his conversational style.",
            "_The Canon Wars_ concern the push for including women, black, and immigrant authors in literature syllabi. This launched a slew of protests around American Universities on both parties in the issue around the mid-nineties. When ACTA was asked to look into whether or not dropping the Shakespeare requirement was indeed a trend, they could twenty-three out of seventy of the universities studied still required Shakespeare. Some consider this appalling, since they consider Shakespeare essential to the English Literary Tradition. Bruce Smith, English Professor at Georgetown, says that the “Major Authors” requirement, including Shakespeare, prevented room in the curriculum for women and minority authors. Upon release the requirement, Georgetown was subject to student protests and lots of media coverage, primarily from right-wing organizations and student groups. The media coverage given to the issue may function out of a public desire to return to the old value system. All this reveals that our definition of literature, and essential literature, is far from universally accepted, and even further from being unchanging.",
            "The word “literature” itself has had a storied history. It’s meant:",
            "1. Familiarity or learnedness with classical texts (~1450 - )",
            "2. Writing or producing a book/word (~1660 -)",
            "3. A body of literary works made in a certain region/period (1711 -), or a work of lasting merit (1850 -)",
            "4. A body of works on a certain subject (~1790 -)",
            "5. Leaflets, pamphlets to promote products or inform (~1850 -)",
            "This is important, because it points out how “literature” has always been changing. It’s about where we get the third meaning of literature that a new market arises for novels, and heck, that novels even became a thing! Before this novel-market, literature needed patronage to be funded and produced. People looked for a place of imagination and fantasy to escape the increasingly cold, rational world they inhabited. So people not only sought good books, but books that were good in a very particular way — hence, where we get literature today.",
            "So why study literature? Because literary works are human achievements of wit and creativity, and studying literature gives us insight into the intricacies of writing and the effective use of words.",
            "The _Russian Formalists_ asserted that literary criticism must be highly structured and systemic, and that literary studies shouldn’t focus on *literature*, but *literariness*: what makes something literary. This was the beginning of modern literary criticism. Tools for the toolbox:",
            "_Literary Theory_: A way of thinking systematically and explicitly about what literature is and the methods we use in analyzing and criticizing it. Modern literary theory has typically been stimulated by importing ideas from other disciplines into the study of literature."
          ]
        },
        "3 Russian Formalism": {
          "null": [
            "Recall that the Formalists put the emphasis of literary criticism on _literariness_. Why did this idea only originate with the Russians? In the times of the Formalists, there were giant political pressures that would eventually lead to two revolutions — the first deposing its absolute monarchy, the second installing Communism. So, plenty of people, including artists, called for revolutionary change, and published manifestos. The most popular of these was “A Slap in the Face of Public Taste”, by the Futurists. They expressed discontent with the status quo of poetry and endeavoured to make new poetry out of new words. This was avant-garde art, which intentionally aimed to disrupt the status quo and change people’s world views. This shift even empowered painters to think of paintings less as representations of the world, but more as representations of the power of their own medium.",
            "The Futurists issues a pamphlet called, “The Word as Such”, which called for people to “explore the world” beyond its ordinary meaning. It’s in this context that Victor Shklyovsky made his greatest essays — he shared the Futurists’ zeal for revolution. He shared his own manifesto, “The Resurrection of the Word”, at a Futurist hangout cafe.",
            "In it, Shklyovsky talked much about how language and individual words lost its metaphorical or descriptive quality. If we are to sense the form of words, we have to slow our perception of words — to understand how words mean. He said, “The fate of the works of old artists... is exactly the same as the fate of the word itself. They are completing the journey from poetry to prose.” So, no longer a way to understand language, but to receive meaning.",
            "So, literariness isn’t a property that certain texts have forever, but rather is an effect that they can impose upon us to reconsider what the language we’re receiving even means.",
            "Although it isn’t really worthwhile to study the Futurists’ work, it’s certainly interesting to study an English approximation to their efforts: e e cummings.",
            "In, “anyone lived in a pretty how town,” e e cummings deliberately manipulates language to make us pay attention, to force us to make out the story. For instance, he puts ‘anyone’ in the place of where a person’s name would usually go, to indicate the subject of this poem being an average, ordinary person. He often imitates a child’s speech. He also uses ‘autumn winter spring summer’ as a way of saying, ‘year in and year out’.",
            "What makes Cummings interesting: he uses the grammar and vocabulary of children, and introduces it as a new, avant-garde approach to poetry. This new literary technique isn’t Cummings’ invention, it’s a repurposing of a type of language that’s always been there.",
            "Shklyovsky’s manifesto lead him to meet other students, specifically linguistics students. This lead him to believe that literature was just a special use of language, and to borrow concepts from other fields. Later, in ‘Art as Technique’, he expands upon the ideas of his manifesto and creates a new theoretical concept: defamiliarization: the making of something strange and difficult from something that had before been too easy. Unlike others, he seeks to apply this to both poetry and prose.",
            "How do we defamiliarize events and stories? Shklyovsky advocated strongly for a visible narrator who used new manners of description to depict familiar things, but we can also accomplish a similar effect by changing the order of events, or by making some events not understood by the audience until the end of the story, and perhaps never!",
            "From the malleability of event structure, the Formalists created the terms plot for the prose events as they are presented to the reader, and story for prose events as they occurred chronologically. Motivation is the justification for artistically distorting the events in such a way that the reader would perceive them as natural.",
            "So, the literariness of a work isn’t in its message, or how it communicates this message, but the degree to which it defamiliarizes. Other critics would disagree with Shklyovsky on this point. But we all agree that this should be a part of art. In this way, the content of a work means less than its techniques employed.",
            "So! Altogether, literary theory focusses on literariness, which has value because it forces us to sense the form of words. The method of literary criticism is the evaluation of techniques. So, now we have new tools for the toolbox:",
            "Defamiliarization: what the Formalists believed literature accomplished — it should make familiar things strange to us.",
            "Technique: the means by which literature defamiliarizes the world.",
            "Motivation: the justification the text provides for the use of a technique.",
            "Story: the series of events as they might be in real life.",
            "Plot: how the events of the plot are deformed in the text.",
            "Poetic language: how poetry uses language in such a way that distinguishes itself from ordinary speech."
          ]
        },
        "4 The Sign & the Sign-System": {
          "null": [
            "Paul de Man claims that literary theory go underway when we started to use linguistic terminology when talking about literature, especially synchronic linguistics, as opposed to historic linguistics. The basic unity to this theory is the sign and the sign-system.",
            "Why the fuss about linguistics? Because it had a big impact on the work of literary critics, and in general, this shift hugely impacts not only how we think of literature and language, but all species of study. This formed Structuralism, which clerkly dominated literary theory ever since — and it all came from one guy: Ferdinand de Saussure.",
            "Saussure was moved to thing of the philosophy of linguistics, because he was so dissatisfied with current terminology in philology, the linguistics of his days. He was convinced that words were composed of something more than just sounds — since words of a language weren’t just sounds, they were meaningful sounds, and no current Philologist had a solid understanding of where the meaning came from. Saussure was convinced that this meaning could only come from sounds in a language system.",
            "So, what counts in a language isn’t just sounds, but contrasts and organizations of sounds. Humans can make a large variety of sounds, but not all will count as meaningful in a given language. We should note that within speakers of the same language, there are many differences in pronunciation — in effect, the same “word” could be composed of entirely different sounds. What matters, then, isn't sound, but contrasts of sounds. As Saussure said, “in language, there are only differences.”",
            "When we acquire language, we learn that system of contrast, not the historical background of words. So, the system is synchronic. Also note that this means that, as meaning is generated from ‘differences’ of sound, so too are meanings composed of contrasts of smaller meanings. Just as every language organizes sounds in its own way, every language organizes meanings in its own way. Think of how English lacks the plural/formal second personal pronoun, which other European languages how (i.e. vous in French). To make up for it, we’ve invented “y’all” in slang! Which is quite funny, because “you” originally was the plural second-person pronoun! So all in all, the basic unit of meaning is defined in relation to other sounds, and that meaning is shifting all the time.",
            "Saussure saw his Philology as so insufficient that he himself made terminologies for what he saw as the fundamental units of language. A sign was the union of the sound-pattern and the meaning — a meaningful unit of language. He called the sound-pattern the Signifier, and the meaning/concept the Signified. By this, he hoped to expand this system beyond language, but to all things which, in some way, contain meaning.",
            "Then the meaning of signs is forged through convention — green means go because we’ve all said it means go. So the language system is ‘social’ and is held together by nothing but our collective agreement. Yes, they change continually, but no one person can make them change.",
            "This system in is the background — what we actually encounter is sentences, which string together meanings that make sense together. He called the actual sentences of speech Parole and the language system itself Langue. He called these strings of signs Syntagmata, or Syntagm singular. Syntagmata don’t have to be sentences: “dogs” is a syntagm, since it strings together “dog” and “s” to pluralize.",
            "Associative Relations are the relations between a particular sign and the other signs we can compare it to. Like how “anti-drugs” relates to “anti-Communist” and “anti-immigration” tells us that “anti-“ means “against”. This is part of how language changes.",
            "Sometimes the sound drifts and not the meaning. Example: “undecem”, the Latin word for eleven (derived from “un” meaning “one”, and “decem” meaning “ten”), drifted to “onze” in French for the same concept. This shifted the term from being relatively arbitrary to completely arbitrary. Sometimes we fit foreign words to suit syntagms that we’re familiar with. This demonstrates that the history doesn’t matter, and it’s only the system that determines the meaning. This broadened to become the field of Structuralism. Tools:",
            "Sign — Signifier/Signified: the units of a system are signs. A sign is defined its place in the system. It is made up of two parts: a signifier and the signified. A signifier can be a written pattern, a combination of graphic symbols, or a sound pattern. The signified is the meaning that is bound to the pattern.",
            "Synchronic - Diachronic: the language system is synchronic, it exists at a moment in time: it is meant to represent what we know when we use language, and in this respect it is different from the history of a language, its diachronic aspect, which is interesting, but irrelevant.",
            "Syntagmatic - Paradigmatic (Associative): When we encounter language it takes the form of syntagmata, liner strings of signs like sentences. The elements of the syntagm are defined as associative relations, which we will call paradigmatic relations."
          ]
        },
        "5 Structuralist Analysis I": {
          "null": [
            "Let’s turn to the study of folklore in Russia. Towards the 20th century, this study became more intense and focussed mostly on historical analyses of folktales — but Vladmir Propp was having none of it. In “The Morphology of the Folktale”, he analyzed hundreds of folktales to argue that they were all telling, more or less, the same story.",
            "He argued that each action in the narrative could be embodied in several different ways. So though the structure of the story remained constant, its particular implementation varied. He called the fundamental units of this structure functions: “the act of a character, defined from the point of view of its significance for the course of the action.”",
            "Thus, the character’s actions didn’t have inherent meaning, but had meaning because of its role in the system of narrative. This also means that stories are composed of functions, not characters. It was only when Claude Levi-Strauss and Roland Barthes noticed the similarity between Propp and Saussure that we finally got Structuralist Analysis. Woo!",
            "Barthes argues that narrative events/characters have meaning by virtue of their place in a system.",
            "A function is an event with consequences for the progress of the narrative. The most high-consequence ones among these are cardinal functions, whereas those that don’t have an impact on the narrative, usually left there for realism, are catalyzers. We call strings of functions sequences.",
            "Not everything is a function, though. There are also indices which relate to a higher level in the text (e.g. telling us more about a character or an event). These are categorized into true indices which tell us things of consequence, and informants which are of no real consequence.",
            "Yet it would be a mistake to think that all stories are just long sequences. Barthes argued that functions are integrated into Actions — large-scale stuff like quest, or struggle. These Actions are played out by actants. Above this is the layer of narration. Tools:",
            "Actions: these are the large-scale events that define the narrative as a whole. Actions are typically characterized in abstract, large-scale terms: struggle, quest, and so on.",
            "Actants: the agents necessary to an action. For example, a quest must have a subject, and a quester who quests for the subject. A struggle must involve two actants in a struggle. So actants are defined in relation to a particular action. An Actant isn’t necessarily only a single character, and a character may have two actantial roles.",
            "Function: events that lead to something else in the narrative, or follow up on something before it. Functions usually pose a risk of some kind.",
            "Cardinal Functions: functions essential to the narrative",
            "Catalyzers: small-scale events that fill in the space between cardinal functions, but are not essential for the progress of the narrative",
            "Indices: references upwards to a character or place — they attribute qualities to what will be an actant or properties to a scene or landscape. These qualities and properties will be important to the shape of the narrative.",
            "Informants: like indices, but ultimately incidental descriptions",
            "Sequence: the arrangement of functions from beginning to end. May embody a certain action altogether."
          ]
        },
        "6 Structuralist Analysis II": {
          "null": [
            "When Saussure build his theory, he aimed to scientifically explain why and how language worked — not to evaluate one language as better than another. He made it a descriptive, not evaluative field.",
            "So, when Structuralism took off, it couldn’t tell you whether one narrative was better than another. Strictly speaking. It can certainly tell you how a narrative works, though.",
            "Think of the narratives in “A Scandal in Bohemia”. We have Watson tell the tale of a disguised Holmes getting injured, going into the house, then Watson throwing a smoke bomb. Holmes re-narrates the events later to clarify that he had gotten injured so as to fool Adler into revealing the location of the photograph. Finally, we have Adler re-narrate all these events again from her letter, where she reveals that she out- deveined Holmes by perceiving his ruse. Each new narrative makes “Scandal” interesting as it unfolds — the narrative meaning of all the events are revealed as time goes on.",
            "So, Structuralism doesn’t necessarily have “Plot and Story” — new influences on Structuralism such as Genette introduced “Narrative and History”. Totally different, of course. But for now we’ll keep using “Plot and Story” in the Formalist sense.",
            "A plot has three dimensions:",
            "1. Order",
            "2. Duration",
            "3. Frequency",
            "Order",
            "Genette called ordering differences between the plot and story “anachronisms”.",
            "* Retrospective anachronisms are when events are described after their occurrence in the story. Ex. the King describing his affairs with Adler to gain Holmes’ services (and, thus, far after the affairs actually occurred).",
            "* Anticipatory anachronisms occur when events are described before their occurrence in the story. These are rarer, but might occur in past-tense narrated stories where the narrator may interject with insight gleamed after the narrative concluded.",
            "Genette adds another dichotomy to anachronisms in regard to whether or not they’re “inside” the story:",
            "* External anachronisms are descriptions of events that take place outside the occurrence of the story. For example, the King’s description of his affairs with Adler would be an external anachronism, because those events occur outside “A Scandal in Bohemia”",
            "* Internal anachronisms are out-of-order descriptions of events that take place within the occurrence of the story. For example, Adler’s letter to Sherlock.",
            "Within internal anachronisms, Genette adds a final dichotomy:",
            "* Complete anachronisms describe events that were not known in the plot before. For example, Holmes’ description of his day to Watson.",
            "* Repetitive anachronisms describe events that were known before, or will be known later, perhaps to add detail or ship perspective. For example, Adler’s account in her letter to Holmes.",
            "Genette calls retrospective internal repetitive anachronisms “Recall”, and anticipatory internal completive repetitive anachronisms “Announcement”. Thing can get more complicated, of course. You can have Announcements within retrospective external anachronisms, for instance.",
            "Duration",
            "Recall that the plot distorts the story. One way it can do this is in various representations of time, by how different events are described.",
            "* Scene: the time of plot patches time of story. For example, Watson’s narration of the episode at Adler’s house.",
            "* Summary: time of plot is shorter than time of story. For example, the King’s retelling of his affairs with Adler.",
            "* Stasis: the plot continues onwards, though nothing is currently happening in the story. Time is “paused”. A moment is elaborated upon. Ex. Watson describing the King’s appearance. Note: this isn’t necessarily all “description” sections in story — only the times where story time is “paused”.",
            "* Ellipsis: time is “skipped” in the plot. Ex. the archetypical “Two weeks later...”, or when Watson and Holmes depart, the it’s cut to when they meet at the flat the next day.",
            "Frequency",
            "Genette distinguished types of narration by frequency:",
            "* Singulative narration: events described only once.",
            "* Repetitive narration: events described many times.",
            "* Iterative narration: an event in the plot related to many occasions of events in the story. Ex. “Every Friday, I’d got out for a beer with Paul.”",
            "Genette made a big deal over iterative narration. He was aware that an author could sneakily claim that something would be iterative, but in fact make it singulative by providing the detail of a singulative episode. Ex. “Every Friday, I’d go out for a beer with Paul and he’d tell me all about his girlfriend and how he was getting along with his classes. Most often, he’d pleasantly describe...”",
            "Genette also noted how an iterative narration could be limited (ex “Every Friday that October...) or specified (ex “Every Friday at 5PM sharp...).",
            "Let’s note: Genette created these concepts because he really wanted to analyze what made a particular novel interesting. But we can use these concepts to understand what makes detective stories possible. Tools for the toolbox listed above."
          ]
        },
        "7 Deconstructive Criticism": {
          "null": [
            "Saussure created synchronic linguistics in Switzerland, which Barthes picked up in Egypt, and combined into this wild soup of ideas in Paris. That’s where Jacques Derrida picks it up. He was an immigrant from a French colony, and had trained to be a philosopher. He created Deconstructionism in the 1960’s as a kind of confrontation between Structuralism and philosophy. He critiqued both classes of ideas.",
            "Derrida believed that philosophy had to swallow how Structuralism described the language that allowed for reasoning and argumentation. Philosophy often focussed on removing ambiguity in ideas — if aimed for a perfectly ‘practical’ language which perfectly expressed truth and reasoning.",
            "Structuralism came at thing from a totally different view, but it still had places where Saussure was inconsistent — Derrida thought Saussure’s conceptions were foreclosed upon in his writings to prevent the realization of their radical implications. Derrida coins the term “Differance” to express how the ‘meaning in difference’ was always deferred to further differences to find its real meaning.",
            "Derrida said that we usually assume Differance ends when we reach a sign that isn’t a reference to another sign — this he called ‘the transcendental sign’.",
            "Yet Saussure never said anything of this sort. In the beginning of his text, he goes on a tirade against writing as an artificial representation of spoken word. Writing, he said, has usurped the spoken word in the world of academics — and that mistakes have been made because of it.",
            "The end result is that the signifier alters the signified — what he calls ‘the monstrosities’! He demotes the dignified under the signified here — yet that contradicts what he says later, about how they are equal!",
            "Derrida’s response to this is interesting. He suggests that, despite Saussure’s tirade against writing as a monstrosity, writing itself was a language — one that deconstructs the heritage it was based upon.",
            "Derrida went on to practice Deconstructionism in philosophy, politics, and history, against those who thought of writing as a monstrosity or an intrusion. He thought that these texts were quite revealing. He also thought that in order to change meaning, you had to impress yourself into the pressure points of a language.",
            "That’s why Derrida called it “Deconstructionism”; these changes of language, and rearrangements of texts — an author would make new avenues, the close them off before they got too dangerous. Derrida claimed to find what the text really seemed to say, then express this as ‘the logic of the supplement.’",
            "He began analyses in finding instabilities, inconsistencies, or ‘metaphysical opposition’ in the texts. Either this or an ‘undecidable’.",
            "Readers were sometimes not only baffled by what Derrida argued, but how he argued it. His claim of philosophy and structuralism, the consequences were that you didn’t only choose your signifiers. The signified is always already in the position of the signifier! The links between signifiers were of the utmost importance. Remember how Shklyovsky argued how all words were tropes? Derrida’s thoughts run along the same lines. So his work seemed to claim that to criticize something you had to work in the text’s links of signifiers.",
            "Derrida also seemed to believe that analyzing texts as a “structure” or series of structures was like reducing the text to an abandoned city. So, he believed that he did not make the structure into an image by his new analytic technique, but rather “resurrected” the text.",
            "Some complain that Derrida unjustly makes all texts in this manner literature. This is somewhat fair. Derrida himself claimed that literature is where we find Differance dealt with most explicitly, so it’s the most intense. What does it mean to deconstruct literature? To find, expose, and undermine these oppositions or the undecideable.",
            "Deconstruction takes time and patience — all the relationships in a text are pretty... intense. New tools for the toolbox:",
            "Deconstruction: criticism that seeks to exploit and expose the instabilities of a certain text and its repressed radical implications.",
            "Metaphysical Opposition: a systemic contrast of two terms in a text, which the text depends upon or is organized around. One of these terms is dominant, and the other will be something extra or excessive which would disturb the text.",
            "Undecideables: unstable terms within a text, in which the text’s tensions are concentrated. Contain irreconcilable meanings.",
            "Differance: the instability of language, because all signifiers acquire meaning by virtue of their difference from others, which means their meaning is endlessly deferred; the movement from signifier to signifier never stops."
          ]
        },
        "8 Writing and Political Commitment": {
          "null": [
            "Writing and politics have been mixed together since their conceptions. Lysistrata famously brought commentary on gender roles and the Peloponnesian Was onto the Greek stage. The works of Shakespeare, too, have obsessively recorded the goings-on of court life which “deconsecrated” the English monarchy in effect. As the English Civil War climbed in the beheading of Charles I, the great poets of the time, including John Milton, saw it fit to celebrate Republicanism in their works, whether explicitly or implicitly. This continued into the Romanticists and Victorians.",
            "Yet in the middle of the Victorian Period, Matthew Arnold wrote the pamphlet “Culture and Anarchy” as a response to mass protests to extend suffrage. This climaxed in the protests at Hyde Park in 1867, where the government refused to fire at protestors. Arnold saw this as a big problem — because it seemed like mobs could now get away with doing whatever they wanted without any “authority, to counteract the tendency to anarchy.” So, he argued, the new source of authority in British society should be culture, which inherently unites people, and seeks human perfection.",
            "So Arnold argued that the point of literature was to seek an inward human perfection, and not to be caught up with the affairs of the external world — i.e. politics. This lead to consciously anti-political criticism in Britain for the next century or so. However, there eventually came a class of writers and critics who argued for social justice as a part of human perfection.",
            "Another big challenge to anti-political criticism came from the Marxists. After the Bolshevik Revolution, it wasn’t a question of whether writing should be political, but rather how best to make writing political through the clever use of realism. Georg Lukacs famously argued in favour of realism in depicting the evils of capitalist systems. This body of thought ended up being called “modernism”, but what was then called “Formalism”.",
            "The Marxist challenge to anti-political criticism was going by the avant-garde movement as well -- who thought that art entailed revolution in their society. This doesn’t make them all left, by the way, since some in Italy advocated for fascism. Clement Greenberg was among the most influential avant-garde thinkers in America. His German equivalent was Theodor Adorno. They both advocated for art which was decidedly unpopular, and hardly understood by the public.",
            "Adorno claimed there were two types of politically valuable art:",
            "1. art that valued “committed” writing",
            "2. “autonomous” art which employed avant-garde techniques",
            "WWII basically destroyed avant-garde movements in Europe, but new movements took its place in the 50s and 60s. Roland Barthes, for instance, used structuralism and experimental writing to develop a new kind of social criticism — “mythologies” of popular culture, which he used as a vehicle to criticize ideology.",
            "Ideology seeks to produce consent, willing obedience to the existing order. Structuralists believed, like the language system, there existed systems of meaning on top of the language system. This would be the domain of ideology. This is why avant-garde writing is important — it draws close attention to this ideological system.",
            "The 1960s contained a series of political shakeups — the violent decolonialization of Algiers and many African nations, and the civil rights movements in the US. In addition, a new wave of feminism and the gay rights movement.",
            "These shifts in society lead to shifts in academics. Feminists and civil rights advocates critically examined literary studies programs. Feminists drew upon many branches of structuralism, deconstructionism, and psychoanalysis to build their own theoretical structures. Marxists too restructured their own literary theory.",
            "Indeed, it was now seen as a requirement of Left writing to force the viewer to question the sign-system of a particular work. Eventually, though, it would widen its scope to find the radicalization of other literary works.",
            "This had the lasting consequence of eliminating the authorial intent from being the decisive factor in deciding the meaning of a work."
          ]
        },
        "9 Marxist Literary Theory": {
          "null": [
            "We know that literary theory advanced from outside influences. The first of these influences we’ll cover is Marxism. We’ll introduce Marxism, then see how it’ll apply.",
            "The central ideas behind Marxism are simple. One of the tenants is called “The Social Production of the Existence”: the idea that humans are distinctive from other animals, because not only do they build structures and gather food, but they also produce “means of production” that make shelter-building and food-gathering easier for the next generation. Because of this, our environment is more human-made than the environments of our ancestors. However, humans haven’t necessarily shared the means of production, but have collected it among an elite minority of themselves. This is called “property”.",
            "Different societies thought of property differently. Nomadic cultures posited ownership of some animals. More stationary cultures often allowed grazing on ‘common land’. With agriculture, people started owning land, but this land wasn’t distributed evenly. Some owned land, and others worked for land- owners. In some societies, they worked as slaves or indicted servants. With the invention of industrialization, property begun include money, tools, and factory buildings. Property allows control over these means of production.",
            "Social classes arise from these divisions of the means of production. These relations are called “the relations of production”. In Feudal societies, mean were tied up with politics. In capitalist societies, some own the means, and others don’t. Those who don’t must sell their labour to those who do. Those with the means are called “the bourgeoisie”, and those who work for them, “the working class”. Those outside this arrangement, i.e. teachers, lawyers... are called “the middle class”.",
            "So humans can create more than they consume — a surplus. The bourgeoisie keep the surplus, and the working class generally create more than what they’re paid for. That’s why Marx claims class relations are exploitative, and antagonistic. Marx claims that to end this exploitation, we need to throw out the system altogether.",
            "So Marx claimed that just like the bourgeoisie overthrew Feudalism in the French Revolution, we would eventually have another revolution where the working class overthrew capitalism. Why hasn’t the happened? The capitalist class often has government access. But also, ideology! Marx claimed that our social life is closely connected to our thinking, and the class antagonism is closely connected to our social life. Then, capitalists will try to justify to the working class, and themselves, the existence of exploitive capitalism. This manifests itself in laws, religion, metaphysics, and political rhetoric. This is the medium in which people participate in class conflict, as opposed to addressing it directly. So the capitalists’ ideology aims to produce consent from the working class.",
            "The Italian Marxist Antonio Gramsci described this in another useful way: hegemony. To achieve hegemony is to ensure that your ideas direct society — to make your structure apply to all dialogue. So why the bourgeoisie took Europe, they enforced forms helpful to them, and discarded antagonistic forms.",
            "So what’s Marxism to do with literary theory? Well, it posits that literature is entwined with ideology. But what’s the nature of this relation? The simplest answer: they are either a dominant, or subversive ideological form. Yet, remember Lukacs? He advocated for realism as a means of showing class struggles as they really were. Bad literature was that which only showed the surface, bug too literature showed what as underneath. Brecht agreed on “good and bad” but he believed that good theatre instilled critical attitudes in the audience, and made ideology visible.",
            "Terry Eagleton arrived on the scene in the 1960s, after Structuralism and Formalism. He points out that the functions of Structuralism and the defamiliarization of Formalism all had their role to play in ideology. He claimed that form involved three different circumstances:",
            "1. Literary history",
            "2. Ideological circumstances",
            "3. Audience-author relations",
            "Lukacs loved Balzac’s ability to depict Paris social life in a realist, ideological manner. He claimed that realism showed that underneath the seeming atomicity of society, there was this undercurrent of forces and conflict that tied everything together. Without revealing this undercurrent, artistic works are of the dominant ideological structure.",
            "On the opposite end of the spectrum, Pierre Macherey posited that language, which mediates our access to the world, is used in literature in a distinctive manner. Yet, the everyday language disguises ideology. So literature deals with ideological objects. Yet, it isn’t that ideology is false or illusory. What makes ideology is its form. It attempts to show the world as consistent, when it actually isn’t at all — it moves from one image of life to another, without demonstrating their relations of contradiction. So fiction has the chance to clearly thwart ideology — it can be made to seem inconsistent.",
            "In Jules Verne, Macherey analyzes the bourgeoisie ideal of progress — but what happens is in fact a rediscovery of the past. So the adventurer’s journey is an illusion.",
            "So, should we analyze particular works at all in Marxist analysis? Some say we should analyze genres that have remained dominant for long periods. Let’s analyze “Scandal in bohemia” as one entry in the detective genre, then.",
            "The ideological object here is the belief in the overwhelming power of empirical observation and deduction. Think of Holmes’ “extraordinary powers of deduction”, which he insists is really just working off the same information as everybody else — this is echoed in the story’s structure. In this respect, “Red- Headed League” is probably a better illustration.",
            "Oh! It should be noted that these stories are written when English Society is becoming increasingly difficult to understand. Think of the anonymous faces of the immigrant packed 18th-19th century London. The stories tend to oscillate between two goals: to provide clue that could to the reader arriving at the solution, and to portray Holmes as particularly skilled.",
            "To illustrate the ideology, the stories sometimes include the odd character who draws the wrong conclusion. Think of Javez Wilson in “League”. So Doyle limits the power of observation, then. Tools for the toolbox:",
            "Ideology: the medium in which we become conscious of conflicts within class societies. Ideology covers the whole range of ideas — political, artistic, religious, philosophical. We have ideology whenever an idea functions to disguise the real conflicts of society, or seeks to generate consent to an unfair society.",
            "Hegemony: the process by which one class gains the consent of the populace to their worldview. It is the process of building consent out of the existing ideologies, it assumes that to direct a society you have to tilt or angle people’s beliefs."
          ]
        },
        "10 Psychoanalytic Criticism": {
          "null": [
            "Sigmund Freud was interested in literature — he often attempted to apply psychoanalysis to literature. We’re going to study a later branch of psychoanalysis which incorporated Structuralism under Lacan.",
            "Psychoanalysis is both an elaborate theory and method. Freud developed this theory from his experiences with treating individual patients. Among the most famous of this theoretical discoveries is his discovery of the unconscious — his decision to think of the mind not as a single conscious entity, but a conscious and unconscious.",
            "The content of the unconscious is utterly different from the thoughts of the conscious. Its content is there only because it had to be “buried”. Freud thought of this when treating patients suffering from “neurosis” and “hysteria”. He believed that hysterics “suffer from reminisces” — where at some point in their lives they experienced a strong impulse or wish which had to be buried because of societal standards.",
            "Freud came up with different techniques to interpreting these symptoms — usually by placing the patient in a place where their repressive nature is weakened.",
            "Freud radically assured the the Baby had no sense of self — its just a bundle of impulses, a “person- omlette”. He believed that the impulses of an infant’s life are “erotic”, since adult erotic pleasures are derivative of these infantile sensations. Many of these pleasures are directly in association with the mother — so when the father becomes a rival for the child’s affections, the child develops an Oedipal complex. To become a man, the child must give up this complex, and begin forging its own complex. Though necessary, this transition is traumatic, as it forces the developing human to repress these erotic wishes. These repressed wishes constitute the unconscious. Thus, adulthood and adult sexuality is predicated upon the existence of an unconscious.",
            "All this is kinda far-fetched, right? But keep in mind that Freud was describing more a pattern of development than a process that literally applies to everyone. At some point, the child will encounter prohibition of impulses that forces a child to give up their narcissism and triggers a reorganization of the world.",
            "In the 50s and 60s, Jacques Lacan introduced psychoanalysis and structuralism to one another. He suggested that the moment of consciousness is also the moment a child acquires language.",
            "Note that in order for an Oedipal complex to develop, the child must accept that it is one and not the other — that it is like the father, but that it is separate from the father. So, it has to abstract itself as a class of humans. This requires language.",
            "Lacan said this is “the entry into the symbolic order.”",
            "Remember that Derrida said that meaning slips from signifier to signifier. Lacan said so too it was for satisfaction and language. The symbolic order is always pushed around by our wants — this is called “the Real”, which disturbs and upsets the symbolic order’s desire to be complete.",
            "So Lacan claims that “The Real” is something we only encounter in indirect forms — in the patterns of life, and in our dreams. Readings:",
            "(reading.) Zizek contests the common notion that psychoanalysis is dead from exposure to better scientific methodology and a modern culture of hedonism. He accounts that psychoanalysis in the realm of dreams is useful to think in the principle of “reality is for those who cannot sustain the dream.”",
            "So Fantasy is where we protect ourselves from the knowledge that the symbolic order is disrupted and incomplete. It’s the way we “sew the world up”. European Anti-semitism is one such Fantasy. This explains the strange attachment we have for certain ideas.",
            "(reading.) Brooks argued that, in essence, the only reason why we give beginnings in a story their unique significance is because they indicate an ending of some kind: so, we hastily finish the beginning and work through the obstacle of the middle so we may know the satisfaction of the ending. Yet this desire for death is moderated by the innate fear of the improper ending — hence, repetition intermediates the drive for death, linking a novel’s subplot to its ‘main plot’, linking various aspects of a story to various points of the plot — thus mimicking how a dreamer will repeat stimuli of everyday life or traumatic events in order to master the food of stimuli. Yet, we shouldn’t be so foolish to think the sole purpose of repetition is mastery: rather, it permits the emergence of mastery and the “possibility of postponement”. The energy of repetition, with all its ‘deviance, extravagance, excess’ is what ‘maintains the plot in its movement through the vacillating play in the middle’.",
            "So then does repetition subvert the very notion of beginning and end? We know that beginnings (in the traditional sense of “it all began when...”) must happen after ends, and that “it is the role of fictional plots to impose an end which yet suggests a return... a rereading... [it wants] to recapture us in its doomed energies.” Fictional works ultimately strive to eternally re-instigate and fulfill the death instinct.",
            "So, psychoanalysis is interested in the desires of and within the text, and how they are related. One application was created by Julia Kristeva in poetry. She thought structuralism had the weakness of thinking that the language’s speakers in this theory had to possess an unconscious. Her claim was that the child was able to reproduce noises that were associated with meaning before acquisition of language. The sounds were made for pleasures — they were themselves agents. Isn’t this the point of Dr. Seuss? This babbling is something we must discard as a pre-language, a separate economy language. Literature’s object, however, isn't identifiable outside of language. This is a usage of the semiotic.",
            "Peter Brooks explored what psychoanalysis means in narrative. He thinks of his work as neo-structuralist. Every narrative is set in motion by a desire. While detours and delays in the fulfillment of the narrative’s desire appear accidental, they must exist for a proper fulfillment: “we want it to end... but we want it to go on.” Readers meaning, a point, from their narrative.",
            "In “A Scandal in Bohemia”, there are two layers of desire: the resolution of the ambiguous beginning of the episodic mystery, and the resolution of the strange and bizarre into something normal and understandable. On top of these two layers there’s a third: what is meant by ‘To Holmes, she is always the woman”. Tools for the toolbox:",
            "Unconscious: that which disturbs our conscious life, but is its precondition.",
            "The Symbolic Order: the order produced at the resolution of the Oedipal Complex",
            "The Real: that which resists the symbolic order",
            "Fantasy: the way we attempt to repair to symbolic order",
            "Semiotic: the signification that precedes the Symbolic",
            "Desire: the form our impulses take on in the symbolic order. It is by definition unsatisfiable."
          ]
        },
        "11 Literature and Gender": {
          "null": [
            "Feminism wasn’t a sudden movement — it has historical roots in many cultures and periods of times. Feminism has moved to get women writers included in the Canon.",
            "Mary Wollstonecraft wrote “A Vindication of the Rights of Women”, as a reaction to the French Revolution — a movement she supported — primarily addressing the rights of men, not women. Yet she failed to convince her English counterparts, and was publicly ridiculed.",
            "So Feminism got its start in the 19th century — in the US, during the Seneca Falls Convention. In Canada, the suffrage movement began in the 1890s and continued through the next two decades. It was most militant in England, where the movement tried not only for suffrage but also education rights and birth control.",
            "All this impacted literary criticism: Virginia Woolf became a famous critic who focussed on women writers, and elevated writers like Austen and Bronte for writing “as women write, not as men write”. This idea, that women literature had a different style than men, served to be very influential for the future of feminism in literary criticism.",
            "Second-wave feminism came about in the 60s amidst many other political movements. This lead to a broader scope of ideas from which to draw from. This also lead to many branches of feminist thought. We might classify these strands of thought into four groups:",
            "1. Equality Feminism: aimed the change laws to bring about equality",
            "2. Radical Feminism: wanting to emphasize difference between men and women, and change in women’s organization",
            "3. Socialist Feminism: emphasis of women in the workplace",
            "4. Deconstructive Feminism: deconstructing boundaries between male and female",
            "Feminists invented new political tactics and formats of demonstration. Discussion groups. “The personal is political” was a motto which indicated that politics echoed in personal actions.",
            "Going forward, we’ll classify feminist literary criticism as follows:",
            "1. Critiques of sexism in literature",
            "2. Advocacy for women's criticisms",
            "3. Theory of “ecriture feminine”",
            "4. Feminist psychoanalytic theory",
            "5. American poststructuralist feminism",
            "So (1) critiques of sexism was basically like shooting fish in a barrel, but the scope was so big. Many scholars took offence to this project, but eventually became more nuanced.",
            "Similar resistance was met upon (2) the project of “gynocentrism” and women authors in the Canon. This eventually resulted in reexaminations of genres.",
            "(3) Ecriture Feminine held that the division between he and she was held up by the symbolic order — which could only be brought down by “womanly writing” which asserted its femininity by its style.",
            "(4) Michell Foulcault extended Derrida to show how our relationship to our body was moderated by social institutions. Judith Butler extended this idea to suggest that gender was performative: gender was a consolidation of our actions and significants. So this meant that there were no natural combinations of gender and sexuality.",
            "Let’s apply all this to “Scandal”. The easiest criticism of it is that its the story of how Holmes was beaten by a woman’s wit. Keep in mind that this was published in the middle of suffrage movements, and the emergence of “The New Woman”.",
            "But there’s more here than a celebration of a woman’s wit. After all, she’s “the woman” — the only woman in the story. She’s what captures “the male gaze” here. We receive descriptions of of her from Holmes, the King, and Watson, but never through her own gaze. Also keep in mind that she’s the greatest representation of her gender in Holmes’ mind, but she’s described as having a man’s wit.",
            "So Doyle’s story is ultimately ambiguous. Her wit is part of her male allure. What if a non-straight male, or straight woman, reads the wok? This is a problem of spectatorship. Tools for the toolbox:",
            "Gender: the term we use to describe the relationship between masculinity and femininity",
            "Écriture Féminine: the kind of writing, described by Hélène Cixous, that undermines the binary oppositions of gender. A subversive and playful kind of writing, an almost artistic version of deconstruction, which is supposed to express one’s bodily sensations more fully than “male” writing",
            "Gynocentrism: a critical stance that emphasizes the recovery and revaluing of literary works by women",
            "Performative Concept of Gender: the argument that gender is not something natural but something which is always a performance, an act"
          ]
        },
        "12 Literature, The Nation, and Colonialism": {
          "null": [
            "We’ll finish the course through Postcolonial theory and criticism. Unlike our focus on Marxism, Psychoanalysis, or Feminist criticism, this body isn’t theoretically unified set of ideas, but rather an interest in a particular situation — a concern of how colonialism influences literature. This contains many theories.",
            "In 1914, the British and French Empires were still going pretty strong. By then, it was a world of some independent nations, and many colonized countries.",
            "Many empires predate Britain: Rome engulfed the Mediterranean, and the Arabic Empire took up North Africa and the Arabian peninsula. This “habit” arose out of sophisticated societies requiring cheaper access to resources. But the colonialism we’re concerned with is modern colonialism.",
            "Colonizing countries, though, didn’t describe their actions in such blunt economic forms. They described it as a noble attempt to civilize primitive people in need of European, or Christian, guidance. So Europeans thought themselves superior.",
            "Yet “civilizing” people required acquiring knowledge about them. They described native peoples, their communities, and their religions and beliefs. This had a dramatic impact on European arts and sciences. Linguistics had part of its origins when a man noticed Sanskrit’s similarity to Greek and Latin. It was also the origin of anthropology, and the theory of race. This reminds us that the colonial “knowledge” wasn’t entirely factual: it was grounded in a particular inarguable ideology. Said describes this apparatus as Orientalism: the ideology which justified colonialism and masked its true horrors.",
            "There were many different kinds of colonies. Settler colonies involved placing European communities on previously Native land. This often involved the displacement or destruction of native communities. In Africa, however, colonizers sought to control colonies without displacement (exception in South Africa). A local elite was often educated and converted, and after were tasked with impressing colonial power upon their community. This created a division within the local population.",
            "There was resistance against colonialism from the beginning. Native peoples in Canada and the US fought against colonizers, though were defeated. Latin states had revolutions against their colonial masters. And India had a series of revolts before Gandhi.",
            "The long process of decolonization in the late 20th century is what justifies the term “Postcolonial”, which describes nations with a colonial past. Populations may still be divided in elites and the majority. This creates a difference in literary output — in language use, for instance. Writers who use native languages remain virtually unknown. This also gave many European writers experiences in colonial processes. Finally, mass immigration has scattered many peoples across the globe (via slavery or otherwise). Thus, multiculturalism is a consequence of colonialism.",
            "Postcolonial studies suggest the terms “core” and “peripheral” countries, to describe military and economic power unevenly distributed across nations.",
            "Postcolonial studies often concern the literature of colonizing nations (so as to see how colonialism impacted their own understanding of the world), expanding the canon of English literature to writers in postcolonial nations, and attempts to understand colonial ideologies within literary texts. So postcolonialism and its theories is similar to feminism — vast, diverse, and decentralized.",
            "Edward Said was the first to insist upon the importance of colonialism in “Orientalism”. So he urges us to see the impacts of colonialism and imperialism, even in texts that seem unrelated to the subject at first glance.",
            "This work is historical — it broadens texts to include the colonials and imperialism of the time. These twin force he claims, were entangled in what it meant to be British at the time. This resulted in twin theoretical innovations:",
            "1. Double Consciousness",
            "2. Hybridity",
            "Double Consciousness was coined by W.E.B. Du Bois as a “sense of always looking at one’s self through the eyes of others”. He was referring to the plight of black Americans who were forced to see themselves through the lens of white society. This was taken up by Postcolonialist thinkers.",
            "So it’s easy to see the application to literature. Postcolonial authors may have a very difficult task. Authors of colonist origin may not wish to discuss colonialist ideology whatsoever.",
            "Writing often describes a scene or a place. Postcolonial criticism urges us to examine what’s included and excluded from this picture. Who is seen as human, or as alien? Who belongs, and who is out of place?",
            "As part of the apparatus of colonialist thought, the colonizers had to draw a sharp line between themselves and the colonized population. Yet we know that these sharp oppositions (i.e. primitiveness vs civility, rationality vs mysticism) are not as they seem: that one side defines the other. So it may seem that the British people are a group with particular characteristics (as they define themselves, at least), closer examination reveals that these characteristics are merely a collection of qualities opposite to what defined (in their minds) the Colonized Others. So Britishness is dependent upon colonialism.",
            "A psychoanalytic twist: Bhabha suggested that the colonial subject was something like Freud’s Conscious, and its colonized other, its Unconscious. The colonizer is often caught between disgust of the colonized, and a fascination of them. Bhabha sees this as a fragility of the colonizer’s identity being fundamentally different from the colonized — as a kind of anxiety concerning how entangled they are from the colonized. This heightened for colonial administrators and the colonized administrators that they were often tasked to educate in language and culture, yet still had to somehow differentiate themselves. Hybridity refers to all such ambiguities between colonizers and colonized.",
            "Stuart Hall gave hybridity a different spin. His interest was how nationalities described themselves as pure (i.e. “The Americans”). This was often entangled in race. So races and nations often wanted to disavow the fact of mixture.",
            "So whats the application to literature? An application to Postcolonial literature. It has succeeded in expanding the Canon. Yet it also asserts the presence of colonialism in every ext even it its not explicit. Tools for the toolbox:",
            "Postcolonial: the situation former colonies and colonizing countries find themselves in after colonies achieve independence.",
            "Double Consciousness: the dilemma of the black subject in America, and the colonial subject, who sees themselves through the lens of their oppressors.",
            "Hybridity: the fate of all attempts to define a national or ethnic identity as self-sufficient. All identities are mixed.",
            "Symptom: indirect, coded expressions of some conflict in the text, something it’s trying to repress."
          ]
        }
      },
      "course_name": "ENGL 251B",
      "is_online": "True",
      "taken": "Spring Term 2017, 3B"
    },
    "CS 241": {
      "course_content_by_units": {
        "1 Introduction": {
          "09-07-2016": [
            "h2. Course Info",
            "* Website: student.cs.uwaterloo.ca/~cs241",
            "** read EVERYTHING!!!! Esp. syllabus",
            "* 10 assignments, 2 weeks now until assignment. After that, 1week/assignment. ",
            "** Get ahead! You don't need 2 weeks to do assignment 1.",
            "** Each assignment has 9 subparts.",
            "** Due Thursday at 7PM.",
            "* DL Troy's lecture slides.",
            "* No annotated versions of these slides available. Consider printing them out and writing them out. ",
            "* Marmoset is a small monkey. It looks at your program and it says, 'no!' Two types of tests: public tests and release tests. No secret tests.",
            "* Almost no marking for style.",
            "* Even if you've used up all release tokens, all tests will still be run on test. ",
            "* Don't use marmoset like a compiler, or a testing program. Don't anger the monkey.",
            "* Your program will be run on the linux.student.cs environment. Use linux tools like vim. ",
            "* Marking: Assignments 25 / Midterm 25 / final 50. Assignments 2.5% each. Must pass weighted exam average to pass.",
            "* Office hours are listed on course page. Attend them!",
            "* Excessive Collaboration! Don't do it!",
            "** do your own work! Make sure you could say, 'yeah, I did this myself' to your mom.",
            "** don't give your work to others",
            "** do not write down anthing when discussing",
            "* No textbooks for this course. Optional texts in DC library. Other reference materials in course site that you should read beforehand.",
            "* Don't post first -- search and read first!",
            "",
            "h2. Purpose of the Course",
            "* You should learn about how you learn in this course.",
            "* We'll be talking alot about language in this course. Tons of meta-language, and meta-cognition.",
            "* This is your first 'Computer Science' course, really. It's the most important you'll ever take. It teaches you programming, really.",
            "* Computer Science is the science of abstraction. It's what we turn to when we want to generalize, to encapsulate.",
            "* This is how you'll learn what the compiler actually does -- this will remove the mystery behind compilers and running files.",
            "",
            "h2. Model of Computation for CS241",
            "In this course, a computer is exactly a CPU and RAM. The CPU controls and manipulates data. RAM loads and stores data, and is connected bidirectionally to the RAM.",
            "This model is all we need to concern ourselves with: everything else is just tangential. We aren't going to worry about the physical details of either component: in this course, we can trust both components in the abstract.",
            "h2. The Semantics of Data",
            "Binary data is a sequence of bits. That's all it is! Everything constructed off data is built off /interpreting/ binary data. So, for instance, '10100011' could mean tons of thins: a decimal number, a hexa number, a character. This is the semantics of computer language: how we decide between the varying meanings of a portion of data. One interpretation is a machine language: a squence of bits with one meaning, tied to machine architecture (e.g. Intel/Motarola, 32-bit/64-bit). Great for machines! They only know one meaning behind every bit: on or off. Machine lanuage is terrible for humans. Try Assignment 1 and find out!",
            "h2. Assembly Language enters Stage Left",
            "* Since Machine Code is so terrible, Assembly language is a simple, textual representation of machine language.",
            "* Far more human readable. This is how you'll do A2.",
            "* Relatively easy to translate assembly language to machine language.",
            "** And that's abstraction for you! Assembly is an abstraction of Machine -- they're equivalents, but assembly hides the details for you in order for you to see the big picture.",
            "* So it's relatively easy to take something from assembly to machine -- that's what an 'assembler' is called. The Assembler is a program, which takes in a program and outputs a program.",
            "* How hard is it to write an assembler? Take a shot at A3 and A4. A1, you are an assembler, A2 makes you make write assembly, then A3 and A4 makes you automate this stuff."
          ]
        },
        "2 The Semantics of Data": {
          "09-07-2016": [
            "h2. Bits!",
            "* A bit is a 1 or 0. Shortened from BInary digiTS",
            "* This works because of electricity, in all of its diverse voltages, is categorized into 'on' and 'off' by ranges.",
            "* A bit means that you have one of two sequences: '0' or '1'. Again, the semantics of either of these sequences are up to the client.",
            "** Similarly, 2 bits means one of four sequences. Altogether, n bits means that you can represent any of 2^n sequences. That is, 2^n different things!",
            "* Let's take the 3-bit example: we have the possibility of representing 8 different things. There are at least two interpretations of these sequences as integers: signed and unsigned. Unsigned: add up all the digits. Signed: subtract the greatest digit from the remaining sum of digits.",
            "** That is, we can represent the same bits as the [0,7] or [-4,3]. For n bits: [0, 2^n - 1] or [-2^n-1,2^n-1 - 1]",
            "** I mean, you could do other interpretations and mappings, but that's unconventional.",
            "** Really, the only way we have these interpreations is because they're physically and electronically convenient.",
            "* The two's compliment operation looks like this:",
            "# Write the absolute value in unsigned binary",
            "# If the original value is positive, done! Else,",
            "# Negate the bits (i.e. swap all 1s with 0s and vice versa) and add one.",
            "* So what's '1010'? Could be unsigned or signed. If unsigned, it's 10. If signed, it's -6 (found via 2's complement operation).",
            "h2. Characters!",
            "* Characters are always 8 bits, for which there are always 3 meanings:",
            "# Unsigned binary number",
            "# 2's complement binary number",
            "# an ASCII character",
            "h2. Hexadecimal",
            "* Why do we have this? Because binary sucks! It's so innefficient! So hexadecimal, which has 16 digits, is far more comgressed.",
            "* Hexadeci has dgitis 0-9, followed by A-F.",
            "* There's nothing special about deci -- we only have it because we've got 10 fingers.",
            "* How to convert between hexadeci and binary?",
            "** Instance: 1010111110011000. Take the number into 4-bit chunks, each of which represent one of 16 possibilities. So that becomes AF98"
          ],
          "09-13-2016": [
            "h2. Grouping of bits",
            "* The most common grouping of bits is a byte. Contains 2^8 = 256 possibilities.",
            "** Want to estimate powers of to? Remember that 2^6 = 64, and 2^10 = 1024.",
            "** Remember this. If you don't, Troy won't give you your degree -_-",
            "* For integers, a byte can contains 0... 255 or -128... 127 if unsigned or 2's comp respectively",
            "* For characters, we can get letters, numbers, punctuation, symbols, ... altogether, the sum of all these necessary characters is less than 128, or 2^7. So that fits nicely in a byte.",
            "h2. Larger Groupings of Bits",
            "* ASCII: American Standard Code for Information Interchange. Represents everything that was listed above, which has a representation within [0, 127]. At first, represented order. Capitals and lowers are separated by a change in the second (or third, rather, since the first is always 0)  most significant bit.",
            "* Extended ASCII: used the most significant bit as well, representing ASCII characters in addition to characters used in other languages. Sadly, these have two standards. 'And when you have two standards, you have no standards.' Especially since it's the whole of representation between 128... 255. But no matter the standard, it can't represent larger scopes of asian languages, which is why we have...",
            "* Unicode! This is backwards compatable with ASCII, so if it sees a 0 is the MSB, it treats it as ASCII. If it begins as 1, it treats the first byte of the character as information about the alphabet the character is in, followed by 3-5 bytes for the character in the alphabet.",
            "* You'll only need to encode ASCII characters for this code.",
            "h2. A Word about Words",
            "* A Word, on a machine, is",
            "# the size of one instruction",
            "# the size of one unit of memory, usually",
            "# also the maximum address in RAM",
            "* In the 50s and 60s, machines used 8-bit words. That is, instructions were 8-bits long. Which meant 256 bytes of memory. HAd to be careful with how you used it!",
            "* In the 70s and 80s, you get 16-bit machines. 2^16 = 64k, roughly = 64 kB of RAM.",
            "* In the mid 80s - 2000s, we get the 32-bit machines, 2^32 = (2^10)^3 * 2^2 = 4 billion = 4 GB",
            "** This is also the size of MIPS",
            "** You need more than 4GB to just start Windows in the first place nowadays",
            "** Windows 95 was super psyched about being 32-bit",
            "* Pretty much every machine from now on will be 64-bit. 2^64 = (2^10)^6 * 2^4 = 1.84 x 10^19. This is more RAM than you will ever need. You don't need this much, unless you're Google.",
            "* For this course, a machine is 32-bit.",
            "h2. Files",
            "* A file is merely a sequence of bites, nothing more and nothing less.",
            "* Files themselves don't have any meaning, but rather by using them in certain ways (ex. cat, g++, xdd).",
            "** cat will try to display the contents of the file as though it were ASCII characters.",
            "** xxd displays the 'actual bits' in the file in hex.",
            "** eog displays images correctly. Try cat'ing an image file -- you'll get a ton of nonsense.",
            "** if you pipe through the nonsense from cat'ing an image into less (xxd blah.jpg | less), you can gleam the ASCII from the image file. Camera info and date will always be encoded in the metadata of it."
          ]
        },
        "3 The Machine Cycle & MIPS": {
          "09-13-2016": [
            "h2. Our Machine: A Stored Program Computer",
            "* CPU flows back and forth to the RAM via the 'bus'/'Backbone'",
            "* What's inside the CPU?",
            "** Some registers ($0, $1, ... $31), each of which can hold a word (i.e. 32 bits)",
            "** The brains of the CPU is in the Control Unit, which has access to Registers and ALU",
            "** The Arithmetic Logic Unit does all operations, which has access to lo and hi registers",
            "** The Program Counter register and Instruction Register also both have 32 bits.",
            "* RAM is the same thing repeated again and again...",
            "** It's boxes with labels, all boxes being the same size (guess what size? 1 word. 32 bits).",
            "** Each box is composed of bytes -- in our system, 4.",
            "** Generally, the RAM has about the same amount of boxes as 2^word_size / number_of_bytes_in_word",
            "h2. Machine Langauge & MIPS as a Programming Language",
            "* All instructions on MIPS reference will, at some point, be encountered.",
            "* MIPS is the language that our CPU speaks. It's Turing-complete (it can do all the operations anyhting else can do).",
            "* 'add $1, $2, $3' has the human meaning 'add together the values in $2 and $3 and place this sum into $1', and has the machine meaning '0000 0000 0100 0011 0000 1000 0010 0000', or '0x00430820'",
            "* To use the results of multiply, you've got to access the hi and lo registers. ",
            "** Hi represents the most significant 32 bits of the results of multiplication, and lo represents the least significant 32 bits",
            "** With division, low gets the quotient, hi gets the remainder.",
            "** You can directly move the contents of hi or lo into a register with hfhi/hflo",
            "h2. Communication between CPU and RAM",
            "* How do you use RAM, though? With load and store. Store puts it into the RAM, load gets it out of the RAM.",
            "* In the lw $t, i($s) instruction, the contents of $s is treated as a hexadecimal address into RAM. The contents of $t will be stored with MEM[$s + i]",
            "h2. Machine Cycle",
            "* PC means 'program counter' -- it's what holds the adress of the next instruction to execute. Keyword: NEXT. NOT THE ONE CURRENTLY BEING EXECUTED.",
            "* IR holds the current instruction.",
            "** Your program is in RAM at address 0. Or, at least, the first MIPS of it.",
            "** When the program stars, the PC is set to 0, and the IR is set to the current instruction -- i.e. the instruction stored at address 0.",
            "** While executing the first instruction, the PC has been changed to 4 but the IR remains the same until the next instruction is executed.",
            "** So, all changes in the IR will happen pretty much simultaneously with changes in the IR.",
            "* Notic that you're writing subprograms, and that your programs should always return -- that is, return to the OS. That is, jr $31. or jump the PC to the value of $31, thus changing the next thing to execute to whatever's in $31"
          ],
          "09-15-2016": [
            "h2. Machine Cycle (cont.)",
            "* Remember the Fetch-Decode-Execute Loop?",
            "** IR always contains the instruction of the current instruction",
            "** PC always contains the pointer to the location of the /next/ instruction to execute",
            "* So why use Jump Register (i.e. jr)? Becase we need to set the PC to where it needs to go after our subprogram is done.",
            "h2. Assembly Language",
            "* MIPS has 18 different instructions.",
            "* Each of 32 registers contains 32 bits",
            "* mips.twoints reads two integer values, and initializes $1 and $2, and executes everything within an emulator.",
            "** Why an emulator? Because if you use the real thing, you could mess stuff up real bad.",
            "h2. Special Registers",
            "* $0 is always 0, and cannot be changed by overwritting by any means.",
            "* $31 is initially set to be the return address: the location in RAM to continue execution.",
            "h2. Assembly Language",
            "* almost 1-to-1 correspondence with machine language. There's only one binary representation of any machine language, but not necessarilly the other way around.",
            "* cs241.binasm converts assembly into machine, but only available after a1 is due.",
            "* Abstraction really means that you keep the stuff you need and polish away all the nitty gritty details. That's assembly.",
            "h2. Examples 1,2,4",
            "* .word is only meant to be in reference to a number, and should never, ever be directly executed. So, for now, we'll probably only use it in combination with lis.",
            "* Generally, instead of using if statements, we'll be using slt and beq in clever ways",
            "* Since we can also use this to loop over stuff, we know that MIPS is Turing complete -- that is, this language can do the same elementary stuff as Java, C++, Perl, etc.",
            "* Let's talk documentation should look like, kiddos. In MIPS, the (;) indicates the start of a comment. Check ex4asm.pdf for well-styled code.",
            "* Your code has variables, if only $0, ..., $31. That's a big difference between this and other languages: there's no option for variable names in the code",
            "** For A2, your programs may well be 100 lines long. You may be using 6-7 registers for different things. Without documentation, you will perish under the weight of your own incompetence and slef-ignorance.",
            "** Stick to a singular meaning for every register.",
            "** Use whitespace.",
            "* To access arays, use the mips.array command. These are stored in RAM, starting at the address stored in $1.",
            "h2. Memory Revisited",
            "* mips.array modifies the CPU such that $2 gets the size of the array, and $1 of the address where the array starts.",
            "* How do we do dynamic mem allocation? That's for the end of the term.",
            "h2. Example 5 - Output!",
            "* If you store something at 0xffff000c, it'll tell stdout to print out what's put there as an ASCII character",
            "* Can also read from standard input, located at 0xffff0004. Same as output, only one character at a time",
            "h2. Lecture 4! Loop Example",
            "* Set variables always at the top",
            "* To fix broken set less than's (with bad i's), you can just use labels. You use labels like:",
            "'loop: add $3, $1, $2",
            "...",
            "bne $2, $0, loop'",
            "* And it all works out! Labels can also be on their own line -- it'll always refer to the next word after it, no matter the whitespace",
            "* Multiple labels an also refer to the same instruction/address",
            "h2. Storing and Restoring Registers",
            "* We aught to make it look like the registers have the same value at the beginning and end",
            "* This doesn't mean that we can't change register values, just the we should put it back the way we got them.",
            "* To store the original values of registers, we can save them on the stack.",
            "** That's what $30 is for: it's the stack pointer.",
            "h2. Procedures: Example 6A and 6B",
            "* $30 always refers to the top of the stack",
            "* By convention, $1 and $2 are your arguments, and $3 is your return value",
            "* Notice the first 2 instructions of Example 6A is a couple store words.",
            "** You'll always store them at the top of the stack, then decrement $30 to adjust accordingly",
            "** pushing uses sw"
          ],
          "09-20-2016": [
            "h2. Example 6B",
            "* Recall that reg 30 has already been stored with the location of the stack",
            "** When you use the stack, decrement $30 by 4 to represent the new top of the stack",
            "* For this reason, $1 and $2 are stored at the top of the stack.",
            "** At the end of the program, these are retrieved.",
            "** Note that before the old $1 and $2 values are loaded back from RAM, $30 is decremented by 8",
            "* $3 isn't stored/loaded back because it contains the return value.",
            "* Notice that the content of Example 6B (sumOneToN) is called within the body of Example 6A",
            "** This is in the form of .word sumOneToN -- the label is used as an address!",
            "* jr 31 in 6B will jump back to the code in 6A.",
            "* Crucial to this process is `jalr $1` in 6A. jalr $1 means that pc will be set to the contents of $1, and $31 will be set to the old PC value. Essentially, it ties $31 to a certain place in the program: to the instruction after jalr $31 instruction: where the old PC would've pointed to.",
            "h2. Rules for stack usage",
            "* So let's say you store n words onto the stack. Afterwards, you `sub $30, $30, 4n` (or the actual MIPS equivalent of that) to properly decrement the stack pointer.",
            "* So then you do your thang, then immediately after you will `add $30, $30, 4n` to properly increment $30 to where it should be again, and load everything back from address.",
            "* In general, if you push it onto the stack, you'll need to pop it back at by the end of your subprogram.",
            "h2. Recursion in MIPS",
            "* Recursion is composed of:",
            "# Base Case(s): produce the value of the smallest problem size",
            "# Recursive Case(s): compute the 'current' value based on smaller problem sizes; call the method again in a way to reduce the problem size",
            "* So, to do recursion, follow these steps:",
            "# Blindly believe that your method will give you the correct answer in the design of the Recursive Case. DON'T LOOK AHEAD. Believe in your future base case.",
            "# Make a plan, and document it. It's worth your while to write down some pseudocode before writing out your (probably long) MIPS subprogram",
            "h2. Example 7A: 'The Main Program'",
            "* the example ode is cut into segments for saving, the program body, restoring, and returning.",
            "* The body just calls recSum, essentially",
            "* 7B is where it gets interesting.",
            "* recSum begins by saving registers on the stack, and decrementing the stack head.",
            "* Recall that summing the numbers of 1 to n can be accomplished by summing n and the sum of 1 to (n-1).",
            "* If n is 0, the subprogram just jumps to the jr $31.",
            "* If n is greater than 0, we have to adjust $1 to have the proper n value for the next call -- that being, n-1. to do that, we'll decrement $1 by 1 and load $2 into $1",
            "h2. A trace of the flow of control",
            "* So, 7A first stores $31 and $4 into RAM",
            "* Then we jump to your first recSum with $1 == 3. Let's shorten that to rS(3).",
            "* rS(3) stores $1, $2, $4, $31, and calls rS(2) since $1 != 0",
            "* rS(2) stores $1, $2, $4, $31, and calls rS(1) since $1 != 0",
            "* rS(1) stores $1, $2, $4, $31, and calls rS(0) since $1 != 0",
            "* rs(0) stores ..., then realizes $1 == 0, so it jumps straight to the jr 31",
            "* rs(0)'s jr 31 jumps back to the instruction after the jalr in rs(1)",
            "* rs(1) calls jr 31, then jumps back to the instruction after the jalr in rS(2)",
            "* rs(2) calls jr 31, then jumps back to the instruction after the jalr in rS(3)",
            "* rs(3) calls jr 31, then jumps back to the instruction after the jalr in Example 7A",
            "* Example 7A jumps back to the OS.",
            "* Every time a recursive call returns, the things it put on the top of the stack are pop Example 7A",
            "* Example 7A jumps back to the OS.",
            "* Every time a recursive call returns, the things it put on the top of the stack are pop Example 7A",
            "* Example 7A jumps back to the OS.",
            "* Every time a recursive call returns, the things it put on the top of the stack are popped.",
            "h2. Template for MIPS recursion",
            "# Save registers",
            "# Check base case",
            "# Look for how to find the next value",
            "# Restore and return registers",
            "h2. Binary trees in (linear) RAM",
            "* For the purposes of a2p8, assume you have the root in a[0], the left in a[1], and the right in a[2]. And that's one tree node.",
            "** The tree isn't empty, so there's at least one node in it.",
            "* You can compute the length of a list using linear recursion. Sure, easy enough But with a binary tree, you'll have to recurse in a binar manner",
            "** You'll need to jalr to the left check, jalr to the right child, then combine the results. In between the two jalr's, save the result of your first jalr -- not just in $3 exclusively!",
            "h2. Other MIPS notes",
            "* There are often unsigned alternatives to typically signed operations. Use at your own discretion.",
            "* There aren't any local variables in MIPS: only registers and stacks. You pick where you want to store info.",
            "* Chill out on dynamic memory for another 8 weeks. You don't need it right now. "
          ]
        },
        "4 Assemblers": {
          "09-20-2016": [
            "h2. Overview",
            "* Any assembler takes in a sequence of characters, and outputs a sequence of bits.",
            "* That is, you make an assembly language program in ASCII, put it through an assembler, then out pops a machine language program.",
            "* In A1, you're the assembler. On A2, cs241.binasm is the assembler. In A3/A4, you write the assembler. The good news is: by that point, you already have binasm to give you the right answer.",
            "h2. Stages to an assembler",
            "* Inside the giant abstract box of the assembler, the ASCII goes through PAss 1, which creates an intermediate representation. Pass 2 takes in the intermediate epresentation of pass 1, as well as the symbol table it produces, and finally produces the machine language program",
            "h2. Why two passes?",
            "* First, we need to deal with labels. Like, `beq $1, $3, sadness` needs to have sadness translated into the equivalent number.",
            "** Since MIPS can have both forwards and backwards references, we need at least more than one pass",
            "** This is what the symbol table contains: where al the labels are.",
            "h2. Defining assembly language",
            "* informal description: see website",
            "* a formal description of the MIPS language, using regex and semantic definitions, will be done A5 and after. This is math.",
            "h2. Basic assembly language syntax and semantics",
            "* syntax: form or structure. Does this instruction follow the right structure?",
            "* semantics: meaning. To have meaning requires syntax. What does this accomplish?",
            "* syntax, for the assembler, we have to be concerned with whether the input has the correct form. Similarly, we have to make sure that the machine language syntax is correct. This is far easier to do.",
            "* semantics, for the assembler, refer to 'what should this instruction do?' To answer this question, you need to concern yourself with your current location, and where you might want to be.",
            "* a label referes to a spot I might want to be.",
            "h2. Analysis (First Pass)",
            "* We must generate an intermediate representation and symbol table.",
            "* tokenization is the process by which I take input (a sequence of characters), and I output a sequence of tokens.",
            "** For example, a, d, d, , $, 3 -> 'add' <- reference to the MIPS add instruction",
            "* A tokenizer might take in 'add $1, $1, $2', and output an <ADD> token, <REG>, <COMMA>, <REG>, <COMMA>, <REG>.",
            "* We're given a tokenizer for A3. Thanks, Troy!"
          ],
          "09-22-2016": [
            "h2. Remember assemblers?",
            "* Assemblers take in a program and produce an equivalent in machine code",
            "* Two passes required to deal with labels",
            "h2. Intermediate Representation",
            "* You get to pick wehre you want to be on the continuum of doing nothing <----> doing everything.",
            "** 'doing nothing' here would be the first pass only returning the same input file",
            "** More than 'doing nothing' would be removing comments",
            "** More than removing comments would be tokenizing things: removing whitespace, newlines, into sequences of meaningful input",
            "** 'doing almost everything' would be making the whole file as binary as possible",
            "h2. Symbol Table",
            "* symbol table stores the address and name for each label definition",
            "* essential to the second pass: cannot be skipped",
            "** Example:",
            "0x0 misery: ...",
            "0xc beq $0, $0, misery",
            "0x1c happy: add $1, $2, $3",
            "** Here, the symbol table would be [(misery, 0x0), (happy, 0x1c)].",
            "** Keep track of address via counter",
            "h2. Synthesis (Second Pass)",
            "* First pass is called the 'analysis phase'",
            "* Uses both the intermediate representation and the symbol table to produce the machine language",
            "* Why does it need both parts?",
            "** You'll probably come across labels somewhere in your intermediate table.",
            "** The 2nd pass looks up where the label is in the symbol table, and performs the required subtraction process to get the right number in the label's place",
            "*** The calculation will likely be (destination - PC) / 4 = (destination - current_location + 4) / 4",
            "h2. Encoding a .word <label> instruction",
            "* Since labels just represent a 32-bit address, we can also put them into .word instruction",
            "* That's simply the address of the label in the symbol table as a 32-bit number",
            "* Same thing as with immediate number in a regular .word instruction",
            "h2. lis or jalr or...",
            "* Advice: look for patterns",
            "** Note, for instance, how add and sub are identical up to the second least significant bit",
            "** Group familiar stuff together",
            "** Write, and use, good helper methods. Abstract where possible.",
            "h2. Efficiency of the symbol table",
            "* Think of (key, value) pairs",
            "* What type is the key? A string. Duh-doi.",
            "* What type is the value? an address.",
            "* Use a dictionary/map ADT:",
            "** insert (Pass 1)",
            "** delete (Never, LOL. No undefining labels in MIPS)",
            "** lookup (Pass 2)",
            "* The hard part of A3/A4: there can be duplicate labels, because programmers can suck sometimes. You've got to catch that error and send it back to the programmer to yell at them.",
            "** This is why the table's lookup will be used in PAss 1 and Pass 2",
            "* So you'll use a map/hashMap to implement this in O(1).",
            "h2. Error checking: Pass 1",
            "* Duplicate label definitions",
            "* Label syntax: they have to be of the right format. Must start with a letter, and be followed by only letters and numbers.",
            "* Basic syntax checking (can aslo be done in Pass 2).",
            "h2. Error checking: Pass 2 or earlier",
            "* Checking label usage to make sure symbol table contains all referenced labels (semantic error, there are more than these)",
            "* Checking proper comma usage (Synax errors...)",
            "** bracket symmetry",
            "** full instructions only occupy a single line",
            "** instructions always reference a valid MIPS command",
            "* More semantic errors:",
            "** instructions always reference registers from $0, ..., $31.",
            "** places where registers should go should only be occupied by one of $0, ..., $31.",
            "** immediate numbers should be valid integers that don't overflow the 16-bit max",
            "** stuff like lw $3, 5($30), which is terrible practice, should be checked by cs241.binasm, and that program's behaviour replicated",
            "h2. Error checking: philosophy",
            "* in general, there's no way to exhaust the list of all the ways things can be wrong",
            "* so, accept those instructions that are valid.",
            "* reject everything else.",
            "* The easy way to cache errors is to precisely define what it means to be correct.",
            "** If what you are reading doesn't meet the criteria for any instruction you know, reject it",
            "h2. A little bit about bits",
            "* Output bits, not ASCII 0 and 1. That'd be dumb. How do you output bits? Look at 'Material for Assignment 3 and 4'",
            "** Especially the 'Add example'. You'll be using putchar",
            "h2. You get arm.cc! Hooray",
            "* Understand the starter code API, and understand it well.",
            "* How to write the assembler?",
            "** Write instruction by instruction",
            "** You have 2 weeks to do the assembler. Do it now!",
            "* Always save backups. Always always always. Save backups question-by-question.",
            "** Test on your A1 solutions. Then, on your A2 solutions. Test on the the MIPS exampples on the CS241 page. Test. Test. Test. Test. for (;;) { System.out.println('Test.') }. Test on bad programs. Test on ugly programs that have subtle semantic errors. Test it on things that should cause errors. Test on not ending with a jr $31. Take the output of your program and output it in mips.twoints, on mips.array. Look through your results with xxd. Test using t1.asm. a1p3.asm. You should make a script that runs a test suite of 20-30 asm files through mips.twoints. Automate the gruntwork, so you don't have to do it. And when you do make a script, test your script.",
            "** Prepare for blind tests.",
            "** Read the spec carefully. Refer to 'Correctness' slide.",
            "* Remember that you have to run in linear time. Only look at the original MIPS once."
          ],
          "10-04-2016": [
            "h1. CS 241 Notes October 4th, 2016",
            "h2. Linker!",
            "* Recall: .import says 'I don't have thsid value now, but it's around here somewhere'. .export says 'make this value available to everyone else.",
            "h2. Linker Pseudocode Step 2",
            "Construct ESD",
            "* combine together each ESD (external symbol definition) into one global ESD.",
            "** addresses/locations may have changed.",
            "*** ex. fred and derf are not at 0xc after Step 1.",
            "*** that is, the addresses mentioned at the notes in fred.merl and derf.merl have shifted after having been loaded.",
            "** add the sizes of previous programs as the offset -- we need to make reference to where the programs have shifted.",
            "h2. Linker Pseudocode Step 3",
            "For each ESR entry",
            "* add the appropriate offset to the location",
            "* look up the value of the label in the new global ESD, and replace 00...0 with the new ESD value.",
            "* if not in the ESD, add a new ESR entry with the appropriate offset.",
            "h2. Linker Pseudocode Step 4",
            "Relocate Internally",
            "For each relovation entry",
            "* add the offset to the code",
            "* add the offset to new relocation entry in notes",
            "See the Pseudocode Notes on the Course Website.",
            "h2. Static Linking vs Dynamic Linking",
            "* Static Linking example",
            "** assemble and combine code",
            "*** one huge executable",
            "*** self-contained",
            "*** exactly what we jsut did with linking",
            "*** tends to generate inflexible, un-scaleable systems",
            "* Dyanmic Linking Example",
            "** done at execution time",
            "## create a string called 'helper1'",
            "## $1 points to this string -- or an array of characters that begins with the first 'h'",
            "## lis $29",
            "## .word binLoader",
            "## jalr $29",
            "## jalr $3",
            "** this calls binLoader. binLoader gets the information for 'helper1' and puts the location into $3.",
            "** so then afterwards, we simply jalr $3 to do whatever binLoader has found for us.",
            "** this way, we can get continually better versions of 'helper1' without having to reassemble my code",
            "** that's why these are called Dynamically Linked Libraries (.dll). ",
            "h2. Where are we now? Where to next?"
          ]
        },
        "5 Introduction to Formal Languages": {
          "10-04-2016": [
            "* Compilers!",
            "h1. Introduction to Formal Languages",
            "* highly recommended: CS 462.",
            "h2. Motivation",
            "* precision of specification and recognition",
            "* means of communication",
            "* easily determine-able the power and limits of communication",
            "* guide us in practice -> design/structure of a compiler",
            "h2. Terminology",
            "* formal languages are rooted in set theory",
            "** a set is a collection of objects, for the purposes of this course",
            "* an alphabet is a finite set of symbols",
            "** Sigma_1 = {a, b, c} is an alphabet",
            "** these alphabets don't have to be composed of the letters of romantic and latin-based natural languages. They can be shapes, words, scribbles, paragraphs, or whatever else.",
            "* a word, for this portion of this course, is simply a finite sequence of symbols from the alphabet",
            "** a word using Sigma_1 are denoted as 'words over Sigma_1'. For instance, w_1 = aba is a word over Sigma_1. ",
            "** w_3 = epsilon, the empty word, can be a word over any alphabet. Denotes that no symbol from the alphabet was used.",
            "h2. Terminology (cont.)",
            "* a language is a set of words. Done!",
            "** languages of Sigma_1:",
            "*** L_1 = {a, aa, aba, bbc}",
            "*** L_2 = {a, aa, aaa, aaaa, ...} (infinite languages allowed)",
            "*** L_3 = {} (empty languages allowed)",
            "*** L_4 = {epsilon} (languages only containing the empty word allowed)",
            "* we denote the size of a word or language, we use |X| notation.",
            "** |L_1| = 4",
            "** |L_4| = 1",
            "** |w_1| = |baab| = 4",
            "h2. Uses of Formal Languages: Specification",
            "* A statement of what is in the language. We want this to be",
            "** precise: no grey area as to whether or not something's in the language",
            "** easy-to-express",
            "** automateable",
            "h2. Uses of Formal Languages: Recognition",
            "* ... means to determine if a word is in the language",
            "* Formally: Given a language L and a word w, recognition answers the question 'Is w in L?'",
            "* In practice: gcc, g++, ... are all recognizers, which have encoded into them the specification.",
            "** Of course, they do more than just say 'no, try again'. If they reject the compilation, they give an error and a line #. If yes, they give you the machine code equivalent.",
            "h2. WLP4",
            "* This is what you'll use in A5",
            "* So let's understand WLP4!",
            "* Stands for 'Waterloo Language Plus Pointers Plus Procedures'",
            "* The language is a set of all valid WLP4 programs",
            "* A word in WLP4 must be a WLP4 program",
            "* The alphabet in WLP4 must consist of all WLP4 tokens.",
            "* So what the frigg is a WLP4 token? Look up 'specification for WLP4 language'",
            "* You'll have to write a tokenizer for WLP4 by A6.",
            "h2. Language Classes",
            "* Noam Chomsky made the Chomsky Hierarchy:",
            "** Grouped languages according to Finite Language (with a finite alphabet), Regular Languages (includes finite languages), Context-free languages (includes regular languages), and Context-sensitive languages (includes context-free language)",
            "** As you move from the inside out in this hierarchy, you increase in complexity and power. That is, a Regular Language that is not finite is more powerful than a Finite Language.",
            "** Why care? Because we'll start at the middle and work our ways out.",
            "h2. Uses of Formal Languages: Organization of Compilation",
            "* lexical analysis (regular languages)",
            "* syntactic analysis (context-free languages)",
            "* context-sensitive analysis, semantic analysis, synthesis (context-sensitive languages)",
            "h2. What Language Level?",
            "* L_1 = {$1, ..., $31}",
            "** is finite, since we can count the number of registers",
            "* L_2 = valid labels in MIPS",
            "** labels have to start with an alphabetical character, then followed by any non-neg number of alphanumerics",
            "** not finite, but it is regular ",
            "* L_3 = load word offsets = {0, 4, -4, 8, 12, ...}",
            "** It has to b contained in 16 bits, so it's finite",
            "* L_4 = valid line of AL for A3P3",
            "** finite! Has to fit into 32 bits.",
            "* L_5 = valid line of AL for A3P4",
            "** context-sensitive (label has to be defined elsewhere)"
          ],
          "10-06-2016": [
            "h2. Language Classes: Regular Language!",
            "* Definition One: how do you specify a regular language? How do you construct one?",
            "* Definition Two: how do you recognize a regular language?",
            "* These two methods are actually equivalent, though they look quite different",
            "h2. Union and Finite Langauges",
            "* Just like what you learned in set theory! T_1 U T_2 = {x | x in T_1 or T_2}.",
            "* Remember that a language, in this class, is a set of words. ",
            "* Then the union of two languages is just the union of their respective sets of words ",
            "h2. Concatenation",
            "* Definition: T_1 • T_2 = {xy | x in T_1 and y in t_2}",
            "* Example:",
            "** T_1 = {dog, cat}",
            "** T_2 = {epsilon, fish}",
            "** T_1 • T_2 = {dog, cat, dogfish, catfish}",
            "** Note: epsilon • w = w.",
            "h2. Repetition",
            "* Definition: T* = {espilon} U {xy | x in T* and y in T}",
            "** This definition is called 'Kleane Closure'",
            "* Alternate Definition: let T^0 = {epsilon}, T^1 = T, T^2 = T • T, etc... T^k = T • T^k-1.",
            "** Then T* = U_{k=0}^{inf} T^k",
            "* Example:",
            "** If T = {dog, cat},",
            "** then T* = {epsilon, dog, cat, dogdog, dogcat, catdog, catcat, dogdogdog, dogdogcat, ...}"
          ]
        },
        "6 Deterministic & Nondeterministic Finite Automata": {
          "10-06-2016": [
            "h2. Recognizers: Finite Automata",
            "* REgular languages can be recognized by finite automata (i.e. 'machine', system) that follow states.",
            "* States can be thought of as 'places', where each place has a certain characteristic",
            "* You can go from this place to place depending on the system's input: i.e. if in State A and you have input X, move to state B.",
            "* One state in the system is a 'start state', which looks an awful lot like a sperm hitting an egg. Squigly line hitting a circle. Hur hur.",
            "* Final States are demarked with two circles. They say something like 'if, after reading input, I am in a final state, I ACCEPT'",
            "h2. Finite Automata Example 1",
            "* Start state 'start'",
            "* From start state, input 'a' moves you to state A",
            "* From state A, input 'd' moves you to state AD",
            "* From state AD, input 'd' moves you to state ADD, which is a final state.",
            "** Hey, look, it's a valid MIPS instruction name!",
            "* From start state, input 'b' moves you to state B",
            "* From state B, input 'n' moves you to state BN",
            "* From state BN, input 'e' moves you to state BNE, which is a final state.",
            "* From state B, input 'e' moves you to state BE",
            "* From state BE, input 'q' moves you to state BEQ, which is a final state",
            "** Ta-da! We have here a tokenizer! This is exactly what the lexer module does.",
            "h2. Finite Automata Example 2",
            "Let's do the example of MIPS labels, where the alphabet is ASCII",
            "* From start state, input of 52 alphabetic characters moves you to state a_1",
            "* From state a_1, a colon moves you to a final state",
            "* From state a_1, any alphanumeric character moves you back to state a_1",
            "* Remember, anything that ends in a non-final state is rejected. It's only when input ends in a final state that things are accepted.",
            "* Also remember: any input that isn't specified in a transition is rejected. Like, 't_' in this system will be rejected",
            "** This is the reason why we specify what is correct rather than what is incorrect: a strict definition like this will lead to easy error checking",
            "h2. Observations about Finite Automata",
            "* ability to trace, and things are in only one state at a time",
            "* transitions out of a state are unique: which is what makes this system deterministic",
            "* implicit error state:",
            "** if a transition is not specified for the current input in the crrent state, ERROR",
            "* so let's call the language of Example 1 M1, and for Example 2 M2.",
            "** Let L(M) mean 'the set of all words recognized by DFA M'",
            "** as specified on the slides, with (MULT, MULTU, ADD, BNE, BEQ), |L(M1)| = 5.",
            "** |L(M2)| is infinite, since we can make any number of valid labels in the system.",
            "* Why is this called 'finite'? You specify only so many states.",
            "h2. More Finite Automata Examples",
            "Let Sigma = {a, b, c|",
            "* What's the DFA for 'strings with exactly one a and exactly one b and no cs'",
            "** From state 0a0b, input 'a' moves you to state 1a0b",
            "** From state 1a0b, input 'b' moves you to final state 1a1b",
            "** From state 0a0b, input 'b' moves you to state 0a1b",
            "** From state 0a1b, input 'a' move you to final state 1a1b",
            "* What's the DFA for 'string with at least one a'",
            "** From state 0a, input 'a' moves you to final state 'at least one a'",
            "** From final state 'at least one a', textual input of any kind moves you to final state 'at least one a'",
            "** From state 0a, non-a textual input moves you to state 0a.",
            "* What's the DFA for 'string with an even number of a's'?",
            "** From final state 'even a's', input 'a' moves you to state 'odd a's'",
            "** From final state 'even a's', non-a textual input moves you to final state 'even a's'",
            "** From state 'odd a's', input 'a' moves you to final state 'even a's'",
            "** From state 'odd a's', non-a textual input moves you to state 'odd a's'",
            "h2. More Finite Automata Examples",
            "Sigma = {a, b, c}",
            "* strings with an even number a's and odd number bs",
            "** Starting state 'even a even b' -- 'a' --> 'odd a even b'",
            "** 'even a even b' -- 'b' --> final state 'even a odd b'",
            "** 'odd a even b' -- 'a' --> 'even a even b'",
            "** 'odd a even b' -- 'b' --> 'odd a odd b'",
            "** ...",
            "** 'even a even b' -- 'c' --> 'even a even b'",
            "** ...",
            "* string with an even number of as or odd humber of bs",
            "** same picture as before, but add 'odd a odd b' and 'even a even b' as accepting states ",
            "h2. DFA Summary",
            "* It's possible that you have equivalent DFAs that result in equivalent languages.",
            "h2. Formal Definition",
            "A DFA is a 5-tuple (Sigma, Q, q_0, A, delta) where",
            "* transition function: delta : Q X Sigma -> Q.",
            "** That is, a state and an input symbol also results in another state",
            "* So within our 'string with at least one a' example,",
            "** Sigma = {a, b, c}",
            "** Q = {noA, at least one A}",
            "** q_0 = noA",
            "** A = {at least one A}",
            "** delta(noA, a) = at least one A",
            "** ...",
            "** delta(at least one a, c) = at least one A",
            "* ^^ this is the reason we often prefer the DFA bubble diagram",
            "h2. DFA Interpreter Algorithm",
            "* Given all the info of the formal definition, follow the DFA specs to output true if accepted, false if rejected, given a word w = w1w2w3 ... wn",
            "\tstate <- q_0",
            "\tfor i in 1... n:",
            "\t\tstate <- delta(state, wi);",
            "\tend",
            "\treturn (state in A)",
            "h2. Implementing DFA's",
            "# Just do plain ol' if statements, i.e. if (input == a) ... else if (input == b) ... etc",
            "## Results in O(|Q| + |Sigma|) running time",
            "# O(1) implementation with a two-dimensional table",
            "## can be implemented with a hashmap of (state, input) to state.",
            "## really fast if you're using hardware"
          ],
          "10-13-2016": [
            "h2. Where are DFAs used?",
            "* Every computer ever! All computers are basically very complicated DFAs",
            "* CPU = DFA (i.e. All CPUs are nothing more than DFAs).  ",
            "** This is the central idea behind the 'Turing Machine'",
            "** The Turing Machine has a finite amount of control over reading and writing to an infinite tape.",
            "** The Finite Control is a CPU, and that Infinite Tape is more RAM than you'll ever have.",
            "h2. NFAs",
            "* L = {bba, baa, bbbbaa, ...}: 2 bs followed b an a or 1 or more bs followed by 2 a's.",
            "* Derive this using a DFA",
            "** Start -b-> 1b",
            "** 1b -b-> 2b",
            "** 2b -a-> bba (FINAL)",
            "** 1b -a-> ba",
            "** ba -a-> baa (FINAL)",
            "** bba -a-> bbaa (FINAL)",
            "** 2b -b-> 3b",
            "** 3b -a-> bbba",
            "** bbba -a-> bbbaa (FINAL)",
            "** 3b -b-> 3b",
            "* Let's do the same thing with an NFA",
            "** START -b-> B1 -b-> -a-> FINAL",
            "** START -b-> B2 -a-> -a-> FINAL",
            "** B2 -b-> B2",
            "** Notice how reading a b from START can get you in one of 2 states",
            "* What's an NFA? Nondeterministic Finita Automota! Multiple transitions out of one state on the same input.",
            "** Notice that the DFA describing the Language is hard to understand, but the NFA is really easy to understand at a glance",
            "** When an input directs you to multiple states, think of it like you're sending clones down the different paths: if one is rejected, the others may continue down their own paths",
            "h2. NFA Definition",
            "* Though a DFA has a transition function T, the NFA has a transition /relation/ T.",
            "* So each input does not produce a state, but instead a set of states.",
            "* Formally, T: Q X Sigma -> 2^Q",
            "h2. NFA Interpreter Algorithm",
            "* Input: A word w = w1...wn where each wi in Sigma",
            "* Output: true if accepted, false if rejected",
            "\tstates <- {q_0}",
            "\tfor i in 1...n:",
            "\t\tstates' <- {s' : s' in T(s, wi) for s in States} // states' represents the next steps you could possibly take from the next element in the word",
            "\t\tstates <- states'\t\t\t\t   // assign next possible states to current states",
            "\treturn states intersection A =/= {}\t\t\t   // return whether any of the generates states is accepting",
            "h2. Implementing an NFA interpreter",
            "* SETS ARE REALLY MESSY AS;LKDFJ;LASDJFASOFBIJASDVNIAOSJLD;KFNV",
            "* Like, it's really hard to make intersection and union operations, along with membership operations (i.e. in) ",
            "* None of those ^^ operations are O(1)! ASl;kdhfas;dgkasdlfjsda;klfjsadfLK;JSA;DFKLHSDAFP98EPOAI;DJS",
            "* In fact, iterating over the set is O(|Q|). ",
            "* So we've totally lost any gain from the pretty NFA diagrams",
            "* Note: there is a neat trick called the 'bit vector' that could be used to help this out (i.e. '10100100' indicates 'in states 8, 6, and 3')",
            "** Intersection and union would be bitwise! :D",
            "h2. Differences between NFAs and DFAs",
            "* NFAs can be smaller than DFAs for the same language",
            "* NFAs can be (but don't need to be) in multiple states at the same time",
            "* DFAs are easier to implement, since you only have one variable to keep track of: the current state",
            "* Both are equivalent in terms of the languages recognized (i.e. given an NFA for a langauge, there is an equivalent DFA for that exact same language)",
            "h2. A few words about the subset construction",
            "* Q: what set of states am I in for each possible input from the current state?",
            "* ie. START -b-> B1, B2 (from 'Let's tdot eh same thing with an NFA')",
            "* Continued, START  -b-> B1, B2 -a-> C2 (the only possible remaining state)",
            "* START -b-> C1, B2",
            "* C2 -a-> D2",
            "* C1, B2 -a-> D1, C2",
            "* C1, B2 -b-> B2",
            "* B2 -b-> B2",
            "* B2 -a-> C2",
            "* D1, C2 -a-> D2",
            "* Big Problem: where do we assign the FINAL states? Anywhere a FINAL state appears",
            "** Hence, D2 and D2, C2 are both FINAL",
            "h2. Review",
            "* Create an NFA for all words over Sigma = {a, b} with the subword aba inside them",
            "** START -a-> -b-> -a-> FINAL",
            "** START -a-> START",
            "** START -b-> START",
            "** FINAL -a-> FINAL",
            "** FINAL -b-> FINAL",
            "** Exercise: create an equivalent DFA",
            "h2. Killer app for Finite Automata/Transducers",
            "* THe tokenizer for A3/A4!",
            "h1. Regular Expresssions!",
            "h2. epsilon -NFAs",
            "* Allows transitions between states on 'no input'",
            "* epsilon is kinda the glue that puts machines together, especially DFAs",
            "h2. Converting e-NFAs to NFAs",
            "# take all e shortcuts (i.e. eX = X for all X in Sigma)",
            "## so instead of START -epsilon-> F -b-> X, START -b-> X",
            "## these shortcuts are only taken if there's a letter afterwards",
            "# pull back final states",
            "## i.e. X -e-> FINAL ==> X (FINAL) -e-> FINAL ",
            "# remove epsilon transitions",
            "# remove dead states (i.e. states unreachable from the START), and all their transitions"
          ],
          "10-18-2016": [
            "h2. Converting e-NFAs to NFAs (Redux)",
            "* When removing e-transition, make sure that all words acceptable beforehand are still acceptable.",
            "* Follow the algorithm ruthlessly!",
            "h2. Regular Expressions",
            "Defined recursively as follows: a regular expression is:",
            "* Empty set",
            "* Nothing",
            "* A letter from the alphabet",
            "* E1E2, where E1 and E2 are REs (concatenation)",
            "* E1|E2 (alternation aka union)",
            "* E* (repetition) ",
            "h2. Regular Expression Examples",
            "L = {cab, car, card}",
            "* cab | car | card",
            "* ca(b | r(d | epsilon))",
            "* Why is this ^^ valid? Because it fits the definition we just prescribed if you go from the atomic elements of the expression to the larger combinations of expressions",
            "Note: the priority of Regular Expression operations goes in:",
            "* * repetition",
            "* dot concatentiaon",
            "* | alternation",
            "Sigma = {a}, L = {w: w contains even #s of a's}",
            "* (aa)*",
            "* ^^ not the same as aa* => a(a)* (due to repetition's higher precidence over repetition)",
            "Sigma = {a, b}, L = {w: w contains even #s of a's}",
            "* b*(ab*a)*b* doesn't capture words like abababa",
            "* (b*ab*a)*b* allows the word to be just b's, as well as any number of correct words",
            "h2. More RE examples",
            "Sigma = {a,b}, L = {w: contains either aa or bb}",
            "* (a|b)*(aa|bb)(a|b)*",
            "Sigma = {a,b}, L = {w: contains neither aa nor bb}",
            "* a|b|(ab)*|(ba)* misses 'aba'",
            "* (ab)*(a|epsilon) misses 'ba'",
            "* (b|epsilon)(ab)*(a|epsilon) gets everything!",
            "* grep uses regular expressions",
            "h2. RE to e-NFA",
            "Coverting REs to e-NFAs can be done by converting piece by piece",
            "* Empty set:",
            "** START",
            "* epsilon (i.e. set containing the empty word):",
            "** START (FINAL)",
            "* a, where a in Sigma",
            "** START -a-> FINAL",
            "* E1E2 where E1 and E2 are REs",
            "** Suppose we have M1 that accepts L(E1), and M2 that accepts L(E2)",
            "** Then connect all final states of M1 to the START of M2 by epsilon transitions, and remove the final-ness of M1's final states",
            "* E1|E2",
            "** Suppose we have the M1 and M2 of the above example.",
            "** Then make a new START state outside either machine, and hook up the new START to M1 and M2's START's by epsilon transitions",
            "* E*",
            "** Suppose we have the M1 of the above examples.",
            "** Then hook up the final states of M1 to a new START, which is FINAL, then connect the new START to the old START by an epsilon transition",
            "** Think of this as the 'short circuiting' of e-NFAs",
            "h2. Circle of Life",
            "* Recall: We can conver e-NFAs into NFAs by the e-shortcut alrogithm",
            "* We cna also convert NFAs to DFAs by subset construction",
            "* We also now know that Regular Expressions into e-NFAs",
            "* You can also convert DFAs into REs! You'll learn about that in CS 360",
            "* So everything can be converted into everything else!",
            "* So, a regular language is a langugage which is:",
            "** specified by a RE, or",
            "** recognized by an e-NFA, or",
            "** recognized by an NFA, or",
            "** recognized by a DFA",
            "h2. Practical Applications of DFAs",
            "* Most real-world examples do not care about recognizers, since we really only care about yes/no for most questions",
            "* DFAs are used for transforming input, searching in text, or scanning/translating ",
            "h2. Transducers",
            "A transducer is a DFA with output -- so transitions have input and output",
            "Example: Remove stutters from Sigma = {a,b}",
            "* START -a/a-> 'a'",
            "** i.e. an input of 'a' generates an output of 'a'",
            "* 'a' -a/epsilon-> 'a'",
            "* START -b/b-> 'b'",
            "* 'b' -b/epsilon-> 'b'",
            "* 'a' -b/b-> 'b'",
            "* 'b' -a/a-> 'a'",
            "h2. More on transducers",
            "* Mealy Machine - output is on a transition",
            "* Moore Machine - output is on leaving a state",
            "* Mealy and Moore Machines are equivalent",
            "h2. DFA for MIPS",
            "* it's not hard to write a DFA to recognize an individual token type",
            "h2. The Scanning Problem",
            "Input: some string w and a language L",
            "Output: w1w2...wn = w where wi in L for all i ",
            "(i.e. the set of tokens that together form w)",
            "* there may be more than one possible answer, but we want the tokenization that's most relevant",
            "Important philosophy: if another piece of w could be part of a previous token, add it to the previous token.",
            "That is, form the greatest possible tokens, not the smallest.",
            "h2. Simplified Maximal Munch",
            "Essentially: eat as much into the current toke as possible",
            "Try out the algorithm on some valid input for WLP4!",
            "h2. Next Steps",
            "* C++ is a terrible language. Why? Try compiling 'vector<vector<int>> v;'",
            "* What's wrong? The compiler thinks you're doing bitshift in the '>>' part of 'vector<vector<int>>'.",
            "* That's why C++ is terrible: it fails the most basic Maximal Munch algorithm"
          ]
        },
        "7 Non-Regular & Context-Free Languages": {
          "10-20-2016": [
            "h2. Non-regular languages",
            "Try to give a DFA over Sigma = {a,b} for L_e = {w: numbers of as in w = numbers of bs in w}",
            "You can't! This DFA is infinite! This leads us to suspect that L_e is not a regular language.",
            "h2. Why the language L_e is important",
            "This is the same problem you face with dealing with opening and closing brackets in compilers.",
            "h2. Context-Free Languages",
            "Context-free languages are build from the same stuff as finite sets, concatenation, and union",
            "* BUT they are also built from recursion, which is NOT the same as repetition",
            "* It is this element of recursion that separates context-free languages from regular languages",
            "Recognizers for regular languages use a finite amount of memory",
            "* Scanner <==> DFA : remember the state. ",
            "* Since there's only so much info in a current state, there's fixed space usage.",
            "Recognizers for context-free languages use a finite amount of memory plus one stack",
            "* parser <==> DFA + stack",
            "h2. Context-Free Grammars",
            "Grammar is a set of rules (such as in English).",
            "* These rules describe what a sentence in the language looks like",
            "** e.g. English sentences might be described as <Noun> <Verb> <Noun>.",
            "** English is looser with its grammar than most languages",
            "h2. A Context-Free Grammar (CFG) Example",
            "Here's an example grammar to a context free grammar, where (->) represents 'can be rewritten as':",
            "1. S -> aSb",
            "2. S -> D",
            "3. D -> cD",
            "4. D -> eps",
            "Derive the word accb",
            "S -> aSb \t(1)",
            "  -> aDb \t(2)",
            "  -> acDb \t(3)",
            "  -> accDb \t(3)",
            "  -> accb \t(4)",
            "h2. Discussion of Example",
            "Let's call the grammar above G.",
            "* G: a context-free grammar (CFG)",
            "* L(G): the set of words specified by G",
            "** recall: a language is a set of words",
            "* a word: a sequence of tokens that can be derived by G",
            "* a derivation: (informally) a sequence of rewriting steps from G",
            "* alternation: one word may be rewritten into one of many different words",
            "** eg S -> aSb, or S -> D",
            "* recursion: something can be defined by itself:",
            "** eg S -> aSb",
            "NOTE: recursion is strictly more powerful than repition",
            "* today, we'll cover how recursion can do more than repition",
            "h2. Formal Definition",
            "A CFG consists of:",
            "* N - finite set of non-terminals",
            "** non-terminal means 'not the end'",
            "* T - finite set of terminals",
            "** terminal means 'end'",
            "* P - finite set of production rules",
            "** aka 'rewriting rules' ",
            "** these rules have the form A -> Beta, where A in N and Beta in (N union T)*",
            "* S in N, the start symbol",
            "h2. Example, more formally",
            "From the example, what's N, T, P, S?",
            "1. S -> aSb",
            "2. S -> D",
            "3. D -> cD",
            "4. D -> eps",
            "N = {S, D}, since S and D can be rewritten as something else",
            "T = {a, b, c}, but NOT eps, because it can't be in a word",
            "P = {S->aSb, ..., D->eps} ",
            "S = S (by convention, S is the left hand side of the first rule)",
            "h2. Example: balanced parentheses",
            "Example Words: eps, (), (()), ()(), ...",
            "CFG: (B for 'balanced')",
            "1. B -> eps",
            "2. B -> (B)",
            "3. B -> BB",
            "Sample Derivations for (()()):",
            "B -> (B)\t(2)",
            "  -> (BB)\t(3)",
            "  -> ((B)B)\t(2)",
            "  -> (()B)\t(1)",
            "  -> (()(B))\t(2)",
            "  -> (()())\t(1)",
            "h2. Binary Expressions",
            "Words are composed of binary numbers with + or - signs in infix notations",
            "Examples: 1001, 10+1, 11-1",
            "CFG: (E for 'expression')",
            "1. E -> E + E",
            "2. E -> E - E",
            "3. E -> B",
            "4. B -> 0\t(B = binary number)",
            "5. B -> D\t(D = non-zero bin number)",
            "6. D -> 1",
            "7. D -> D0",
            "8. D -> D1",
            "h2. Derivations",
            "Two derivations of 10+1 using the previous grammar:",
            "E -> E + E\t(1)",
            "  -> B + E\t(3)",
            "  -> D + E\t(5)",
            "  -> D0 + E\t(7)",
            "  -> 10 + E\t(6)",
            "  -> 10 + B\t(3)",
            "  -> 10 + D\t(5)",
            "  -> 10 + 1\t(6)",
            "Troy's second derivation:",
            "E -> E + E\t(1)",
            "  -> E + B\t(3)",
            "  -> (you can see where this is going.)",
            "  -> D0 + 1\t(7)",
            "  -> 10 + 1\t(6)",
            "All this is to say that thwo different derivations can result in the same word.",
            "* The first one is called the 'leftmost derivation' because we worked first on the leftmost non-terminal",
            "* The second one is called the 'rightmost derivation' for the same reason",
            "h2. Formal Definitions",
            "We say that alpha A Beta directly derives alpha gamma Beta is there exists a production rule A -> gamma",
            "A in N, alpha, Beta, gamma in (N u T)*",
            "We say that alpha A Beta derives alpha gamma Beta if",
            "alpha A Beta ->* alpha gamma Beta",
            "where ->* denotes 0 or more applications of production rules",
            "e.g. E+E ->* 10+1",
            "h2. Leftmost and rightmost derivations (formally)",
            "Where there are two or more non-terminals which can be rewritten in a derivation, we pick the leftmost non-terminal for rewriting",
            "Notice: there are derivations which are neither leftmost nor rightmost",
            "h2. Formal Definitions (cont)",
            "G derives w in T* if",
            "S =>* w",
            "e.g. 10+1 is derived by G_1",
            "L(G) = {w | S =>* w and w in T*}",
            "e.g. n: A -> gamma",
            "L is context-free if there exists a CFG G st L(G) = L"
          ],
          "10-25-2016": [
            "h2. Formal Definitions (cont)",
            "Remember, CFGs look like non-terminals that can be rewritten into a set of terminals or non-terminals",
            "Also remember 'leftmost derivations' and 'rightmost derivations'? So much fun.",
            "Remember, L is context-free if there exists a CFG G such that L(G) = L, where L(G) = {everything that can be derived from some combination of production rules in the CFG} ",
            "h2. Derivations as Proof",
            "In a regular language, we have a DFA M and a word w.",
            "DFA M accepts or rejects w.",
            "(we could give the sequence of states visited, but we don't usually)",
            "So what evidence do we have that w is actually accepted? How could we prove it?",
            "But in a context-free language, we have a CFG G and a word w.",
            "If w is accepted, there's a set of steps to derive w that look something like S =3=> ... =7=> ... =...=> w ",
            "This might be considered 'proof'. The evidence is the derivation itself.",
            "On the exam, Troy could give us a derivation question. BUT the he'd have to look through ALL the sol'ns. ",
            "Instead, he'll ask for...",
            "h2. Parse Trees",
            "Example: 10 + 1 using G1",
            "\tE",
            "     /  |  ",
            "   /    |    ",
            "   B    +     B",
            "   | \t      |",
            "   D\t      D",
            "  /          |",
            " D   0        1",
            " |",
            " 1",
            "=> read the leaves from left to right for the final derivation",
            "The root of the parse tree is always the start symbol",
            "An internal node represents a non-terminal",
            "A leaf node represents a terminal, since it has no children",
            "Discussion:",
            "all derivations of 10+1 are in this^^ parse tree",
            "h2. Meaning of a parse tree",
            "* 'Recursive descent parsing'",
            "* 'Syntax Directed Translation'",
            "* both these things simply mean, ",
            "** 'compute the value of my children, ",
            "** use that to compute my value' ",
            "* So if D -> 1, Dval = 1, possibly.",
            "* if D1->D20, D1.val=2 if D2.val=0",
            "* Carrying this rule up the above tree, we get E_root.val = 3",
            "** That makes sense, since the tree represents 10+1",
            "* NOTE: this'll be useful for A6, believe me",
            "h2. Problems that grammars can encounter: Ambiguity",
            "A real world example of ambiguity:",
            "* 'Sally was given a book by Joyce'",
            "* One reading says that Joyce gave Sally a book",
            "* Another reading says that someone gave Sally a book which was authored by Joyce",
            "* This is because of the ambiguity behind the word 'by'",
            "** Reading One posits that 'by' applies to 'given'",
            "** Reading Two posits that 'by' applies to 'book'",
            "* Of course, there are unambiguous ways to reword either reading",
            "h2. Ambiguity in CFGs: Formal Definition",
            "* A stirng x is ambiguous if",
            "** there exists x in L(G) and",
            "** there is more than one parse tree for x",
            "* A CFG G is ambiguous if",
            "** some word x in L(G) is amgiguous",
            "*** all you need is one bad x!",
            "h2. Problems that grammars can encounter: Ambiguity",
            "Note: a grammar is ambiguous if there is a word x in L(G) st x has at least",
            "* 2 different parse trees, ",
            "* or at least 2 different leftmost derivations, ",
            "* or at least 2 different rightmost derivations",
            "h2. Problems that grammars can encounter: Ambiguity",
            "Consider the brinary expression grammar G1, at 1-10+11",
            "\tE",
            "     /  |  ",
            "    E   -   E",
            "    |      /|\\",
            "    .     E + E",
            "    |     |   |",
            "    1     .   .",
            "          |   |",
            "          10  11 ",
            "* ... but you can generate the same thing with the E + E bit as your first derivation!",
            "* That means G1 must be ambiguous!",
            "* The meaning of the first tree is -4",
            "* The meaning of the second tree is 2",
            "* ... but this means that 1-10+11 has two answers. Uhhh... whoops. ",
            "** this makes programming friggin impossible. 'I think it does this!' 'Oh no, it doesn't.'",
            "** So let's fix it!",
            "h2. Fixing Ambiguity",
            "Let's rewrite our binary expression grammar differently",
            "1. E -> B + E (new)",
            "2. E -> B - E (new)",
            "3. E -> B",
            "4. B -> 0\t(B = binary number)",
            "5. B -> D\t(D = non-zero bin number)",
            "6. D -> 1",
            "7. D -> D0",
            "8. D -> D1",
            "Let's prove that this grammar is unambiguous! Take CS 462.",
            "* So why was E -> E + E bad?",
            "** It uses both left and right recursion",
            "** 'left recursion' means the leftmost symbol of the RHS is the LHS",
            "** 'right recursion' means the rightmost symbol of the RHS is the LHS",
            "** when there is a rule with both left and right recursion you're gonna be ambiguous",
            "h2. Ambiguity in programming languages",
            "* Some programming languages ambiguous grammars",
            "** i.e. if A then n if B then n ... n else X",
            "** there's no way to define what this means",
            "*** the else could happen when A is true and B is false",
            "*** OR the exact opposite!",
            "** This is only resolved by RTFM",
            "h2. Associativity",
            "1 - 10 + 11, using our new grammar G2",
            "\tE",
            "    /   |   \\",
            "   B    -    E",
            "   |        /|",
            "   :       B + E",
            "   1       |   |",
            "           :   :",
            "           10  11",
            "Notice there's only one parse tree for this!",
            "What's the meaning? -4",
            "But what should be the meaning?",
            "* This assumes 1-(10+11), not (1-10)+11 like we might want it to",
            "h2. Fixing Associativity Problems",
            "E -> E+B",
            "E -> E-B",
            "...",
            "So this actually gives us what we want. Hooray",
            "h2. Fixing Associativity Problems",
            "kasdlksdjd;la;sdlkfj;alskdj;alsfdj",
            "h2. Precedence Problems",
            "Adding multiplication to the grammar",
            "* Add rule: E -> E*B to G3",
            "This means the PT to 1*10+11 looks like",
            "\tE",
            "     /  |  ",
            "    E   +   B",
            "   /|      :",
            "  E * B     1",
            "  :   :",
            "  1   10",
            "Correct! But it breaks on 1+10*11",
            "Why? We didn't give precedence to mult",
            "h2. Fixing precendence problems: grammar",
            "We need moar non-terminals!",
            "S: 'sum', P: 'product",
            "1. S -> S+P",
            "2. S -> S-P",
            "3. S -> P",
            "4. P -> P * B",
            "5. P -> P / B",
            "6. P -> B",
            "...",
            "This generates proper trees! :D",
            "Exercise: add brackets!",
            "h2. Regular Languages are Context-Free Languages",
            "'Proof:' By example.",
            "If L is a regular language, there exists",
            "a regular expression R st L(R) = L.",
            "Suppose R = a*b | (cde)*",
            "Construct a CFG G for L:",
            "1. S -> L",
            "2. S -> R",
            "3. L -> b",
            "4. L -> aL",
            "5. R -> epsilon",
            "6. R -> cdeR",
            "Since L(G) = L, L is context-free. QED."
          ]
        },
        "8 Parsing": {
          "11-01-2016": [
            "h2. Algorithm, to construct predictor table",
            "Below, a, B, in (N union T)*, x,y in T, A in N",
            "Empty(a) = true if alpha =>* ep",
            "* NOTE: if alpha is at least one terminal anywhere, this is FALSE",
            "* So all you need to do is to check each nonterminal to see if it dissapears ",
            "First(a) = {x|a =>* xBeta}",
            "* 'starting from a, what can I generate as a first terminal symbol?'",
            "* really, this is creating search trees.",
            "Follow(A) = {y|s' =>* aAyB}",
            "* 'starting from the start symbol, does terminal y ever appear after non-terminal A?'",
            "Predict(A, x) = {A -> a | x in First(a)} U {A->B | x in Follow(A) and Empty(B)}",
            "h2. LL(1) Parsing algorithm",
            "push S'",
            "for each x in w ",
            "\t// the following section will try to expand x",
            "\twhile (top of stack is some A in N) { // i.e. is the top of the stack is a non-terminal",
            "\t\tpop A",
            "\t\tif Predict(A, x) = {A -> a}",
            "\t\t\tpush a",
            "\t\telse",
            "\t\t\treject\t\t\t// only used if there's no rule to expand upon",
            "\t}",
            "\t",
            "\tpop c \t\t\t\t\t// we know c is a terminal now",
            "\tif c != x reject\t\t\t// try to match: if your prediction is wrong, the word is wrong",
            "endfor",
            "accept w\t\t\t\t\t// if the word survived the loop, it's been verified",
            "Ex. Try verifying |=aaby-|",
            "S' =1=> |-S-| =2=> |-AyB-| =3=> |-abyB-| ==> REJECTED, since the algorithm predicted you need a b after the first a. ",
            "h2. Non LL(1) Grammars",
            "Here's an example of one!",
            "1. S -> a b",
            "2. S -> a c b",
            "Let's say I'm thinking of a word that begins with an a. You say that we used rule 1, we'll switch it around to say the word was actually a c b. Troy wins!",
            "So how do we prove that this grammar isn't LL(1)? Well, let's make a predictive table",
            "\ta\tb\tc",
            "S\t1, 2\t ",
            "Hence, it's not LL(1), since it doesn't satisfy the quality that the entries of any given cell at most number 1.",
            "|L(G)| = 2, also. This is a firmly finite language.",
            "NOTE: This grammar is actually LL(2). That is, there are three symbols that can be combined with any of the other symbols. Look ahead 2.",
            "\taa\tab\tac\tba\tbb\tbc\t...",
            "S\t\t1\t2\t...",
            "h2. Converting non-LL(1) grammars to LL(1) grammars",
            "We use factoring! It looks like this:",
            "1. S -> a b",
            "2. S -> a c b",
            "|",
            "v",
            "G1:",
            "1. E -> aX",
            "2. X -> b",
            "3. X -> c b",
            "Proof by predictor table!",
            "\ta\tb\tc",
            "E\t1\t\t",
            "X\t\t2\t3",
            "h2. A non LL(1) language",
            "L = {a^nb^m | n >= m >= 0}",
            "So there all words over L look something like a...a (x n-m) a...a (x m) b...b (x m)",
            "This language isn't LL(k) for any k. ",
            "Grammar (ambiguous):",
            "1. S -> ep",
            "2. S -> aSb (balance between m a's and m b's)",
            "3. S -> aS  (prefix of a's)",
            "Troy's game: Troy says the next element of the word is a, so we use rule 2:",
            "S =2=> aSb",
            "Problem is, Troy says that there's no more elements in the word after that first a. Whoops. LL(1) fails!",
            "Can be repeated for applying rule 3 when the word turns out to be 'ab'.",
            "But even beyond one additional lookahead, there is no amount of k look-ahead characters that can't prevent something like this from happening.",
            "Grammar (unambiguous):",
            "1. S -> A",
            "2. S -> B",
            "3. A -> ep",
            "4. A -> aAb",
            "5. B -> aA",
            "6. B -> aB",
            "Luckily for us, there's...",
            "h1. Bottom-up Parsing",
            "h2. Example CFG",
            "Here's an LL(1) Grammar:",
            "1. S' -> |- S -|",
            "2. S -> AyB",
            "3. A -> ab",
            "4. A -> cd",
            "5. B -> z",
            "6. B -> wz",
            "h2. Stacks in LR Parsing",
            "* Recall that a stack in LL/top-down parsing is used in the following way:",
            "** input processed + stack = current derivation",
            "* For LR/bottom-up parsing, we have...",
            "** stack + current input = derivation",
            "h2. A Trace",
            "* Refer to the Slide Skeleton here",
            "** Shift means push",
            "** Reduce: pop the RHS of a rule and push on the LHS of that rule",
            "* |- is pushed onto the stack",
            "* we'll push the first terminal, a, onto the stack",
            "* push b onto the stack",
            "* oh crap! We have {|-, a, b} on the stack, which means we pop both those off and pop on A instead, by (3)",
            "* eventually we follow this formula until we get |- S -| on the stack",
            "* so we pop three times and push on S'",
            "* so our stack is finished with the start symbol! Hooray!",
            "h2. Shift/Reduce",
            "* Somehow, we knew how to shift and reduce properly. How do we do that?",
            "** esp since we reduced by 'w z' instead of just 'z' at one step. How did we know that?",
            "h2. Constructing DFA oracle for LR(1) grammar",
            "* Donald Knuth proced a theorem that we can construct a DFA for all LR(1) grammars.",
            "** He's a crazy scary computer scientist who's basically a wizard",
            "* We will build and use the transducer, but only for LR(0) grammars.",
            "h2. Building an LR(0) automation",
            "* The L means 'left-to-right input'",
            "* the R means 'rightmost derivation'",
            "* the 0 means '0 tokens of lookahead'",
            "How can we work without lookahead? We simply look at the past, as denoted on the stack.",
            "* a shift is deferring your decision. 'What do you want to do with '|-'?' 'I don't know, we'll make a decision when we get more info'",
            "* so basically we make a dot to keep track of where you are in a rule",
            "h2. A sample construction of the DFA",
            "Small example CFG:",
            "1. ... (refer to slide for sample grammar and rules for constructing this DFA)",
            "~> (1) S' -> . |- E -| -|--> (2) S' -> |- . E -|",
            "\t\t\t\t \t\t\t\t E  -> . E + T",
            "\t\t\t\t \t\t\t\t E  -> . T",
            "\t\t\t\t \t\t\t\t T  -> . id",
            "   (2) -E-> (3) S' -> |- E . -|",
            "\t\t\t\tE  -> E . + T",
            "   (3) --|-> (4) S' -> |- E -| .",
            "   (2) -T-> (5) E -> T .",
            "   (2) -id-> (6) T -> id .",
            "   (3) -+-> (7) E + . T",
            "\t\t\t\tT -> .id",
            "   (7) -T-> (8) E + T .",
            "   (7) -id-> (6)",
            "h2. Using the automoton",
            "For each input token",
            "* start in the start state",
            "* read the stack from the bottom up and read the current input and do the current action indicated for the current input",
            "** shift if there's a transition out of current states on current input",
            "** reduce if the current state has only one item"
          ]
        },
        "9 Compilers": {
          "11-08-2016": [
            "h2. Big Picture of WLP4 Compilation",
            "WLP4 file -----> Compiler ------|\tMIPS Machine langauge",
            " (text)\t\t\t\t|\t   \t\tprogram (binary)",
            "\t\t\t\t\t    |\t\t\t^",
            "\t\t\t\t\t    v\t\t\t|",
            "\t\t\tMIPS assembly language -|",
            "\t\t\t    program (text)",
            "h2. Zooming in on Compiler",
            "\t\t\t\t_____________________",
            "WLP4 file ---->\t|\t WLP4 Scan\t|",
            " (text)\t\t\t|   | tokens\t|<- lexical analysis",
            "\t\t\t\t|   v\t\t   \t\t|",
            "     (Compiler)\t| WLP4 Parse    |<- syntactic analysis",
            "\t\t\t\t|   |\t\t   \t\t|",
            "\t\t\t\t|   | parse tree   \t|",
            "\t\t\t\t|   v\t\t   \t\t|",
            "\t\t\t\t| WLP4Gen\t   \t\t|<- semantic analysis",
            "\t\t\t\t--------------------",
            "\t\t    \t\t|",
            "\t\t    \t\t|",
            "\t\t    \t\tv",
            "\t\t\t\tMIPS assembly language program",
            "h2. Example",
            "Consider the simplest possible wlp4 program:",
            "int wain(int a, int b) {",
            "\treturn a;",
            "}",
            "The tokenizer will output the following tokens:",
            "INT",
            "WAIN",
            "LPAREN",
            "INT",
            "ID",
            "COMMA",
            "INT",
            "ID",
            "RPAREN",
            "LBRACE",
            "RETURN",
            "ID",
            "SEMICOLON",
            "RBRACE",
            "So what we do in A7 is to determine whether this is valid.",
            "How do we do this? Parse trees!",
            "\t\t\t\t|",
            "\t\t\t   procedures",
            "\t\t\t\t|",
            "\t\t\t       main",
            "\t\t\t       ...",
            "\t  INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE ...",
            "\t\t\ttype ID   type ID",
            "\t\t\t...       ...",
            "How do we do any of this? Look at the production rules and figure it out from there.  ",
            "BUT you don't really have to make a tree -- first make a parse tree, then make a .wlp4i file from it",
            "It'll help with A8.",
            "So you'll also have to traverse the entire tree. Luckily, you've been dealing with trees since A3.",
            "Ta-da! The assignments build off each other. How pleasant.",
            "Oh, and we won't do WLP4Gen altogether -- it's spread across 4 assignments.",
            "Error checking - A8",
            "Code generation - A9/10",
            "h2. Context-Sensitive Analysis",
            "* 'context-sensitive' comes down to the principle of: 'where this statement occurs matters.'",
            "* we know at this point that it's passed syntactical analysis, so it's got the right structure",
            "* so the input for CSA is a parse tree (hence, we know that it's syntactically and lexically valid) ",
            "* the output is...",
            "** ERROR if the parse tree represents a semantically invalid program",
            "** PARSE TREE otherwise. i.e. we pass on the input. This indicates that the program has meaning.",
            "h2. Possible errors",
            "* If a program is syntactically valid, what can go wrong?",
            "** variables undeclared ",
            "** variables duplicated",
            "** variables types",
            "** procedures undeclared",
            "** procedures duplicated",
            "** procedures types of parameters, and return value",
            "** procedures and variables: type of calling variables must match type of parameters\t",
            "** variables and procedures: scope of variables (inside/outside of procedures)",
            "h2. Solving the 'variable declaration' problems",
            "* We've already solved the 'variable declaration' problem. ",
            "** Where? On Assignments 3 and 4, where we used the symbol table to keep track of each label's name and location",
            "** So it's the same thing here, except we keep track of a variable's type in addition to the location of its... declaration? LOL idk",
            "h2. Solving the 'undecrared variable' poblem",
            "* The solution? Rigorously test a bunch of correct and incorrect programs.",
            "* Ex of incorrect program:",
            "int wain(int a, int b) {",
            "\treturn c;",
            "}",
            "How do we check undeclared variables? Beause every time a variable is used, we'll reference the symbol table for location and value.",
            "* Notice that statements never have a dcl in them. So all dcl's happen before you use them, or never at all.",
            "* But that's why WLP4 states that statements can never preceed dcl's. Because the axiom of this course is: Troy is nice.",
            "h2. Solving the 'duplicate variable' problem",
            "How do we detect duplicate variables in the following example?",
            "int wain(int a, int a) {",
            "\treturn a;",
            "}",
            "So what will trigger the duplication error? The second 'int a'.",
            "* How do we detect it? When we add a variable to the symbol table, we check the symbol table to see if it's already in there.",
            "h2. Procedures bite us",
            "For example,",
            "int f() {",
            "\tint x=0;",
            "\treturn 1;",
            "}",
            "int wain(int a, int b) {",
            "\tint x=0;",
            "\treturn 1;",
            "}",
            "We're gonna say this program is not semantically valid. Because if we had A symbol table, we'll see a duplicate of x",
            "So having only one symbol table doesn't account for scope.",
            "The other program we could have of course is another function called f before wain. Then we'd have to check procedure duplicates",
            "h2. Solving 'duplicate/undeclared' procedures and variables at the same time",
            "* So how do we ensure that the above program is correct?",
            "** Give each procedure its own symbol table",
            "** The fields of these symbol tables should include name, location, type ",
            "** The symbol table for procedures themselves should be global, ",
            "*** should include name, return type, parameters (type, # order), procedure's symbol table",
            "* Troy's being nice here -- there's a field you don't require -- it's always int!",
            "* Troy's also being nice in excluding global variables from WLP4",
            "h2. Obtaining Signatures",
            "* The grammar says you have some PARAMETERS in procedure/wain, so you know where they are.",
            "* This grammar allows params -> \\ep, i.e. to not have parameters altogether.",
            "* There's another set of rules: ",
            "** params -> paramlist",
            "** paramlist -> dcl",
            "** paramlist -> dcl COMMA paramlist",
            "** dcl -> type ID",
            "** type -> INT",
            "** type -> INT STAR",
            "* So there's only two types you have to worry about",
            "* To learn more types, take CS 444",
            "h2. Why types matter",
            "* Recall: looking at bits does not tell us what they represent",
            "* Types help us remember what a variable means",
            "** int * a = NULL; \t// of valid meaning",
            "** a = 7;\t\t// having no meaning -- this assignment is innappropriate for INT STAR",
            "*** this is actually valid in C++, but we'll disallow coersion/type-casting in WLP4.",
            "h2. Solving the 'type mismatch' problems",
            "* Check out the Semantic Rules for WLP4 PDF",
            "** Not'n: assumptions on top, consequences on bottom",
            "** i.e. what types are the 'pieces' up top",
            "** what types are the results down below",
            "h2. Types of identifiers",
            "* Look in the symbol table for the type of an ID",
            "* Big goal of A8: determine, using the type rules, whether expressions/statements are valid, semantically",
            "h2. Simple production rules",
            "* expr -> term",
            "* term -> factor",
            "* factor -> ID",
            "* Pro tip: store the type with the non-terminals",
            "** i.e. type(LHS) <- type(RHS)",
            "** So decorate your parse tree with types!",
            "h2. Addition and Subtraction are 'hard'",
            "   (multiplication and division are 'easy')",
            "* mult'ing and div'ing can only work between two ints.",
            "* addition and sub'ing allow for the addition/subtraction of some combo/ordering of ints and int*'s.",
            "** int + int, int * + int, int + int * all work. So int* + int* ==> ERROR",
            "** int - int, int* - int, int* - int* all work. So int - int* ==> ERROR",
            "*** note: int* - int* -> int, meaning the offset between those two addresses"
          ],
          "11-10-2016": [
            "h2. Addition and Subtraction are 'hard'",
            "... because you've gotta type check them.",
            "Look at ./typerules.pdf",
            "h2. Functions, comparisons, and other statements",
            "The Type Rules of [Procedure calls] states that",
            "* if all arguments of your function call are of the right type,",
            "* then f(E1, ..., En) will return an int",
            "[Comparisons] rules have a main rule:",
            "* types must match to be well-typed!",
            "* all forms of typical comparisons are reprsented with typical operands",
            "[Control flow]:",
            "* essentially, if the parts of the expression is well-typed, then the whole is well-typed",
            "[Sequencing]:",
            "* a sequence is welltyped if it's empty",
            "* ... or if the sum of its parts are well-typed",
            "[Printing]:",
            "* you can only print ints",
            "* note that C++ allows this, but valgrind doesn't",
            "h2. More advanced context-sensistive analysis",
            "'Real' languages add more complexity",
            "* scope: if-statements / while-loops with variable decl's inside",
            "** nesting/shadowing makes stuff even worse",
            "* user defined types: structs, classes",
            "* nested pointers: e.g. int****** a is valid in C++",
            "* objects: ",
            "** inheritence, ",
            "** sub/super classes, ",
            "** overriding/overloading",
            "** polymorphism",
            "This is why CS444/2 is an entire course",
            "h2. Testing for A9/10",
            "* SERIOUSLY, make a testing framework for A9/10.",
            "* So make a script to scan, parse, and generate the write code",
            "* Diff this against expected output",
            "* Start making many small test cases for this now. This will be your acceptance suite.",
            "h1. Code Generation for WLP4MPMP",
            "... Waterloo Language Plus Pointers Plus Procedures Minus Pointers Minus Procedures",
            "... this is just WL",
            "h2. Code Generation (A9/10)",
            "* Input: Parse tree (semantically valid)",
            "** Also, symbol table for procedures + variables // SUPER IMPORTANT TO GET THIS WORKING IN A8",
            "* Output: MIPS assembly language (text)",
            "** must be equivalent to WLP4 file",
            "*** what the hell does equivalent mean? output + return value the same",
            "Number of different outputs:",
            "* add $1, $1, $0 <- 'useless', since it doesn't change output/return",
            "** so putting this into your code will make your code base different, but the return the same",
            "h2. Code Generation Issues",
            "* Correctness",
            "** the minimum requirement",
            "** 'does it have the correct meaning?' ",
            "* Ease of writing compiler",
            "** language specific",
            "* efficiency of the compiler",
            "** speed of compilation:",
            "*** O(n) good",
            "*** O(n^2) fail",
            "*** it shouldn't take years for programs to compile",
            "* efficiency of the compiled code",
            "** i.e. speed of machine code",
            "** dw about for this course unless you're doing A10 bonus",
            "** the best compiler was once WATCom",
            "*** had the best, fastest C++ compiler",
            "h2. Code Generation via Syntax-Directed translation",
            "Fundamental idea:",
            "* traverse the parse tree and gather info",
            "** down, then up",
            "h2. First Rule",
            "We only have",
            "main -> INT WAIN ...",
            "in the WLP4 Production Ruleset. So you're generating the code for main.",
            "i.e. code(main) = <stuff> '+' \t\t// for some def'n of concatenation",
            "\t\t  code(dcl1) '+'",
            "\t\t  code(dcl2) '+'",
            "\t\t  code(decls) '+'",
            "\t\t  code (statements) '+'",
            "\t\t  code (expr) '+'",
            "\t\t  <other stuff>",
            "The whole point of ^^ is to break everything down into smaller parts.",
            "h2. Three more simple rules",
            "statements -> \\ep",
            "* Hence, code(statements) = '' // for some definition of empty",
            "expr -> term",
            "* Hence, code(expr) = code(term)",
            "term -> factor",
            "* Hence, code(term) = code(factor)",
            "In general, if \\alpha -> \\Beta, where both are non-term's....",
            "* code(\\alpha) = code(\\Beta)",
            "You'll have all these rules generating code by the end of A10.",
            "h2. A9P1",
            "Recall that the input must look like this for A9P1:",
            "PROGRAM A",
            "int wain(int a, int b) {",
            "\treturn a;",
            "}",
            "PROGRAM B",
            "int waint(int a, int b) {",
            "\treturn b;",
            "}",
            "What does the Parse Trees look like?",
            "\t\t\t\tmain",
            "\tINT WAIN (dcl COMMA dcl) { dcls statements RETURN expr SEMI }",
            "\t\t  \t\t\t\t\t   |",
            "\t\ttype ID    type ID  \\ep    \\ep\t\t  term",
            "\t\t\t\t\t\t\t   |",
            "\t\tINT         INT\t\t\t\t   id",
            "Assume 1st param in $1, 2nd param in $2, return in $3",
            "so equivalent MIPS is",
            "add $3, $1, $0 ; or $2 if you're doing PROGRAM B",
            "jr $31",
            "h2. Changes to the symbol table",
            "name\ttype\tlocation",
            "a\tint\t$1",
            "b\tint\t$2",
            "h2. How to store variables",
            "Option A: Variables in Registers",
            "One variable per register, stored somehow in symbol table",
            "Problems:",
            "* what if they've got more than 32 variables?",
            "* heck, your MIPS program will likely have more than 32 variables",
            "Option B: Variables in RAM using .word",
            "Each variable x in WLP4 program corresponds to label x in MIPS",
            "Example",
            "...",
            "jr $31",
            "a: .word 0",
            "b: .word 0",
            "...",
            "Problems:",
            "* getting the value of a var requires a lis/.word, then a lw $3, 0($3) ",
            "* the problem is, this has alot of overhead for alot of variable access/change",
            "* also, no solution to name clashing, i.e.",
            "** WLP4 variable name <=> MIPS variable name (i.e. something like 'loop)",
            "** wain <=> procedures",
            "h2. Option C",
            "... put variables onto the stack!",
            "* suppose we've got n variables",
            "** n can be generated by getting the size of the global symbol table generated",
            "* This gives us a picture in RAM",
            "** i.e. we reduce $30 by n*4",
            "** 'location' can be given as the index needed from $30",
            "** so variable with index i has location $30 + 4i",
            "* ...but $30 might change. What will you do?",
            "** answer: use $29! We'll use it as the 'frame pointer' that tells me wehre my registers are",
            "** points to the bottom variable, just above $30's original position",
            "h2. Some conventions",
            "$0 - 0",
            "$1 - value of 1st param, initially",
            "$3 - return value",
            "$30 stack pointer",
            "$31 return address",
            "plus ",
            "$4 - 4",
            "$11 - 1",
            "$29 - frame pointer",
            "h2. Code Structure",
            "The code generaiton has some stuff at the befinning and end.",
            "Prologue:",
            "lis $4",
            ".word 4",
            "lis $11",
            ".word 1",
            "; store $31, etc ...",
            "Generated Code:",
            "* WLP4 file specific stuff",
            "Epilogue:",
            "; restore $31",
            "jr $31",
            "h2. One more rule (A9P2)",
            "factor -> LPAREN expr RPAREN",
            "i.e. the following is valid:",
            "int wain(int x, int y) {",
            "\treturn (x); // CRAZY!!!!1!",
            "}",
            "... this should generate the same code as A9P1.",
            "Your job here is 'ignore the parentheses'",
            "h2. A9P3: Full expressions",
            "Woah hold on to your butts:",
            "int wain(int a, int b) { return a+b; }",
            "* add $3, $1, $2",
            "* jr $31",
            "int wain(int a, int b) { return a+b; }",
            "* add $3, $1, $2, $1 // ... er, or the equivalent",
            "So how do you legit do this?",
            "a + b + a is an expr, which is an expr PLUS term, and that term goes to an id, and that expr goes to an id PLUS id. ",
            "So jus get the value of the subtrees from the top down into the smallest divisible subtrees",
            "Be careful to not put this kinda crap into $3 all the time, 'cause then you overwrite your previous crap."
          ],
          "11-15-2016": [
            "h2. AlP3: Parse Tree",
            "* Remember that we need the parse tree to properly generate code and find the semantics of an expression",
            "* i.e. how do we gnerate code for a+b+a? Follow the ordering of the parse tree:",
            "\t\t\texpr",
            "\texpr\t\tPLUS\t\tterm",
            "   expr PLUS term\t\t       factor",
            "    :         :                          ID",
            "   ID        ID",
            "* The code of the left subtree means '$3 <- a+b', and the right subtree means '$3 <-a'",
            "* Whoops! That would overwrite the actual solution to a+b+a",
            "* We'll eventually use an operand stack",
            "* We could use registers to store intermediate registers, but then we'll run out of registers",
            "h2. A9P3: Pseudocode",
            "Using the stack!",
            "* expr1 -> expr2 PLUS term",
            "* code(expr1) = code(expr2) + // $3 <- expr2",
            "\t        push($3) +",
            "\t\tcode(term) + // $3 <- term",
            "\t\tpop($5) + //$5 <- expr2",
            "\t\tadd $3, $5, $",
            "h2. A9P4: Printing",
            "* statements -> PRINTLN LPAREN expr RPAREN SEMI",
            "* A first attempt gets code(expr), but that puts the value of code(expr) into $3",
            "** so then we have to move $3 to $1, then call print",
            "** also, we give you print, that will print whatever's in $1 in decimal",
            "** but where is print?",
            "** and we destroy $1, as well as $31 if we're not careful",
            "h2. Where is print?",
            "Solution: .import print in Prologue",
            "* code(statements) = code(expr) +",
            "\t\t\tadd $1, $0, $3 +",
            "\t\t\tlis $5 +",
            "\t\t\t.word print +",
            "\t\t\tpush($31) +",
            "\t\t\tjalr $5 +",
            "\t\t\tpop($31)",
            "* this still destroys $1!!!",
            "h2. How to not destroy $1?",
            "Three possible solutions (two of which have problems)",
            "* try different calling conventions",
            "** e.g. make print get its argument from $3.",
            "** but then you have a bunch of legacy code that requires updates.",
            "** also, everyone else's code breaks.",
            "* save and restore $1 before/after calling print",
            "** there's overhead involved, slightly more inefficient",
            "* stop worrying about it broh: destroy $1",
            "h2. A special note about parameters in $1 and $2",
            "They are not special!",
            "* remember that we save everything using 0($29) and -4($29)",
            "* these are stored on the frame!",
            "* this strategy, though, just depends upon the parameter's proper storage",
            "h2. Other advice",
            "* write comments in your code",
            "** will be checked for style",
            "** also put comments into the MIPS code you generate",
            "* test...",
            "** using WLP4 inputs",
            "** using a script to generate the .wlp4i file",
            "** the MIPS code you generate via mips.twoints, using a script",
            "h2. Declarations (A9P5)",
            "Recall: variables are on the frame",
            "* symbol table has the offset from $29 for each variable",
            "* the ith variable is at $29 - 4*i",
            "h2. Giving ariables values",
            "We have the ... dcl BECOMES NUM SEMI part of the rule.",
            "* so we need to figure out code(NUM), which gives $3 the value of NUM",
            "* recall that the tokenizer would have given you the int value",
            "** sw $3, 4*i($29)  ",
            "We also have stmt -> lvalue BECOMES expr SEMI",
            "code(stmt) = code(expr) +",
            "\t\tsw $3, $*i($29) // i given from the child of lvalue",
            "h2. Booleans (A9P6)",
            "The only spot where boolears are allowed are in control structures:",
            "test -> expr1 LT expr2",
            "Conventions: $0 = 0 <- false",
            "\t    $11 = 1 <- true",
            "MIPS Code:",
            "code(test) = code(expr1) +",
            "\t     push($3) +",
            "\t     code (expr2) +",
            "\t     pop($5) +",
            "\t     slt $3, $5, $3",
            "HINT: make a helper that does the work of these first four lines",
            "h2. While loop (A9P6)",
            "statement -> WHILE LPAREN test RPAREN LBRACE statements RBRACE",
            "code(statement) = loop: code(test) + // $3 <- 0 or 1",
            "\t\t  beq $3, $0, endloop +",
            "\t\t  code(statements) +",
            "                  beq $0, $0, loop +",
            "\t\t  endloop:",
            "* Problem is, if there's multiple while loops, you're gonna have duplicate labels",
            "** Solution: ensure each label has a unique name by keeping track of a loop counter",
            "** But you've gotta be careful! Inner loops will break your code.",
            "Long-range problem: how far can you branch? +- 2^15 words, around 32k.",
            "* that's alot, but it's not unbelievable",
            "** a single line of WLP4 code can generate dozens of MIPS lines",
            "* the solution: lis $labelReg;.word label;jr $lableReg",
            "h2. If statement (A9P8)",
            "statement -> IF test ... statements ... ELSE ... statements ...",
            "code(statement) -> code(test) +",
            "\t\t   beq $3, $0, elseX +",
            "\t\t   code(statements1) +",
            "\t\t   beq $0, $0, endifX +",
            "\t\t   elseLocation: +",
            "\t\t   code(statements2) +",
            "\t\t   afterElse:",
            "again, the labels here will be adjusted by an if-counter",
            "h2. Back to booleans (A9P7)",
            "Rule: test -> expr1 GT expr2",
            "code(test) -> code(expr1) +",
            "\t      push($3) +",
            "\t      code(expr2) +",
            "\t      pop($5) +     // let's call this section of code called A",
            "\t      ",
            "\t      slt $3, $3, $5",
            "Rule: test -> expr1 NE expr2",
            "code(test) -> A",
            "\t      slt $6, $5, $3",
            "\t      slt $7, $3, $5",
            "\t      bne $3, $6, $7",
            "h2. Finishing Booleans (A9P7)",
            "Rule: test -> expr EQ expr",
            "code(test) -> code(NE)",
            "\t      sub $3, $11, $3 // negate the contents of $3",
            "test -> expr GE expr",
            "code(test) -> code(LT) +",
            "\t      // negate $3",
            "test -> expr LE expr",
            "negate GT"
          ],
          "11-17-2016": [
            "h1. CS 241 Notes on November 17th, 2016",
            "h1. Code Generation!",
            "h2. Recap",
            "We know to this point:",
            "* semantic analysis that does type checking and ensures proper declaration",
            "* protip: in the tree you create, you probably want to keep track of type",
            "** also, add comments to your generated MIPS code.",
            "h2. WLP4",
            "Remember that WLP4 conventions are maintained when arrays are used.",
            "However, you don't need arrays to use pointers.",
            "h2. A first example",
            "int *x = NULL;",
            "int y = 7;",
            "x = &y;",
            "return (*x);",
            "This program ends up returning 7. ",
            "How do we do this in MIPS? ",
            "well, you'll construct a symbol table that will look like",
            "wain",
            "name\ttype\tlocation",
            "a\tint\t0\t",
            "b\tint\t1",
            "x\tint*\t2",
            "y\tint\t3",
            "These location entries will correlate to what's stored in the frame",
            "(i.e. 0 will correlate with the word pointed to by $29)",
            "So memory will look like",
            "7\t",
            "NULL",
            "'b'",
            "'a'\t<-- $29",
            "For the sake of simplicity, le's suppose $29 = 0xd0c.",
            "Then upon executing the third instruction, the picture will change to",
            "7\t<-- 0xd00",
            "0xd00",
            "'b'",
            "'a'\t<-- $29 = 0xd0c",
            "Then upon executing the fourth instruction, the word found at 0xd00 will be loaded into $3.",
            "h2. Pointer basics (A10 P1)",
            "factor -> NULL",
            "... will be added to the amount of available rules we will use.",
            "Note: if anyone dereferences NULL, the program should crash.",
            "then code(factor) = add $3, $11, $0",
            "why does it crash? We can't load anything from a non-4 multiple",
            "So it'll give off an 'unaligned word value'.",
            "alright, what about ",
            "factor1 -> STAR factor2",
            "code(factor1) = code(factor2) + // $3 <- some address",
            "\t\tlw $3, 0($3)",
            "^^ this is super important for the rest of the lecture",
            "h2. Using Address-of (&)",
            "AKA STAR's evil twin.",
            "factor -> AMP lvalue",
            "What the hell is an lvalue?",
            "It can be an ID, a STAR factor, or an (lvalue)",
            "It occurs in one of ther part of the grammar: statement -> lvalue BECOMES expr SEMI",
            "Why didn't we just have 'factor -> AMP factor'? ",
            "* Because stuff like '&7' or '&NULL' is semantically invalid",
            "* Also, that would be like '&&&&x' would be demanding of where the symbol table is stored, which is getting a little too personal. ",
            "So,",
            "1. lvalue -> ID; means stuff like x= is a valid assignment",
            "2. lvalue -> STAR factor means stuff like *y= is a valid assignment",
            "3. lvalue -> LPAREN lvalue RPAREN means stuff like (z)= is a valid assignment",
            "BUT it dissalows multiple identifiers or expresisons on the left, i.e. (x+y = 2).",
            "* Also, it doesn't allow a NUM to be assigned to something else, i.e. 7=5",
            "h2. Generating code for &",
            "factor -> AMP lvalue",
            "Look ahead at the three cases:",
            "1. if lvalue == ID: (e.g. &x)",
            "\tcode(factor1) =lis $3 +",
            "\t\t       .word <OFFSET FOR ID> // hint, look it up in your symbol table!",
            "\t\t       add $3, $29, $3 // to get the actual location in RAM",
            "2. else if lvalue == STAR factor2: (e.g. &*x)",
            "\tcode(factor1) = code(factor2)",
            "3. else if lvalue == LPAREN lvalue RPAREN",
            "\tleft as exercise.",
            "h2. Assignment to pointer dereferences",
            "lvalue -> STAR factor",
            "LEt's step back and look at the rule:",
            "statement -> lvalue BECOMES expr SEMI",
            "h2. Assignment to pointer dereference",
            "lvalue -> STAR factor",
            "look at statement -> lvalue BECOMES expr SEMI",
            "e.g. *x = 4 + 9;",
            "if lvalue == STAR factor:",
            "\tcode (statement) = code(factor) + // $3 <- address",
            "\t\t\t   add $6, $3, $0 + // $6 <- address",
            "\t\t\t   code(expr) // $3 <- value",
            "\t\t\t   sw $3, 0($6)",
            "h2. A 'simple' WLP4 Program",
            "int wain(int *a, int n) {",
            "\treturn *a;",
            "} // x1.wlpp",
            "This returns the first element in the array.",
            "In MIPS: lw $3, 0($1)",
            "^^ terrible for generalization tho",
            "h2. What the hell is mips.array doing anyways?",
            "This is alocating memeory on the heap, then calls wain with the address and size as parameters.",
            "RAM",
            "OS",
            "-----",
            "HEAP",
            "-----",
            " |",
            " |",
            " v",
            " ^",
            " |",
            "-----",
            "STACK",
            "The heap is always growing down RAM, stack always upwards.",
            "h2. A second example",
            "int wain(int *a, int n) {",
            "\treturn *(a+1);",
            "}",
            "Meaning: returns the second element in the array",
            "A word about sugar:",
            "a[1] equivalent to *(a+1), right? By the commutative property, it's also equivalent to 1[a]",
            "^^ syntactic sugar.",
            "h2. Back to compilation (A10P2)",
            "factor -> NEW INT LBRACK expr RBRACK (allocation)",
            "statement -> DELETE LBRACK RBREACK expr SEMI (deallocation)",
            "Prologue:",
            "link in alloc.merl",
            "call init, which was included in alloc.merl, so it initializes the heap",
            "* by this, I mean set $2 to 0 if (int, int), len of array if (int*, int)",
            "To call new: set $1 to the size of the array",
            "calling delete: set $1 to the address to delete unless it is NULL",
            "asd;lksadfkj",
            "h2. Pointer arithmetic (A10P3)",
            "expr1 -> expr2 PLUS term",
            "code(expr1) = \tcode(expr2) +",
            "\t\tpush($3) +",
            "\t\tcode(term) +",
            "\t\tpop($5) +",
            "\t\tadd $3, $5, $3",
            "^^ still valid code for A10 when the type of expr2 is int and type of term is int",
            "but not valid code for other types tho",
            "elseif type(expr2) == int* and type(term) == int:",
            "code(expr1) = \tcode(expr2) + // $3 <- address",
            "\t\tpush($3) +",
            "\t\tcode(term) +",
            "\t\tpop($5) +",
            "\t\tadd $3, $5, $3",
            "\t\t+ _____"
          ],
          "11-20-2016": [
            "h2. Pointer arithmetic (A10P3)",
            "* int + int means the addition of two numbers",
            "* int + int* or vice versa means the indexing of an array",
            "** the int value refers to the offset in words",
            "h2. Pointer Arithmentic (A10P3)",
            "expr1 -> expr2 MINUS term",
            "if type(expr2)==int AND type(term)==int: A9 stuff",
            "elif type(expr2)==int* AND type(term)==int:",
            "\tsame as previous slide, but negate the int value",
            "elif type(expr2)==int* AND type(term)==int*:",
            "\tcode(expr1) = code(expr2) + push($3) +",
            "\t\t      code(term) + pop($5) + // $3, $5 both contain addresses",
            "\t\t      sub $3, $5, $3 + // $3 contains the different between the addresses in bytes",
            "\t\t      div $3, $4 + // difference in words = difference in bytes / 4",
            "\t\t      mflo $3",
            "h2. Comparison of pointers (A10P4)",
            "Remember that tests require to exprs of the same type.",
            "So what needs to the change? ",
            "Well, remember that int* is unsigned, so we need to use sltu instead of slt.",
            "h1. Code Generation for Procedures in WLP4",
            "h2. A picture",
            "Imagine we have code like:",
            "int f(...) {...}",
            "int g(...) {...}",
            "int wain(...) {...}",
            "What does this look like, in terms of RAM?",
            "Well, we know by the WLP4 CFG,",
            "\t\tprocs",
            "\tproc\t\tprocs",
            "\t\t  proc\t\tprocs",
            "\tf\t",
            "\t\t   g\t\tmain",
            "So it makes sense that the functions would be labels beside",
            "their respective bodies, but the prologue will also be before",
            "all of that, to set up stuff like print.",
            "But if we just execute the prologue, then we'll just execute",
            "f, then g, then main, even though it may have never been",
            "called in main. Remember, we want the code to first execure wain.",
            "So we'll treat wain as a procedure, where we'll",
            "lis $3",
            ".word wain",
            "jr $3",
            "And whenever we call another procedure inside wain, we'll",
            "lis $5",
            ".word foo",
            "jalr $5",
            "So not treating wain any differently than other procedures",
            "actually makes thins a heck of a lot easier.",
            "h2. What does each procedure need to do?",
            "Each proedure has its own prologue and epilogue",
            "We'll have to store adn restore $31 likely too",
            "We'll store everything in a single file to make sure that",
            "we don't need any .export/.imports",
            "But we do neet to worry about $29",
            "* each procedure as its OWN FRAME",
            "h2. Saving registers",
            "Overall (naive) idea:",
            "save adn restore all registers!1 lolno",
            "instead, save and restore the important ones",
            "* i.e. $31, $29",
            "Let's say f calls g. To approaches:",
            "* caller-save:",
            "** f saves all registers containing important registers before calling g",
            "** i.e. f doesn't trust g",
            "* callee-save:",
            "** g saves any registers which it modifies",
            "** i.e. g is responsible",
            "What have we been doing so far?",
            "* Callee-save! Since we call at the beginning, store at the end.",
            "* Though we've also been saving and restoring $31 as a caller because of jalr",
            "* So MIPS is kinda both ",
            "h2. What about $29?",
            "Suppose g saves $29",
            "* g must save some registrers on the stack and set $29 for itself",
            "** this changes $30",
            "*** thus, variables for g are above some other saved values",
            "*** this makes life miserable (for reasons you'll soon see)",
            "Suppose f saves $29",
            "* then g can set $29 as it wishes",
            "Verdict and MIPS outline:",
            "f: ...",
            "   push($29)",
            "   push($31)",
            "   lis $5",
            "   .word g",
            "   jalr $5",
            "   pop($31)",
            "   pop($29)",
            "g: ...",
            "   jr $31",
            "h2. What's my name again?",
            "If names of procedures map to labels, then...",
            "WLP4 procedure names map to MIPS labels",
            "Why will this make marmoset hate you?",
            "Something dumb like 'print', say",
            "Well, we already have a system label called print.",
            "That, or 'loop0', or 'else3'",
            "or heck, even 'new' or 'delete'",
            "Really, all this is is namespace collision.",
            "So add a prefix of 'F' or something like that to everything.",
            "This works because no system labels begin with an F.",
            "Thus, all our MIPS labels will be distinct from all system lables.",
            "h2. Parameters",
            "Recall what we did with the symbol table for each procedure.",
            "int wain(int a, int b) {int c=0; return a;}",
            "SYMBOL TABLE",
            "a\tint\t0",
            "b\tint\t-1",
            "c\tint\t-2",
            "(by Troy's conventions -- feel free to use your own)",
            "  <- $30",
            "c",
            "b",
            " <- $29",
            "a",
            "h2. Paramter Ideas",
            "We could use registers for parameters.",
            "That's a terrible idea, as previously established.",
            "Or we could be smart, since we could have alot of parameters, as in",
            "factor -> ID LPAREN arglist RPAREN",
            "arglist -> expr COMMA arglist",
            "arglist -> expr",
            "WLP4 Code: g(2+1, a+4, b*d);",
            "code(factor)  = push($29), push($31) +",
            "\t\tcalculate each expr in arglist + PUSH each one // each time the result goes in $3",
            "\t\tlis $5",
            "\t\t.word 'ID'",
            "\t\tjalr $5",
            "h2. Code for procedure",
            "code(procedure) = sub $29, $30, $4 +",
            "\t\t  push (regs to save) +",
            "\t\t  code(dcls) +",
            "\t\t  code(statements) +",
            "\t\t  code(expr) +",
            "\t\t  pop(regs) +",
            "\t\t  add $29, $30, $4 _",
            "\t\t  jr $33333333333333311111111111",
            "{roblems!",
            "h2. Try an example",
            "int g(int a, int b, int c) {",
            "\tint d;",
            "\tint e;",
            "\tint f;",
            "\t...",
            "}",
            "a\tint\t0",
            "b\tint\t-1",
            "...",
            "so we have",
            "c",
            "b",
            "a",
            "$31",
            "$29",
            "on the stack, all put on by the caller.",
            "That's the argument for the caller.",
            "But we just said that we'd save some reg's on the stack!",
            "So it looks like",
            "f",
            "e",
            "d",
            "// ^^ all saved by callee",
            "// some reg's saves by the callees <-- $29",
            "// vv all saved by the caller",
            "c",
            "b",
            "a",
            "$31",
            "$29",
            "And that's where we end!"
          ],
          "11-24-2016": [
            "h2. Try an example",
            "Problems!",
            "RAM",
            "f",
            "e",
            "d",
            ":",
            ":",
            "($29->) //reg's//",
            "c",
            "b",
            "a",
            "$29",
            "$31",
            "h2. Problems and Mathematical Fix",
            "Parameters and local variables: separated by saved registers",
            "Fix: save local variables before saving registers",
            "i.e.",
            "saved reg's",
            "f",
            "e",
            "d",
            "c",
            "b",
            "a",
            "The problem is, the following symbol table",
            "a 0",
            "b -1",
            "c -2",
            "d -3",
            "e -4",
            "f -5",
            "is wrong. It should actually read",
            "a 3",
            "b 2",
            "c 1",
            "d 0",
            "e -1",
            "f -2",
            "So we just need to add 3 to each entry. ",
            "Why? Because the caller has 3 parameters",
            "How do we know that number? From the symbol table!",
            "h2. The big fix",
            "Solution and picture",
            "the # of parameters to the caller is added to the location of each variable entry ",
            "Notice in this example that a, b, c are the args, and d, e, and f are the local variables",
            "h2. Alternate fix?",
            "Could also save all the registers in the caller, but...",
            "have save + restored once per call to the procedure",
            "e.g. int f() { g(); g(); g(); return 0; }",
            "Let's suppose g() doesn't even touch any registers. All it does is print 2 and return 0.",
            "This will generate a lot of meaningless code.",
            "h2. Optimization",
            "Large and interesting topics: we will just skim",
            "Yo, but you could be asked about it on the exam, lol. So pay attention",
            "CS 444 => 3 weeks of optimization! Woo!",
            "Recall that for any WLP4 program there's an infinite number of equivalent MIPS programs.",
            "But if I added in additional meaningless instructions, that's another equivalent program.",
            "But some of these equivalent programs are /better/. What does that mean?",
            "Well, which runs faster? Which instructions run in faster time than others?",
            "In the real world, some operations run faster than others.",
            "For instance, a--; and --a; run differently. ",
            "--a tends to be faster",
            "Notice: minimal runtime/size in computationally unsolvable.",
            "h2. Optimization: Constant Folding",
            "Consider the expression 5+3.",
            "What our compiler currently does:",
            "lis $3",
            ".word 5",
            "push($3) // sw $3 -4($30); sub $30, $30, 4 ",
            "lis $3",
            ".word 3",
            "pop($5) // add $30, $30, 4; lw $5, -4($30)",
            "add $3, $5, $3",
            "So that's a total of 9 instructions.",
            "What it could do:",
            "lis $3",
            ".word 8",
            "This is what's called Constant Folding.",
            "It says, when your expressions are arithmetic expressions including numbers, simplify.",
            "h2. Optimization: Constant Propagation",
            "int x = 1;",
            "return x+x;",
            "What our compiler currently does:",
            "lis $3\t\t// int x = 1;",
            ".word 1",
            "sw $3, -12($29)",
            "lw $3, -12($29)",
            "sw $3, -4($30)  // push($3)",
            "sub $30, $30, $4",
            "lw $3, -12($29)",
            "lw $5, 0($30)",
            "add $30, $30, $4",
            "add $3, $5, $3",
            "jr $31",
            "or we could use the fact that we know x = 1 always and",
            "lis $3",
            ".word 1",
            "sw $3, -12($29)",
            "lis $3",
            ".word 2",
            "jr $31",
            "Further, if x is never used anywhere else:",
            "lis $3",
            ".word 2",
            "jr $31",
            "h2. Optimization: Common subexpression elimination",
            "Imagine you had:",
            "(a+b) * (a+b)",
            "Your Compiler:",
            "look up a (i.e. lw $3, -???($29))",
            "push a",
            "look up b",
            "pop a",
            "add a, b",
            "All of that code just works out to be just (a+b)",
            "Next, you compiler would:",
            "push",
            "look up a",
            "push a",
            "look up b",
            "pop a",
            "add a, b",
            "pop",
            "mult $3, $5 or whatever",
            "Optimized Version:",
            "look up a",
            "push a",
            "look up b",
            "pop a",
            "add a, b",
            "mult $3, $3",
            "mflo",
            "h2. Optimization: Dead-code elimination",
            "i.e. code is dead if it's unreachable. ",
            "e.g. a function which is never called, ",
            "a test which is always true, or is resolved regardless of user input",
            "* e.g. (0 < 4). ",
            "How do we know what this is? Logical inference.",
            "By that same inference, if b = a + b, then (a < b || c > d) is always true without further input.",
            "Of course, this requires some sophisticated inference",
            "h2. Optimization: Register allocation",
            "Most important optimization: reg vs RAM vs disk",
            "There's about a 1000-fold time difference between RAM and reg and disk and reg.",
            "Notice that man reg's (i.e. $14 - $28) aren't used by our compilation system",
            "Notice that using rebisters would save instruction. Why? storing variables in registers means fewer pushes and pops",
            "So we have 15 free spots for the storage of variables the most used variables.",
            "Problem being: if you request the address via the (&) operations, then it doesn't actually have an address. Whoops.",
            "So if we can & the variables, that means that we must store the variables in RAM, or store it upon address-of requests.",
            "h2. Optimization: Strength Reduction",
            "* add is usually faster than mult (in the real world)",
            "** ex. it is easy to multiply by some numbers (i.e. 1, 2, or 4), hard to multiply by others (i.e. 7).",
            "** BUT note that *7 is equivalent to summing *4, *2, and *1 together",
            "** So divying it up into its base two components will do the trick.",
            "** This is what's called 'strength reduction'",
            "In our program, though, strength reduction isn't a good idea",
            "Why? No bitshift operation in MIPS",
            "h2. Optimization: Inlining Procedures",
            "WLP4 File:",
            "int f(int x) { return x+x;}",
            "int wain(int a, int b) { return f(a); }",
            "'inining' says that the file will be translated into the equivalent inline'd WLP4 program:",
            "int wain(int a, int b) { return a+a; }",
            "Replace the call to the function with the body of the function, essentially.",
            "This is a big win in reducting the overhead that comes with the frame, pushing, calling, restoring...",
            "BUT this can go bad IF the body of f is large and/or there are lots of calls to f.",
            "In that case, after a certain point, the code body actually gets bigger.",
            "h2. Optimization:Tail REcursion in Procedures",
            "In WLP4, we must have exactl one return as the last statement in every function",
            "In other languages, you can have multiple non-last return statements.",
            "Ex:",
            "int fact(int n, int a) {",
            "\tif (n==0) return a;",
            "\telse return fact(n-1, n*a);",
            "}",
            "But notice that the last thing the function does is returning a value: there's no additional work to be done.",
            "Thus, the frame can be reused, upon detecting that the function's tail recursive!",
            "That is, we just reuse the same frame. ",
            "POTENTAIL EXAM QUESTION: 'name 2 optimizations' or 'give me an example of X optimization'",
            "h2. A few words about overloading.",
            "int f(int a) {...}",
            "int f(int a, int* b) {...}",
            "^^ This isn't allowed in WLP4, but is allowed in many languages.",
            "This is solved by 'name mangling', i.e. 'F' + <type info> + '_' + <name>",
            "Problems: C++",
            "* no standard for name mangling",
            "* i.e. g++ might use this convention, but Visual Studio might use another convention",
            "* problem: link together programs compiled by different compilers, and see what happens (╯°□°)╯︵ ┻━┻",
            "Solutions: extern",
            "* use C => no overloading",
            "h1. Memory Control! ┬─┬ ノ( ゜-゜ノ)",
            "h2. A few words on heap management",
            "* WLP4, C, C++ have explicit memory management",
            "** i.e. program(mer) says 'I need X units of memory' or 'I am done with this block of memory'",
            "* delete is a promise to not use memory again",
            "** so usually the program doesn't actually do anything, lol. ",
            "* NEVER TRUST A PROGRAMMER",
            "** Java certainly doesn't -- it does implicit memory management"
          ]
        },
        "10 Heap Management": {
          "11-29-2016": [
            "h2. A few words on heap management",
            "* Remember how most languages have this dumb 'delete' thing?",
            "** Also remember how Java has this dumb 'delete' thing?",
            "* When a programmer tells you something, don't believe them.",
            "** So in many languages, 'delete' don't do a daaang thaaang.",
            "** Java does implicit memory management, hooray!",
            "h2. NEW and DELETE (╯°□°)╯︵ ┻━┻",
            "* factor -> NEW INT LBRACK expr RBRACK",
            "code factor = code (expr) + add $1, $3, $10 + call new($1)",
            "** new, delete, init in alloc.merl",
            "* statement -> DELETE... ",
            "code (expr) + add $1, $3, $0, call delete($1)",
            "h2. Runtime memory management",
            "* happens after compilation",
            "** e.g. don't know the size of the array until runtime",
            "* when you delete, you don't overwrite",
            "** you just say 'someone else can use this space'",
            "* In the context of stack usage:",
            "** initialization -- MAGIC WOW",
            "** allocaiton -- push (decrease $30)",
            "** relamation -- pop  (increase $30)",
            "* Example: Heap Usage",
            "** allocation/reclamation -- complicated when interlcaved",
            "NOTE: here the Heap is just a part of RAM",
            "h2. Four dimensions of heap allocation",
            "The following are programming language decisions",
            "* all designers choose from these same decisions",
            "1. fixed vs. variable size blocks",
            "* fixed: one size of blocks",
            "* variable size: many different sizes",
            "** no perfect implementation possible",
            "2. implicit vs. explicit allocation",
            "* implicit: allocation happens without programmer input",
            "* explicit: allocation happens when programmer says, 'do this.'",
            "3. implicit vs. explicit reclamation",
            "* same idea as for (2)",
            "NOTE: Most often i/e allocation and reclamation are the same",
            "* (e,e) => C++/WLP4",
            "* (i,i) => Racket",
            "* (e,i) => Java-ish (since you have to 'new' Java objects)",
            "* (i,e) => nobody does it, that would be weird.",
            "4. language/implementation",
            "* can pointers be relocated?",
            "** you can definitely do this in C++/WLP4",
            "h2. An easy case",
            "Assume that our language gives you a fixed size of memory,",
            "with explicit allocation, explicit reclamation, no pointer reallocation",
            "* Initialize",
            "RAM:",
            "\t  'the arena'",
            "__________________________________________",
            "| program | heap ---> |       <--| stack |",
            "------------------------------------------",
            "          ^start      ^end",
            "* Allocate",
            "The Arena:",
            "v start                         v end",
            "_________________________________",
            "   k  |\t k  |  k   |\t\t|",
            "---------------------------------",
            "\t           ^ curr",
            "i.e. a bunch of k-sized piece of memory",
            "Upon each allocation, a new pointer to their k-size is given",
            "* Reclaim",
            "** do nothing! Hooray!",
            "h2. Being slightly more clever",
            "* maintain a 'free list'",
            "i.e. free -> 12 -> 3 -> 52 // singly linked list",
            "What should happen when someone's done with block 26?",
            "free -> 26 -> 12 -> 3 -> 52",
            "Back to allocate, with this change to reclamation:",
            "\tif freelist is not empty:",
            "\t\tgive free, and move free to the next element",
            "\telse if curr =/= end",
            "\t\tgive curr and move curr to the next position",
            "\telse:",
            "\t\tERROR: OUT OF MEMORY",
            "h2. Another way to implement this",
            "The Arena:",
            "--------------------------------",
            "| |3|1| |2| | |                | ",
            "--------------------------------",
            "^ start        ^ curr          ^ end",
            "  ^ free",
            "Also allow 3 to point to 2, 2 to 1, and 1 point to NULL",
            "Costs:",
            "* allocation: give block 3, set free to block 2",
            "* reclamation: set free to block 4, block 4 points to 3",
            "* failure: every block is allocated simultaneously",
            "* waste: no 'real' waste => internal fragmentation",
            "h2. Variable size blocks",
            "Life only gets more difficult",
            "A picture:",
            " 10 20   10 10  30",
            "-------------------",
            "|  |2   |  |1 |\t  |",
            "-------------------",
            "allocate(40). The frigg do you do?",
            "Issues:",
            "* allocate",
            "** find 'chunk'/'hole' big enough",
            "* reclaim",
            "** can we coalesce?",
            "** can we combine together all the crap?",
            "h2. Fragmentation",
            "Internal Fragmentation:",
            "* unused memory within an allocated block",
            "** like all the empty air within a bag of chips",
            "External Fragmentation:",
            "* the total amount of available memory is sufficient to accomodate the allocation",
            "** however, there is no contiguous block large enough for the request",
            "** that is, available memory is in small fragments)",
            "** can only happen in variable size blocks",
            "h2. Allocation strategies: Description",
            "* First-fit:",
            "** find the first available block which is big enough",
            "* best-fit:",
            "** find the block which has the least amount of space beyond the requirement",
            "* worst-fit:",
            "** find the block which has the most amount of space beyond the requirement",
            "h2. Allocation strategies: Example",
            "heap size = 100, blocks only in multiples of 10",
            "A <- allocate(10)",
            "B <- allocate(20)",
            "C <- allocate(30)",
            "delete(B)",
            "D <- allocate(10)",
            "First-fit",
            "10 10 10  30   40",
            "A  D      C    ",
            "Best-fit",
            "10 10 10 30 40",
            "A  D     C  ",
            "Worst-fit",
            "10 20 30 10 30",
            "A     C  D",
            "Now suppose E asks for 40.",
            "First/best works, worst fails.",
            "Now suppose E asks for 30, F for 20",
            "First/best fails, worst works",
            "So ultimately,",
            "no matter what allocation strategy you chose",
            "there will always be something you fail on,",
            "but can be accomodated by other strategies.",
            "Problem is, you don't know what will happen in the future.",
            "h2. Allocation strategies: Implementation",
            "First-fit",
            "* search through the list: naive O(n), can get upgraded to O(lgn) with trees",
            "Best-fit",
            "* more complicated than first-fit => O(lgn)",
            "Worst-fit",
            "* find the biggest block => max-heap"
          ],
          "12-01-2016": [
            "h2. Deallocation",
            "* requires a special set of space dedicated wthin each block in reference to various functions",
            "Cookie | Prev | Next | Length | Alloc (flag) | 'real block'",
            "Any pointer to the block points to 'real block', next points to the address after 'real block',",
            "prev refers to the 'real block' before it.",
            "h2. Four cases of delete",
            "(a)",
            "----------",
            "|..|..|..|",
            "----------",
            "    ^",
            "    |",
            "Result:",
            "----------",
            "|..|  |..|",
            "----------",
            "(b)",
            "----------",
            "|  |..|  |",
            "----------",
            "    ^",
            "    |",
            "Result: merge with prev and next",
            "----------",
            "|\t \t |",
            "----------",
            "(c)",
            "----------",
            "|  |..|..|",
            "----------",
            "    ^",
            "    |",
            "Result: merge with prev",
            "----------",
            "|     |..|",
            "----------",
            "(d) ----------",
            "    |..|..|  |",
            "    ----------",
            "        ^",
            "        |",
            "    Result: merge with next",
            "    ----------",
            "    |..|     |",
            "    ----------",
            "h2. Binary Buddy System: Initialize",
            "This is what alloc.merl uses.",
            "Each block has:",
            "* size (amt available memory)",
            "* code (identify the block and its buddy)",
            "Notice code length is inversely proportional to block size",
            "h2. Binary Buddy System: Allocate",
            "i.e. new(100)",
            "All blocks are size 2^k (let's say 1024)",
            "We don't want to allocate all of heap to the new(100)",
            "So we end up splitting:",
            "* split in half",
            "** since it's a power of two, we can do this safely",
            "* code of original block, 1, is split into 10 and 11",
            "* So everything that shares prefixes of k-1 length is a buddy",
            "* but 512 is still too much, so we split again into 100, 101, and 11",
            "* But 256 is still too much, so we split again into 1000, 1001, 101, and 11",
            "* We can't divide 128 again without going under, though -_-",
            "So note that you only merge together buddies, nothing else.",
            "h2. Buddy System: Delete",
            "So we have",
            "| 128  | 128  | 256 | 512 |",
            "| 1000 | 1001 | 101 | 11  |",
            "Let's say block 1000 is freed. What happens next:",
            "| 256 | 256 | 512 |",
            "| 100 | 101 | 11  |",
            "| 512 | 512 |",
            "| 10  | 11  |",
            "| 1024 |",
            "| 1    |",
            "h2. Deferred reclamation",
            "wait: don't coalesce right away",
            "----------",
            "|  |..|  |",
            "----------",
            "    ^",
            "    |",
            "Result: ",
            "----------",
            "|  |  |  |",
            "----------",
            "Heuristic: if I allocate (and free)",
            "a block of size M, then I may want",
            "a block of size M later",
            "When to coalesce?",
            "When 'OUT OF MEMORY' but gurl you be playin",
            "h2. Using a dual-core processor",
            "Anticipate: 'end is nigh'",
            "i.e. when I am '80%' 'fragmented' for some def.",
            "one core => start coalescing",
            "other core => continue to handle requests",
            "'Real-time garbage collection' ",
            "h2. An even better idea",
            "Gord Cormack (C) 2010: 'Use a non-lame language'",
            "What does Gord mean? ",
            "Change",
            "|  | A | | B | | C |",
            "to",
            "| A | B | C |      |",
            "via compaction",
            "C++ is lame.",
            "You can't move stuff around in C++",
            "But you need to do that to avoid external fragmentation",
            "h2. Comparison of copy/compaction",
            "Two arenas: copy and compact",
            "You lose half your RAM, but hey! No external fragmentation",
            "h2. Implicit reclamation",
            "Sometimes called 'garbage collection'",
            "That's where the programmer doesn't say 'Delete this'",
            "* Traditionally: 1950s",
            "** mark + swap:",
            "*** find the garbage",
            "*** reclaim the garbage",
            "* Contemporarily: 1980s - now",
            "** copy + collect:",
            "*** find the good stuff",
            "*** and disregard the rest",
            "h2. Issues opened up",
            "How to determine garbage vs used memory?",
            "CS 240/MATH 239/CO 342",
            "direct graph search",
            "x -> A -> B",
            "I can belete x if I know A and B aren't used,",
            "but also if nothing else points to either A or B."
          ]
        },
        "11 Final Words": {
          "12-01-2016": [
            "h2. A few final words about C/C++",
            "Appel: Compiler textbook, copy and collect (yes, that's the correct spelling)",
            "* stacks are obsolete",
            "** push: allocation",
            "** pop: mark as unallocated",
            "** then do copy + collect as needed",
            "He made a language based on these principles: go <- C with safe pointers",
            "h1. What you should know by now",
            "h2. Mysteries Solved",
            "There should be no mysteries about how programs are compiled and run?",
            "program -> compiler (includes scanner, parser, type-checker, generator, assembler) -> executable",
            "h2. Languages",
            "Languages are more similar than different.",
            "i.e. all languages have conditionals, do primitive operations",
            "and fundamentally, there's not alot more it can do.",
            "Langauges have multiple levels of communications.",
            "My favourite word:",
            "木(the kanji for 'tree')",
            "The kanji for 'grain' is similar to that.",
            "火(the kanji for fire)",
            "then the kanji for 'grain' followed by 火means 'autumn'",
            "Combine that with 'heart' means 'melancholy'",
            "That word has meaning.",
            "h2. Breaking down problems",
            "'The journey of a thousand miles begins with one step.' - Confucius",
            "* don't try to do too much in one go",
            "* break problems down into smaller, manageable parts",
            "h2. Abstraction",
            "Computer science is the science of abstraction",
            "* try to see the big picture (step back)",
            "* focus on the only details that matter, only when they matter",
            "h2. Planning",
            "Planning;s always a good idea",
            "The first compiler was first made for FORTRAN",
            "* FORmula TRANslation",
            "* it took 18 person-years, broh",
            "* i.e. it took a team of 6 people took 3 years",
            "Note that you wrote a compiler in 2 months",
            "You are then an order of 100 times faster than those devs",
            "100 times as smart? Not so much.",
            "Oh, and Grace Hopper was amoung those 6",
            "* One of the highest ranking female officers in the US Navy at the time",
            "h2. Specifications really matter",
            "PHP is not formally specified (as of July 2014)",
            "http://bit.ly/1xeaQVx",
            "When all else fails, RTFM",
            "h2. Testing out your plan",
            "Knowing what the correct answer is helps to know if you have found the correct answer.",
            "* Or, at least, some characteristics of the correct answer",
            "Always test.",
            "h2. Incorrect Things",
            "Don't say what is wrong with the world...",
            "Just say what is right and ignore the rest."
          ]
        }
      },
      "course_name" : "CS 241",
      "is_online" : "False",
      "taken" : "Fall Term 2016, 3A",
      "instructor" : "Troy Vasiga"
    },
    "ENGL 200A": {
      "course_content_by_units": {
        "1 Introduction" : {
          "09-07-2016": [
            "h2. Course Info",
            "* No LAPTOPS ",
            "h2. Periodic Divisions",
            "Middle Ages: ~700 - ~1500",
            "* ~700: around the time of the first surviving English writings",
            "* ~1500: around the transition to the Tudor monarchy",
            "Renaissance: ~1500 - 1660",
            "* 1660: restoration of the English monarchy after the English Civil War",
            "Restoration: 1660 - ~1800 (1795) ",
            "Old English: 700-1200",
            "* 700 - 1066 Anglo-Saxon",
            "\t* Saxons rule after Rome falls",
            "\t* Dominated by dramatic saga literature",
            "* 1066 - 1200: Anglo-Norman",
            "\t* Arrival of Christianity (3rd century onwards). Monastic chronicles.",
            "\t* Arthurnian Literature",
            "Middle English: 1200-1500"
          ]
        },
        "2 Beowulf" : {
          "09-07-2016": [
            "Beowulf goes back to the 6th Century, composed as an oral story, then written down in the 10th Century. The person who actually wrote the poem down likely gave the poem its Christian slant. Let's talk about it!",
            "* By convention, all named characters are always given description upon all mention",
            "* Beowulf's grappling of Grendel without weapons is emblematic of his raw strength.",
            "* Mead-hall as social and societal centre",
            "* Violent, honour-based society",
            "\t* 'blood-price': revenge-based legal mechanism.",
            "\t* 'weregild': similar code common in early societies, hard to stamp out.",
            "\t* no 'free gifts': everything must be returned in this economic system. Read 'The Gift', Marcel Mauss.",
            "* Grendel is a monster/demon cursed to liner outside the hall. Also irritated to hear sounds of the hall.",
            "\t* 'lingers around the _marches_': the boundaries of the lands.",
            "\t* 'the fends': stinky, eel-ridden wetlands",
            "\t* l 137: lacking, infeeling",
            "\t* l 151-156: 'nor stop his death-dealing nor pay the death-price'. Breaks fundamental tenants of society. King is unable to adapt.",
            "\t* l 433 - 434: Grendel is immune to weapons",
            "\t* Ultimately, Grendel is evil because he's outside the law, doesn't follow societal bounds. He is on the outside, and can't by beaten by any small means.",
            "* Let's read the prologue! l 1-85.",
            "\t* Building upon existing literature",
            "\t* Evaluation of characters by narrator.",
            "\t* l 11: sarcasm? 'one good King', yet also 'a wrecker of mead-benches' (l 5)",
            "\t* l20-25. Political insight. Strange. Unusual remark from a typically guarded narrator.",
            "\t* l81-85. Immediate statement that this attempt to build society is doomed!"
          ],
          "09-15-2016": [
            "Grendel's mom. What about her?",
            "* lineage from Cain, though parentless",
            "* similarly described to Grendel.",
            "* displays honourable behaviour in seeking revenge.",
            "* more devious, perhaps less powerful than Grendel",
            "\t* l70. 'wess only by as much as an amazon warrior's'",
            "How are women depicted here?",
            "* Queen is ceremonious, welcoming heroes after time of distress. Hospitality role.",
            "* Narrator suggests around l1920 that 'A queen should weave peace, not punish' (l1942)",
            "\t* Very much a man's world, but women have a place.",
            "l625, 'with measured words'",
            "* l1095. 'sealed their agreement' -- culture depicted places, giant emphasis on the spoken word",
            "Spoken word used as means of honouring past & Beowulf by linking his trials with older heroes.",
            "The poem at l1070 onwards is broken into two-part lines -- traditionally, the first part alliterates. Alliteration seen as poetic strength.",
            "l975 'He is hasped and hoped and hipling w/ pain'",
            "Gets more intense as attacks happen.",
            "Heoric culture & Christian cultures conflict. Norton claims, 'it is difficult... to draw a line between 'heroic' and 'Christian'', p8. Have these things accomodated each other? Not necessarilly contradictory.",
            "Here's one approach: four different aspects of God in Beowulf.",
            "1. God is fate. Fate is repeatedly mentioned: 'fate goes on' (l455), 'fat sweaps them away... but God can easily [stop them].' (l475). So is fate God's control of things? ",
            "\tOne of the great lines of the poem is 'the Lord was weaving a great victory on his war-loom.' (l17) God is, then, in control. Fate is subordinate.",
            "\tLod makes people successful. 'So the Lord... made this man renowned.' (l1271) So God is a giver, similar to the King: distributing gifts. 'mindful of his mighty strength the wondrous gifts God had showered on him' (l1271)",
            "2. God is unknown.",
            "\tGod also takes things away. This comes up in prologue, where narrator says 'no man knows for certain who salvaged that load' (l50). What happened to treasure? What happened to the King? His fate remains unknown",
            "\tBefore Grendel's mopther attacks, 'how could they know fate?' (l1233)",
            "3. God is a just judge",
            "\tBefore fighting Grendel, 'whoever fells must see just judgement by God.' A just outcome will come out of battle.",
            "\tIf God's actions are just, they must be link to people's virtues. This is well-explored. 'Fate often spares a man for his courage' (l572). At Celebration, 'let Almighty be thanked... Shepherd can be worked everywhere.' (l27).",
            "\tCredit's always given to Beowulf for action.",
            "\t'Let whoever can / win glory before death' (l1384). That being, we can't really tell why we have the things we do -- you just need to keep why you are there in perspective (l1724-1760).",
            "\t'hethernish hope... God... unknown to them' (l175). Idol worshippers forfeit.",
            "4. God as friend.",
            "\tFriendship is at the centre (l1017).",
            "So, you see, heroiec values can align with Christian beliefs!"
          ]
        },
        "3 Sir Gawain and the Green Knight" : {
          "09-20-2016": [
            "h2. Interpretive Questions:",
            "1. What does each character's colours mean?",
            "2. What was Gawain's motive to accept the challenge?",
            "3. What's the significance of green?",
            "4. How does religion impact/inform Gawain's quest?",
            "5. Is 'Sir Gawain' relvevant to modern audiences?",
            "6. How/why is the Green Knight a threat to the Arthurnian Court?",
            "h2. Colours & Green",
            "Green: perhaps rebirth and revival in the Green Knight. Also the colour of evil and temptation for the woman Gawain falls for. Perhaps also the colour of the supernatural. Fits into the alliterative of the poem.",
            "h2. Motive",
            "Why is everyone so chill about this Green Jnight business? Perhaps this cool demeanor is part of the Arthurnian canon. Or they just pass off the reaction to the audience. Everyone seems jovial at the challenge (l491-495). There's a possibility that Gawain never thought much of it.",
            "h2. Religion",
            "Christian basis for text. Virtuous rewards. Fate hardly mentioned, in contrast to Beowulf. Gawain heroic for his Christian values and virtues (l642,645-647)",
            "h2. Relevance",
            "All individuals from different time periods will draw different readings of it. (ex. Shakespeare's receptions). ",
            "Fundamental in building storytelling elements we use today. ",
            "It doesn't have the same significance now, but that doesn't mean it has no significance. ",
            "h2. Threat",
            "The Green Knight is insulting, doesn't play by the rules, plays a trick on the court."
          ],
          "09-22-2016": [
            "Gawain takes a charm, gets saved with a nick in his neck, then he returns ashamed.",
            "Is Sir Gawain and the Green Knight a comedy?",
            "* it isn't as foreboding as Beowulf: more absurd",
            "* a dark humour might be found in the opening",
            "* kissing is frequently used as, perhaps, comedy. Especially between Gawain and the King.",
            "* first scene: Gawain cowers under covers, with the Queen terrifying him.",
            "So, this could be seen as a 'comedy of manners.' Humour rises from everyday behaviours, and whether or not we're from that time, it's unordinary",
            "* Main action goes on in the bedroom",
            "* martial compoent plays second fiddle to conversation, dinners",
            "This poem can be seen as part of the 'civilizing process' (to use a term coined by N. Elias), characterized by a gradual trend towards the inhibition of bad manners.",
            "* 'courtesy' used alot: examplified by behaviour of the court",
            "* social rules more codified than in Beowulf's time",
            "* one reading of this text is that this is because society had become more sophisticated by the time 'Sir Gawain' was conceived and written.",
            "In contrast, then, to Gawain's sincere adherance to these 'manners', the Queen says, 'forget courtesy! You can take what you want with your strength.' Gawain says, 'sex from strength is frowned upon in the Court.' (l495)",
            "Green Knight challenges the courtesy of Arthur's Court (l263).",
            "So we've got the system of values: both religious and societal.",
            "* 'Gawain' contains no references to the New Testabment, God plays a less active role.",
            "* Majority of action occurs between human individuals, no human and supernatural.",
            "* Conflict of book, Gawain versus the Queen, occurs as the biggest bulk of the text, and occurs as a conflict between Christian and non-Christian rules.",
            "* bit concern of Christian ethics",
            "Also very rooted in early Catholicism, in its mentions of various established days",
            "* confession of Gawain",
            "* King exstracts sins of Gawain, announces him resolved.",
            "The Fives! The 3rd and 5th points represent hristian values, but the rest are not Christian-related (l640).",
            "'Purity and politeness... / and pity': social and religious values are mixed (l654-655)",
            "Gawain's knighthood makes the Queen think that he must be sexuall active by expectation. Gawain says that would be sinful (l1505?)",
            "Is Gawain forever marked by this 'badge of blame' (l2390), or is he absolved? Knights later use it as badge of honour.",
            "Gawain's charge against womankind (l2425).",
            "Revealed that Morgan, the older woman, orchestrated everything. Queen is actually a kind of test of Gawain's morality.",
            "'love of laughter.'",
            "Relationship between form and perspective: perspective is something to be embraced. Flipped from Geowulf -- terror outside to inside."
          ]
        },
        "4 Chaucer" : {
          "09-26-2016": [
            "h1. Chaucer",
            "Chaucer is considered on of the three great writers of English literature. Throws a wrench into the 'middle ages / renaissance' divide. He was the contemporary of several Renaissance writers in Italy and France, though the Renaissance isn't seen to arrive in North Europe for centuries still. So he looks ahead in the middle of an earlier period -- he's a traditional writer.",
            "h2. 'Truth'",
            "'Live away from the crowds, live w/ truthfullness' (l??). A kind of Christian stoicism. 'Rule well thyself' (l??), 'don thyself' -- you may command others, but rule yourself first. Clearly an aristocratic audience.",
            "Chaucer uses an elaborate rhyme scheme to make the poem dignified.",
            "Often, Chaucer's short poems regrain his same style and poem -- often poems of belief and advice of valuaing most highly things above earthly existence.",
            "h2. 'Cantenbury Tales'",
            "Chaucer's plan would've called for 120 tales, drawn from 30 authors taking pilgrimage from London to Cantenbury. Never successfully completed. The idea was to fit tales to tellers: to find a broad section of his society.",
            "The Prologue: famous description of Pilgrims going to shrine. Describes pligrims in order of societal privelige (p243).",
            "Story motivated by virtues. After this tale, the Miller tells a tale that is less aristocratic, comes out of the tradition of the fablio. The Miller is described as, 'a stout carl... brawn... short-shouldered.. no door he couldn't break off its hinge... a wart... a jangler, a teller of highbalt tales... a thaunch of gold.' (l544)",
            "So, perhaps not the brightest. But set up as a certain kind of character.",
            "h2. 'Miller's Tale'",
            "Let's analyze l682-713.",
            "* Bizarre content, but expected of the Miller",
            "\t* fart sparks main conflict",
            "\t* husband conviced of Noah's flood because of astologer",
            "\t\t* comedy of belief",
            "\t* promise of ring leads to branding, and revenge miscarried.",
            "Miller has a new wife, makes  afool of her (l42-78).",
            "* Chaucer interupts, saying there will be course language",
            "* Miller aludes women to something holy, yet will also cheat on you -- 'privity'* 'a husband shouldn't inquire into God, or his wife'. That is, what she does on her own time is her buisness.",
            "The Miller introduces Nichols: skille dlover, but spies on people (l91-112). Well educated astronomer. Friends supplement his income.",
            "* So, basically, he's a phony who tricks people",
            "Miller sorts Alison into a social system (l125-162). Compares her to nature frequently.",
            "Miller describes Absolon: pretty, effeminate, musical, squeemish about flatulation and raunchy speech (l204-230). Separation from Miller.",
            "Comic climax of the story (l682-713). ",
            "This is a 'comedy of belief', as much as Chaucer might insist that we don't take it seriously. Miller lcaims seriousness creates trouble."
          ]
        },
        "5 Wyatt the Elder" : {
          "10-04-2016": [
            "So after Chaucer, not much happens in English Literature until the Tudors come to power ~130 years later in 1545. The Renaissance in England takes place some years later, coming along with the Reformation.",
            "For England, the Renaissance arrives most importantly in the form of 'Renaissance Humanism', which is different from contemporary Humanism. Renaissance Humanism was an educational movement that also transformed how we approached knowledge. They were frequently in the service of courts, serving both as tutors for children and advisors for officials.",
            "They wanted to turn education against medieval scholasticism, towards more practical matters, like the classicals did.",
            "This line of thought brought about Thomas Moore's 'Utopia', written in Latin. It discusses 'the problem of council' -- how do you advise a bad prince? This leads to the imagination of the ideal society.",
            "Wyatt, like Chaucer, is at the court, but only as a civil servant. Went to Italyand Spain, and brought back Renaissance writings from there. Arrested under suspicion for adultery with Anne Boyelyn. He brought back the Sonnet! Loved Francis Petrarch.",
            "h2. The Sonnet",
            "Often used to write about idealized love -- or at least from how Petrarch used it. Ultimately, though, it's about self-expression. Part of the move towards individualism.",
            "| Line # | Petrarch | Wyatt | Shakespeare |",
            "| :---: | :---: | :---: | :-------------: |",
            "| 1 | A | A | A |",
            "| 2 | B | B | B |",
            "| 3 | B | B | A |",
            "| 4 | A | A | B |",
            "| 5 | A | A | C |",
            "| 6 | B | B | D |",
            "| 7 | B | B | C |",
            "| 8 | A | A | D |",
            "| 9 | C | C | E |",
            "| 10 | D | D | F |",
            "| 11 | E | D | E |",
            "| 12 | C | C | F |",
            "| 13 | D | E | G |",
            "| 14 | E | E | G |",
            "Where lines 1-8 are called 'The Octave' and lines 9-14 are called 'The Sestet'.",
            "h2. 'They Flee From Me'",
            "A happy recollection of better days and an illusion of control and power within a relationship. By the end, he doesn't know how to respond.",
            "h2. 'Blame Note My Lute'",
            "The same situation about 'Flee', but a reversed attitude. The speaker knows he's been wronged and gets back at his former lover by a strange song.",
            "h2. 'Mine Own John Poins'",
            "Comes in the form of 'terza rima' -- each rhyme occurs three times, through the 1st and last thymes are exempty. Take the form of writing a letter to a friend -- a flexible, relaxed form. Written during House Arrest, possibly. Doesn't challenge authority, but 'I cannot' clauses lead him to quesiton court (l56-57). "
          ]
        },
        "6 John Donne" : {
          "10-06-2016": [
            "John Donne did alot of his work after 1600, but we'll be looking at his earlier poems. This is all before his conversion to the English Church.",
            "h2. 'A Valediction: Forbidden Mourning'",
            "'Valediction' means to say farewell. Begins with the extreme example of death, so as to highlight the anbiguity of his return. The middle set is to highlight how two objects can simultaneousl be one and two in different ways. This is what's called a 'metaphysical conceit' -- it establishes somethinga bout the nature of reality through metaphor, espeially in this context, trying to establish something about the nature of relations.",
            "h2. 'Elegy 19'",
            "A very sexy poem. A man's monologue as he tells the woman to undress -- then he creates a conceit comparing clothed women to a fancy book's cover toa  layman -- their full joy can only be experienced exposed.",
            "What are the politics of this poem? For one, the Poem's speaker is the only voice in the work. For two, he seems to have a role of power in this interaction.",
            "Lots of jokes around male sexuality. But, at the same time, they are somewhat elevated by religious metaphor. 'How blest I am in this discovering thee!' (l30). Works through these double-entendre.",
            "Altogether, 'Elegy 19' is an example of Donne's large body of erotic poetry. This wasn't unpopular in his day.",
            "h2. 'Donne's Holy Sonnets, 14'",
            "The sonnet sequence, since Wyatt's time, has progressed into series of linked sonnets. There's also a transition from writing about love objects to writing about God, and His love. In this way, the Petrarchan tradition had a comeback.",
            "Donne never writes sexual sonnets.",
            "There is a certain sexual overtone to Donne's description of God -- but first comes a violent, militaristic metaphor. Transition at l9 with introduction of marrital metaphor. He says, essentially, 'I have become unmarried -- make me your's again.'",
            "Altogether, this is a witty, dizzying poem that chains metaphors together forever.",
            "h2. 'The Sun Rising'",
            "A jaunty, playful poem. Rhymes greatly vary along with line lengths. Gives a sense of spoken word. What mades this a Renaissance poem? It makes a claim about the importance of individual experience: 'This bed thy centre is, these wally thy sphere' (l30) -- ven in our insignificant lives, we are worthy of taking on the Sun. This isn't serious, but the tone and content of the poem priveliges that position."
          ]
        },
        "7 The Faerie Queen" : {
          "10-13-2016": [
            "The Faerie Queene is a recovery of classical literature -- it's an epic! Most other poets wouldn't be so ambitious. It discusses the founding of a nation. Rhyme scheme is ABAB/BCBCC.",
            "Many different literary techniques can be found in the main body of 'The Faerie Queen'...",
            "* Chiasmus: the reversed repetition of a phrase or pattern of words. Ex. 'plain see... see plain' (c1s18l9)",
            "* Juxtaposition: the contrast of opposing, but related concepts. Ex. '... mortall eye... heavenly grace' (c3s4l9). Ex. '... earthly things... things divine' (c10s67l9).",
            "h2. Letter to Raleigh",
            "'continued allegory... dark conceit.' Allegory is most common in medieval literature. Spenser does it here partly because he models his work on early English poetry, especially Chaucer. Meant to 'fashion a noble person...' (l??) -- it's got a dialectic purpose.",
            "'To some I know this Methode will seem displeasante...' (l??) why doesn't he express this teaching in tutoring or sermons? Basically, he wants to give an example of these teachings.",
            "So each Book gives you a virtue. Book 1: Redcrosse Knight, courage. Book 3: Lady, chastity.",
            "h2. Background",
            "This book is also religious, so it was inpacted by _the Reformation_:",
            "1. 'sola fides': grace/faith alone allows for salvation",
            "2. 'sola scriptura': Scripture alone dictates what we believe",
            "3. 'priesthood of all believers': breaking away from institutional hegemony of the Church.",
            "The King first adopted Protestant bleiefs to divorce his wife, but backed away from that later. Protestant kids take over with King Edward, Catholics persecuted. Queen Mary takes the throne. Protestants persecuted. Elizebeth takes the throne, blends Protestant doctrine with some Catholic Practices.",
            "After all this back-and-forth, there's a gradual movement towards Protestantism, which is pretty much cemented by the 1590s, but there were still many secret Catholics. Most people see Protestantism as normal.",
            "Spenser grew up Protestant, and that's reflected in his works, but also how religion is depicted in his stories.",
            "h2. Canto 1",
            "Redcorsse knight at first makes alot of mistakes -- hence he faces Errour. And he faces her despite Una's warnings!",
            "S14-26:The battle with Errour and Redcrosse Knight's victory.",
            "S2$: Once reminded of his faith, Redcrosse is able to strike at Errour with 'more than his manly force'",
            "S20: How do we know Errour's vomit alludes to Catholic propaganda? Because these books are from Errour herself, who's half a serpent -- alluding to the Serpent's deception of Adam and Eve. The children eating Errour's body could be a spoof of Catholic mass/eucharist.",
            "S15: 'poisonous dugs' -- perhaps misgynist",
            "S21: 'partly male and partly female': there aught to be firm lines drawn of male and female-ness. Shakespeare would undo this firm line.",
            "The battle with Errour and Redcrosse Knight's victory.",
            "S2$: Once reminded of his faith, Redcrosse is able to strike at Errour with 'more than his manly force'",
            "S20: How do we know Errour's vomit alludes to Catholic propaganda? Because these books are from Errour herself, who's half a serpent -- alluding to the Serpent's deception of Adam and Eve. The children eating Errour's body could be a spoof of Catholic mass/eucharist.",
            "S15: 'poisonous dugs' -- perhaps misgynist",
            "S21: 'partly male and partly female': there aught to be firm lines drawn of male and female-ness. Shakespeare would undo this firm line.",
            "The battle with Errour and Redcrosse Knight's victory.",
            "S2$: Once reminded of his faith, Redcrosse is able to strike at Errour with 'more than his manly force'",
            "S20: How do we know Errour's vomit alludes to Catholic propaganda? Because these books are from Errour herself, who's half a serpent -- alluding to the Serpent's deception of Adam and Eve. The children eating Errour's body could be a spoof of Catholic mass/eucharist.",
            "S15: 'poisonous dugs' -- perhaps misgynist",
            "S21: 'partly male and partly female': there aught to be firm lines drawn of male and female-ness. Shakespeare would undo this firm line.",
            "h2. Canto 3",
            "Una and Redcrosse Knight have been separated by Archimagico -- both a spiritual and historical metaphor from Ken's perspective. In Canto 2, Redcrosse escapes but is weakened by the House of Pride, defeats Sans brothers. Prince Arthur rescues him.",
            "Una has her own adventures -- she meets a group of people and goes to an old woman who takes her to her house. Woman practices Catholicism.",
            "Church robber shows up (S17). Possibly represents Catholic church robbing the land of its wealth.",
            "h2. Canto 10",
            "Most platant statement of Protestantism (S1). REpresents idea of 'total depravity'.",
            "Redcrosse receives a religious No battles, but he goes through a series of steps.",
            "Penance of Redcrosse, 'sick of a grieved conscience' (S21-29). Different version of penance than the Catholic woman of Canto Three. But most Protestant authorities wouldn't recommend this form of penance -- what are we to make of this? At least, this book is about internal struggles."
          ]
        },
        "8 I Henry IV" : {
          "10-18-2016": [
            "The South claims Henry IV is King, the Northern rebels claim Edmund Mortimer should take the throne.",
            "Thematics of honour: rivalry between Prince Hal and Hotspur. King wishes in I,I that he wishes he had Hotspur as a son instead (i,iil18). Then I,II introduces Hal, then I, III Hotspur.",
            "h2. I,III",
            "How does this speech engage with Honour? 'banished honour' (l170) -- you've lost honour: restore your reputation! In its absence is shame (l177). Hotspur reasons that the only way to regain this honour is to right the wrongs you previously participated in. 'Redeem' (l180): a financial term to obtain something in a transaction, or religious term for salvation.",
            "Honour cannot be shamed (l201).",
            "Hotspur has his flaws: he's agitated, lacks self-control. He treats honour as if it were a bank account.",
            "Prince Hal thinks he can kind of goof off, let Hotspur accumulate honour, then defeat him later.",
            "h2. I,II",
            "Hal's plan is to 'falsify men's hopes' (l148) so as to seem better later on -- is he using his friends for his political gain? Or just using his plan as a way of rationalizing hanging out with criminals?",
            "h2. III,I",
            "Striking comparisons between King and Prince's thinking. They both want wonder (l57).",
            "They both respond to how their politics were theatricalized."
          ],
          "10-20-2016": [
            "Let's talk more about Shakespeare's main technique in I Nery IV: contrasting different viewpoints. Think Hotsput versus the Prince, but also contrasting version of the past.",
            "The play begins with a discussion of time: the King claims that now is a time for peace (I,IIl??) though that soon dissolves. Instead, time speeds up again. 'What time is it, old sack?!' (I,IIl??) The Prince's response is comical, but drives home the point that Falstaff is outside of time: what does time matter to someone who only enjoys himself?",
            "Hotspur is the most frantic, and treats time as always escaping him (I,IIIl??). ",
            "There are two main worlds in this play: the _court world_, and the _tavern world_.",
            "| Category | Tavern | Court",
            "| --- | :---: | :---: |",
            "| Genre | Comedy | Tragedy/Historical Drama/Heroic |",
            "| Language | bawdy, colloquial, informal prose. Honsety, demonstrated character | formal verse, politeness, obligation to social standing given at birth |",
            "| Values | money, materialist/headonist, lighthearted fellowship | honour and reputation, guarded relationships and rivalry |",
            "| Physical Bodies | obese, grotesque, carnivalesque | well dressed, fit for battle, aristocratic bodies |",
            "| Time | likely evening or night, time doesn't really matter, cyclical and unchanging view of time | daytime, time matters alot, linear progress of time |",
            "Erich Anerbach wrote 'Mimesis', which was about the representation of reality in Western literature, from the Bible to modernism.",
            "Prince claims he's reformed (III,II;??) -- then right after, Falstaff parodies this same process of repentence.",
            "Recall that Hal talks of honour as a commodity. Falstaff similarly parodies this process of 'acquiring a good name.'"
          ]
        },
        "9 Ben Johnson" : {
          "11-01-2016": [
            "Ben Johnson was a major personality of his day -- reputation slightly below Milton. Important for his influence via his band of followers in pubs that came to identify themselves as 'the Sons of Ben' that eventually created a school -- Herrick being part of it.",
            "He's known as a 'social poet' -- he writes to friends, often via letters. 'Inviting a Friend to Supper' is a great example of that.",
            "h2. 'Inviting a Friend to Supper'",
            "The poem presents itself as an invitation for what a good time might be. He first establishes a posture of himself being 'not worthy' (l3) of the company of the adressee. Then he gives an over-the-top description of the food -- in this he gives the joke that it's all a lie of the friend to come. Then he says they'll study literature! That's Johnson's 'good live'. As the poem draws to an end, he says that everyone will be able to speak their mind -- even in Classical Republicanism.",
            "So, in addition to food, he also depicts his own verse and plays around with that idea.",
            "All in iambic pentameter couplets! The whole thing is formal, but is also an invitation to relax.",
            "h2. 'My Picture Left in Scotland'",
            "Love is blind? No, it's deaf to my sweet rhymes!",
            "h2. 'On My First Son'",
            "About mourning his first child -- but he doesn't have to deal with growing up. What's his sin? Can you have too much hope? Perhaps giving his son false hope was his sin, i.e. 'too much hope for thee' (l2).",
            "h2. 'On Gut'",
            "'meat' can refer to food or women. Could also be a shot at King Henry who split the English Church for a divorce. Considrered an 'epigram' -- short, witty poetry."
          ]
        },
        "10 Paradise Lost" : {
          "11-08-2016": [
            "h2. Book 1: 1-330",
            "l1-26 establishes that this primarily concerns the fall of man. Also, it seeks to 'justify the ways of God to men.' (l??) Uses 'the invocation of the muses', (i.e. 'muses, help me tell this story') to indicate epic-ness.",
            "The form of this poem is classical epic, but it's subject is Genesis 1-3. It treats it as an epic story, which usually is about feats of human heroism. ",
            "Directly calls out his own 'abyss.'",
            "Metaphorical mentions of the Spirit of God in Genesis 1 and the Fall in Genesis 3.",
            "So on the whole, it aims to tell the whole Christian story, starting even before Creation, in such a way to justify God.",
            "l18 'before all temples [...] heart' (l18) -- focus on the internal state of man. This is coded religiously as a Protestant emphasis, since Milton was himself staunchly Protestant.",
            "This is ultimately a poem about origins -- about how our world came about.",
            "Storng emphasis on 'first' (l1-26) -- sets up a pattern to be repeated. This ties us back to the story.",
            "Milton asks two important rhetorical quesiton at l27-32 and l33, basically asking what led to the FAll in the first place.",
            "The answer? 'Th' infernal Serpent' (l34). So we have to get to his story first.",
            "Why'd Lucifer fall? He attempted regicide against the monarchy of God.",
            "* Does this make 'Paradise' political? Arguably not, unless he's telling us about the Fall as an analogy for his own views.",
            "* The poem is actually quite sympathetic to Lucifer. It details his suffering.",
            "'he set himself... above his peers' (l39). So Lucifer fell because of his pride, his failed rebellion, and his envy and guile.",
            "Then he moves to a description of Lucifer's torture in hell. Fires without light, adamantine chains. Does this question how God is just?",
            "So Satan's tortured without end. So this is a God that beleives in endless torture. What notion of Justice is this?",
            "Satan sees God as evil (l84-124)",
            "How does this make sense with Milton wanting to justify God? Well, we can't assume that God is good -- that would undermine Milton.",
            "Beelzebub wonders why God hasn't killed them (l143-152). Narrator addresses this question (l209-220)."
          ],
          "11-10-2016": [
            "h2. Book 3",
            "God's wrestling with how to deal with humanity's corruption. Abandon humanity, or take away freedom? No! Give them grace, but maintain justice.",
            "Ooh, but he begins with an invocation of the muse of light. Famous lamentation over blindness at l40-55.",
            "Book 2 establishes that the demons plan to corrupt humanity. ",
            "So something interesting about this is that God is physical, has to look around and talk. But l77-78 contradicts this. So, let's focus on God's speech.",
            "l80-134 contains God's self-justification. The free will defense. He draws difference between forknowledge and predestination. Though He doesn't predestinate, but he had foreknowledge. So long as this distinction exists, God's in the clear. But some would say that the act of creating decision-markers who you know will fall, is predestinating your creation to fall, regardless of freedom.",
            "On the whole, this speech is difficult. Hard to justify, and very shaky.",
            "The tone sounds defensive through its repetitions. Also passionate, angry. Most readers think that this speech fails.",
            "This section is also odd by having God and Son speak separately.",
            "h2. Book 8",
            "About Adam. He's talking to Raphael, who warns him.",
            "l249-82 contain a very happy account of Adam's coming into physical existence. He also knows that he had to be created. Origin of God's relationship with Adam.",
            "In l523-60, Adam states he feels no desire towards Eve."
          ],
          "11-15-2016": [
            "h1. Paradise Lost",
            "So Adam and Eve commit the original sin. God punishes them both, but according to Milton, God still punishes _us_.",
            "This only works logically if the story is allegorical -- justice seems to be questionable if this is taken as historical.",
            "Also, towards l129, 'self-decepted, self-depaced.' Since Man fell due to deception, they will receive grace. So there's a difference between self-deception and deception from others.",
            "'Man shall find grace... all they creatures' (l227). But what about the fallen angels? The poem later states that the angels _are_ God's creatures. Whoops.",
            "The first three chapters of Genesis takes about five minutes to read, but the epic magnifies it about 150 times. Perhaps all these logical problems occur simple because of the requirements of the temporal, literal, linear epic.",
            "h2. Book 9 and Book 4",
            "Note that this section is significant in a tradition of writings about women by male authors in the Church. This tradition is largely patriarchal.",
            "In Book 4, Even initially finds a pool of water, becomes taken with her own reflection, and thus is presented as a narcissist. When God leads her to Adam, her first reaction is to turn away, because his image isn't as attractive as her own. Many would find this representation of women offensive, but some defend it as progressive for Milton's time.",
            "When we are first presented with Eve, she's described as in 'naked majesty' (l288). This description clearly states that they aren't equal.",
            "Yet there are moments (p2085l??) where the narrator seems to be at odds as to whether men and women are equal. This may be because of the debate of divorce that occured at the time. Perhaps Milton himself held a contradicting view of women.",
            "But back to Book 9, it begins with a kind of invocation: 'my argument is not less, but more heroic than that of Achilles...' (l14). It's not about wards -- I've got 'heroic martyrdom.' It's not martial exploits, but rather your ability to help others.",
            "The Fall of Eve occurs when Eve is fooled by Satan in disguise to bleieve that the fruit would not bring death by God, but life by knowledge.",
            "The Fall of Adam occurs when he eats the fruit because of his 'one-fleshedsness' with her (l896). Or perhaps (l999) he's been deceived by 'female charm' -- Milton doesn't think this was love.",
            "After, they have a bout of sex. Most would say that they never had sex before the Fall, but Milton disagrees.",
            "h1. Lanyer",
            "One of the very few published women before the English Civil War. She wrote an imortant package of poems. One of the learned circles of women that tended to only translate other ltierary works into English. But Lanyer wrote herself! ",
            "h2. 'In Defense of Eve'",
            "Essentially, Lanyer wrote that Adam and Pilot sinned more than Eve and Pilot's Wife. She argues Adam should've controlled Eve. That is, because men, and not women, have responsibilities, in office and relationship, they should carry the weight of failure."
          ]
        },
        "11 Phillips, Marvel" : {
          "11-17-2016": [
            "These are contemporaries of Donne. Phillips lived to thirty-two, still accomplished in her adolescent years. Best known for her poems in femal friendship. Barriers for women to write: (a) education, (b) lack of networking and support. So Phillip's challenge was to establish a network/society for female writers.",
            "h2. 'A Married State'",
            "Written when she was 14, before marriage.",
            "Altogether, it's a bleak meditation on marriage, and it seems to almost celebrate virginity/singleness for women. Why? Marriage has 'blustering husbands' (l??) and 'children's cries' (l??), whcih you can avoid by not getting marries.",
            "The poem's structure is fairly straightforward: couplets and even groupings of line by theme. 'Therefore...', in conclusion, 'be advised' (l??). Playful, defiant, and sharpl.",
            "'Few worldly crosses' (l??): open to interpretation. May be in reference to becoming a nun as an alternative to marriage, perhaps as the _only_ alternative.",
            "'leading apes in hell' (l??): there was this joking notion of women leading apes in hell if they were unmarried. No one seriously believed it -- it was jsut a nasty put-down.",
            "h2. 'Friendship's Mystery'",
            "One of the central themes of this poem is about how two can be one. Phillips draws this idea from mystery in the New Testament, especially in description of marriage, and God's relationship with the Church.",
            "The first stanza develops in a spearate way  the idea of mystery, e.g. 'prodigy' -- something beyond rational nature. To Phillips, that's what friendship is.",
            "'our election is as free as angels' (l??). So we're back in 'Paradise Lost' territory -- are our actions determined in advance? Yet, don't we also have choice? The love is fated, and yet you _choose it_. Phillips seems to posit that there is no contradiction here.",
            "By this, it's not something we're bonded into, but rather that we're chosen for. But we're also subordinate to this larger thing we've become.",
            "h2. '... Hector Phillips' (??)",
            "'in 40 days, he dropped away...' (l??)",
            "If the previous poem bear's Donne's influence, this has fingerprints of Ben Johnson, who wrote about a similar subject. However, this comes from a mother's perspective.",
            "How does this poem work? How'd you describe it? It's addressed to her son directly in parts. Other parts address the passed son in the third person. So it changes to second person by the second stanza.",
            "It should be noted that child morality was really common back then, so PHillip's loss isn't unaccounted for.",
            "Upon addressing the child as 'sweet, babe' (l??), she comments upon the pain of the loss and says that she'll mourn for him -- 'tears as my muse' (l??) through her art.",
            "It seems that you can look at this poem the same way you look at Johnson's. It's quite formal and well-structured. But within that form, how can you express the grief you're experiencing? How does this poem manage to express emotion?",
            "Perhaps that's the purpose of her declaring that this will be her last poem. Perhaps it's in the emphasis in the reactionary, non-verbal '(ah!)' (l??).",
            "h2. Marvelle",
            "Let's first go to p1762, 'To the Virgins, to Make Much of Time.' Essentially, it states that you should get marries _now_, because it's all downhill from here. Where we get 'carpe diem' from.",
            "h2. 'To His Coy Mistress'",
            "Back to p1796, we have the other famous 'carpe diem' poet. Very much about Oliver Cromwell, but his attitude towards him is super hard to discern.",
            "He wants to seize more than the day... and he's not exactly talking about marriage...",
            "Okay, so this is a seduction poem. How is it argued? Is it persuasive? It talks about infinite foreplay in the first section. It's using time as an argument in the second section. Almost threatening -- 'if you don't let me take your vriginity, the worms will.' The logic being, if you want to experience these pleasures, we have to do this _now_.",
            "You could say that the poem is build upon the fallacy of 'denying the antecedent'",
            "But the poem is more than its broken logic."
          ]
        },
        "12 Swift: 'Gulliver's Travels' and 'A Modest Proposal'" : {
          "11-22-2016": [
            "h2. Part 1",
            "'Circumstantial realism' is made fun of in the opening work. This is an essential part of Swift's work here, and integral to the whole travel genre -- works describing amazing, fanciful adventures.",
            "But does that level of detail help? Adults can clearly tell this is fiction. But this also allows him to add satirical details to these fake worlds.",
            "How is this rooted in any 18th century political passage? The circus act of Chapter Three could be about anything, not just Whig power in British parliament. So perhaps he's purposefully not nailing this down to any figures in particular.",
            "Let's look at the Big-Endian controversy. Related to the idea of indifference -- non-essential issues that don't impact faith. Milton spent his whole life writing about Catholicism and Protestantism! But Swift is very content to dismiss this as trivial. This is very much post-Restoration, a very tired attitude to the Reformation.",
            "So, here Swift does something remarkable: he makes us want to _laugh_ about this.",
            "So what's the whole diea behind Gulliver's strained relationship with Lilliput? He at first has a good relationship with the emporor and the court, then it becomes strainedand broken.",
            "The depiction of Lilliput in Chapter Six storngly falls into the utopia tradition, which too takes on the travel narrative. He borrows from Moore in a couple ways here as well. But he also provides ideas that are totally bonkers. So it's hard to know exactly what he thinks of them.",
            "This society seperates kids from parents, very class-based (p2519). Male/female education systems. Women eduction for their occupation as wiveds (p2520). Starts off reasonably equitable, then is qualified to crap.",
            "Defamiliarization: the basic technique of Gulliver's Travels, making the familiar unfamiliar, which allows us to see it fresh."
          ],
          "11-24-2016": [
            "h2. Types of Satire",
            "There are two main types of satire: Horation and Juvenilian. Think of them as the two extreme ends of a spectrum.",
            "Juvenilian Satire features the satirist in a righteously, potentially tragically, indignant of their target.",
            "Gulliver's Travels is somewhere in the middle of the two. It's Juvenilian in that it targets bigger, more societal problems.",
            "Where does Book One and Four of Gulliver's Travels fall on this spectrum? Book Four is highly critical and harsh on humans, and hence is more Juvenilian. Book One boils down high societal issues into laughable matters. Remember, this distinction is all about _tone_. If you trat small things in a very serious way, it's mock satire. But some very serious in a very light tone creates tension within the audience.",
            "Gulliver's discussions with his master begin in Chapter Five and Six with a satirical account of English society, not so separate from Book One.",
            "Then in Chapter Seven and Eight, we describe the dystopia of the Yahoos, and a disturbing account of their sexual habits. The tone this creates tends towards Juvenillian satire. Then we change in Chapter Nine on to the H. society and their rational utopia.",
            "Remember too that this was written in the midst of the Enlightentment. The main rebuttal of 'Gulliver's Travels' against the optimistic pictures presented by the Enlightnment is presented in the scientific projects of Book Three. So there's reason to think Swift's against reason.",
            "In 'Gulliver's Travels', the body is presented in shame. 'Excremental vision', 'scatalogical', are terms to describe the presentation of excrement/urine in the text. In Book One, the protagonist makes his own shame clear when he says 'I was under great difficulties between urgency and shame' (p 2499). He has a strong consciousness of the inappropriety of his action 00 his situation forces it to be brought out into public.",
            "The Yahoos serve as a grotesque depiction of the human body. And true to Swift's 'excremental vision', they throw this excrement at his from the trees.",
            "Given that the Yahoo's bodies are given in such shameful manners, it is striking that the Houyhnhnm master says that the European body is actually much worse than the Yahoo body: 'He said I different from the Yahoo bodies... but that I differed for the worse' (p??). The Houyhnhnms see going on two feet as a disadvantage. His Houyhnhnm master goes on to critique his body.",
            "So, altogether, the Houyhnhnm perspective is that the human body is at disadvantage.",
            "Chapters Eight and Nine feature descriptions of women's bodies: 'friendship and benevolence' (p2615). This sounds pretty goodm right? Well, almost. In this society, a woman can't have strength. They also don't have any fondness for their children. Perhaps Swift is showing us the dark side of the equality of their love and their rationality.",
            "Gulliver presents this culture as entirely good. But does Swift agre? Or is Gulliver becoming an object of satire himself?",
            "Remember the council meeting -- there's a decision to be made between _castrating_ and _killing_ the Yahoos altogether. Is this the result of a rational project? Swift emphasizes the rationality of this debate: 'reason amoung them... strikes with immediate conviction' (p2615).",
            "So they have an understanding of reason that throws out debate and deliberation entirely. This also throws out the entire proces of societal critique. ",
            "So, this section is clearly a joke made at Gulliver's expense. The name Gulliver seems to suggest naivete. He doesn't get what Swift wants to understand. His presentation is that of desperation to become a rational Houyhnhnm and of disgust towards the Yahoos.",
            "This irony is even deeper in Book Four, another form of satire less often discussed called 'Menippean Satire', the satire of mental states, e.g. insanity. The criticism is Mennippean Satire is targetted towards Gulliver himself, as he goes deeper and deeper into the super-rational Houyhnhnm society.",
            "Let's talk about race, kiddos.",
            "'in this abominable animal, a perfect human figure; ... these differences are common to all savage nations.' (p2592).",
            "So, we have to ask... are the Yahoos a racist depiction? Well, the satire is entirely depicted towards Gullive and all Europeans, not at 'Savage nations.'",
            "But, he also makes not of the different 'races' of Houyhnhnm's by the colour of their fur, and how different Houyhnhnm 'races' are treated differently. _but_ he could also be talking about class. ",
            "'I had another reason which made me less forward to enlarge his majesty's by my discovery...' (p2631)",
            "There's reason to belief Swift wasn't so keen on colonialism because of England's colonization of Ireland. This leads us nicely to 'A Modest Proposal.'",
            "h2. 'A Modest Proposal'",
            "A genius work of satire -- pivots around a joke of the English devours the Ireland.",
            "'I calculate there may be two hundred thousand couples who wives are breeders; from which nuber I subtract thirt thousand couples who are able to maintain their own children' (p2634)",
            "Not only are these numbers presumptive and brutal, but they also have sinister implications. This quote implies an 85% poverty rate, for instance.",
            "The narrator delivers this line of reasoning in a disattached, obtuse manner that misses the point of human suffering altogether.",
            "In the first paragraph, parallelism and weak verby hide the horrors of human suffering and instead highlight its inconvenience. This prose is very statele, ery formal.",
            "The next paragraphs improperly use animalistic imagery towards Irish people, revealing a distaste for the actual nature of the problem.",
            "Swift somewhat drops the satirical mask after the horrid reveal by targeting landlords,",
            "'this food will be... very proper for landlords, who, as they have already devoured most of their parents, seem to have the best title to the children' (p2635)."
          ]
        },
        "13 Alexander Pope and 'Rape of the Lock'" : {
          "11-29-2016": [
            "Alexander Pope is the best poet of his generation. Most of his literature is targetted towards the upper class.",
            "'Rape of the Lock' is similar to Renaissance writings in that it's very interested in irrational behaviour. Religion and revolutionary politics are both valid topics in the 18th Century, but are somewhat taking a backseat. Comedy is also coming into the fore-front, and tragedy often takes a back-seat.",
            "So here we find a comedy of pettiness and misunderstanding. _Wit_ is also a central virtue of 18th Century literature.",
            "Check out Joh Dryden's thought on wit in p2254 and p2257 ('Wit as propriety').",
            "'True wit is Nature to adventure dressed / What oft was thought, but ne'er so well expressed' (p2675) - Pope's Essay on Criticism",
            "Essentially, wit is what we already know, but remade into something that strikes anew.",
            "Joseph Addison disagreed. He was a famous critic, photo-journalist of his day.",
            "'Mr. Locke has an admirable reflection upon the different of wit and judgement...' (p2652).",
            "So now we're thinking of wit as an assemblance of ideas that inspires resemblances to other things, whereas judgement is to evaluate the differences.",
            "Samual Johnson, another critic, wrote of Pope in 'Metaphysical Wit': 'Pope's account of wit is erroneous'.",
            "h2. 'Rape of the Lock'",
            "Epitome of wit in 18th Century English Poetry. USed iambic pentameter and couplets:",
            "A | B | A | B |  |",
            "A | B | B | A |  |",
            "'Oft, when the world imagine women stray / The Sylphs through mystic mazes guide their way' (c1l19)",
            "Examples of witty, comical effect can by found in c5l71-71, c5l34. Examples of the 'zeugma' technique might be found on c3l5-8. USed also at c2l107,109. Comic dfleation. Goes to the heart of satire in 'Rape of the Lock' -- puring out both their resemblance and difference."
          ]
        },
        "14 Doctor Johnson, and Eighteenth-Century Poets" : {
          "12-01-2016": [
            "Doctor Johnson is the leain 'man of letters' of the Eighteenth Century. His actual literature is pretty modest. 'A Dictionary of the English Language' made his famous. Usually considered the first major literary critic. Also did an important intoduction to his edition of Shakespeare's plays. Was also a periodical writer, made magazines. So he's famous for his prose, but also gives you a window into the Eighteenth Century subject of the most famous account of a literary figure.",
            "h2. 'A Dictionary of the English Language'",
            "Johnson sees changes of the English language as that of inevitable decay. He's aware of the project of the dictionary is one of resisting entropy, but he doesn't think it'll do much.",
            "'tongues... have a tendency of degenerate' (p2932)",
            "But Johnson notes some opportunity for growth.",
            "'those who have enough time to think... will produce new words' (p2932)",
            "'Language is a matter of comon agreement' (p2932)",
            "'the chief glory of every culture arises from its authors' (p2933)",
            "h2. 'Preface of Shakespeare'",
            "Johnson's prefaces first begin with the author's virtues, then moves on to their vices.",
            "'nothing can please many and please long...' (p2938)",
            "'Shakespeare is above all writers... the poet of nature. His characters are not modified by...' (p2938)",
            "'Other dramatists can only gain attention by hyperbolical... characters' (p2939)",
            "Johnson is working within an Aristotelian tradition: 'better an imporbable possibility than a probably impossibility' [double check this]",
            "On to Shakespeare's faults...",
            "Johnoson thinks Shakespeare isn't moral enough.",
            "'he seems to write with [out?] any moral purpose' (p2940)",
            "'a quibble is to Shakespeare what luminous vapors are to the traveler' (p2941)",
            "So Johnson thinks taht Shakespeare's obsessed with plans. He also doesn't take to the 'Three Dramatic Unities', but he thinks that's cool because",
            "'it is false that any representation is of reality... the truth is, the spectators know... that the stage is only a stage, and the players are only players...' (p2943)",
            "h2. 'Life of Milton'",
            "One of the joys of reading Milton is reading this. The contrast he sets up is between Shakespeare and Milton.",
            "'the moral of other poems is incidental... in Milton's only it is essential' (p2950)",
            "He also likes Milton's loftiness and greatness in the classical sense. Also, his 'sublimity'.",
            "'the characteristic quality of this poem is sublimity' (p2953)",
            "'None ever wished it longer than it is.' (p2955)",
            "h2. 'Lycidas'",
            "A poem Johnson hates. Watch out for the zingers.",
            "'What beauty there is, we must therefor seek in the sentiments and images' (p2949)",
            "h2. 'On the Death of Doctor Robert Levet'",
            "Loads of personification.",
            "Parallelism at l23-24.",
            "The whole poem has a balance that feels closest to Pope's couplets.",
            "h2. 'Elegy Written in a Country Churchyard'",
            "A reaciton against Pope's heroic couplets -- sometimes called a 'graveyard' style. Written by/for people, outside Pope's intended social circles. About the death of poor people. Around 130 lines. Also, this is famous!",
            "Even Johnson thought this was noble.",
            "However, this isn't the appropriate poem to end on.",
            "h2. 'Ode on the Death of a Favourite Cat'",
            "Great. Just, great."
          ]
        }
      },
      "course_name": "ENGL 200A",
      "is_online": "False",
      "taken": "Fall Term 2016, 3A"
    },
    "CS 350": {
      "course_content_by_units" : {
        "1 Introduction" : {
          "null": [
            "Models of the Operating System:",
            "1. Application View: providing programs with an environment to run safely on a piece of hardware, and access different components of the hardware",
            "2. System View: managing hardware resources on behalf of the programs",
            "3. Implementation View: the operating system itself as an actual, real-time program",
            "Kernel: the part of the OS that managest system calls, interrupts, and exceptions. Also handles memory and CPU time.",
            "Operating Sytem: the whole set of programs that provide the kernel and all other build-in functions."
          ]
        },
        "2 Threads and Concurrency" : {
          "null" : [
            "Thread: a sequence of instruction shich share resources with other sequences, and may be stopped and started at the OS' demand. Has function interface of:",
            "* thread_fork: make a copy of the current thread starting at a certain function",
            "* thread_exit: terminate the calling thread",
            "* thread_yield: yield current execution for another thread.",
            "The advantages of threads are:",
            "1. parallelization",
            "2. better procesor utilization",
            "Important Registers:",
            "* 0/z0: always zero",
            "* 2/v0: return/syscall",
            "* 3/v1: return",
            "Most Operating Systems will use a combination of _multiple cores_ (P processors, C cores per processor, M multithreading degree per process => PCM threads), and _timesharing_*, where multiple threads 'take turns' by switching rapidly between on another",
            "A switch between threads is called a _context switch_*, where (1) a new thread's set to run, (@) the current thread's contents are saved, and (3) the next thread is loaded. These are caused by one of",
            "1. thread_yield",
            "2. thread_exit",
            "3. wchan_sleep",
            "4. preemption: the OS forces you to stop via a timer interrupt.",
            "[ready/running/blocked diagram here. see p2]",
            "_Interrupts_* occur when a thread exceeds its scheduling quantum, or when a system device delivers an input to the system. This information is transfered to a certain spot in memory, which is given an interrupt handler procedure, which:",
            "1. records thread context in a trap frame",
            "2. determines the device which did the interrupt",
            "3. restores and resumes the thread appropriately"
          ]
        },
        "3 Synchronization" : {
          "null": [
            "Remember, threads can be interrupted at any time while also sharing a common access to global resources. What happens when many threads try to access the same resource? Without synchrnization: _race conditions_*! Which is where things have to operate at a very specific order to work as intended.",
            "[coding example 1 here, p3]",
            "The desired effect here isto get x to equal zero at the end of both A and B's execution, but in practice this can result in x being anything from [-N, N]. Why? Defining x as _volatile_* means that it'll force the compiler to lw/sw the x variable every time it's used, so when you translate this into MIPS it looks more like:",
            "[coding example 1-C here, p3]",
            "Since this seemingly atomic operation is actually composed of at least three MIPS commands, and threads can be interrupted and switched at any time, these instructions can be broken up in any linear order. This example can be partially solved by switching x to be non-volatile (i.e. to exclude the volatile keyword in its description), whcih would manipulate the contents of a local register instead, and only load and save upon the beginning and end of the thread's program. But this doesn't work in every Race Condition:",
            "[coding example 2 here, p4]",
            "Here, volatility doesn't matter either way -- it's still got some nasty race conditions What we need is to eliminate race conditions through _mutual exclusion_*: a mechanism to prevent simultaneous access to a piece of code or a global resource.",
            "_Locks_* prevent further use of code by ensuring a _critical section_* of code can only be accessed by one thread at a time. We can only implement this in MIPS. _Spinlocks_* work by repeatedly checking the lock address to see if it's free.",
            "In MIPS, we roughly load the lock value (0 = not taken) into x, then check x against the lock value again.",
            "[tree diagram here, p5]",
            "Actual _locks_* are identical to spinlocks, except they block the thread if the lock is unavailable, and awakes them when the lock is available.",
            "_Wait channels_* are used whena  thread needs to block in order to wait for a resource. Its operations:",
            "* wchan_sleep",
            "* wchan_wakeone",
            "* wchan_wakeall",
            "* wchan_lock",
            "_Semaphores_* are like locks, except they are associated with a aprticular non-negative integer that represents how much of a resource it can spare. In addition, they don't keep track of who can and can't return resources/make the semaphore available. They have operations:",
            "* P: decrement val if greater than 0. Otherwise, wait until val is greater than 0, then decrement.",
            "* V: increment val.",
            "_Condition Variables_* work in collaboration with a lock, but can only be used within the critical section of the lock. They have operations:",
            "* wait",
            "* signal",
            "* broadcast",
            "They are often used for certain conditions to pass before allowing threads to proceed.",
            "_Deadlocks_* occur when two or more threads possess resources that the other threads respectively need",
            "[coding example 3? here, p6]",
            "These situations can be prevented through two strategies:",
            "1. _No Hold and Wait_: a thread can't make requests for resources if it's already got resources allocated to it. Resource requests have to be made all at once.",
            "2. _Resource Ordering_: all resources are assigned a number, and a thread can only make resource requests in ascending order."
          ]
        },
        "4 Processes and System Calls" : {
          "null": [
            "A _process_* is the environment in whcih a thread occurs. It includes _virtualized resources_ and _isolated_ the program from other programs.",
            "_System Calls_* are the interface that allow processes to make requests of the kernel. Only these 'syscalls' and exceptions can make the kernel actually run code. These are handled like _interrupts_ with custom handlers, because that's basically the only way you can communicate to the kernal as an unpriveliged user program -- that is, user programs have direct access to hardware. This system is highly necessary.",
            "[app/syscall/kernel diagram, p7]",
            "1. library wrapper function.",
            "2. syscall instruction submitted",
            "3. kernel creates a _trapframe_*, determines the syscall handler, runs the syscall, restores the program state, and returns from the function",
            "4. wrapper finishes and formats result",
            "5. application proceeds",
            "Syscall parameters go in registers a0-a3, and the success/fail code is stored in a3 upon return. v0 contains the result/error code.",
            "All threads have two stacks:",
            "* User Stack: used while running unpriveliged code",
            "* Kernel Stack: used while running kernel code, after interrupt/exception. Holds trapframes and switchframes.",
            "Exceptions are handled first by saving the user stack pointer, switched to kernel stack, then saving the applicaiton state and calling _mips_trap_. This determines the exception/interrupt and handles correctly. Then the user stack is switched back to unpriveliged mode.",
            "Multiple processes exist simultaneously, and share resources and memory (via Virtual Memory). Operating System ensures isolation between processes. Most Oeprating Systems have a couple of syscalls to manage processes:",
            "* fork",
            "* waitpid",
            "* _exit",
            "* getpid",
            "* execv"
          ]
        },
        "5 Virtual Memory": {
          "null": [
            "Recall that the _address space_* is the chunk of memory given to a process. How is this space assigned? It certainly can't be a range of actual physical addresses! Why? Because we'd be giving any developper with an app real information about the hardware they're running on, which exposes the hardware to a wide range of security issues. Plux, we need to keep processes isolated from each other. So, the goals of virtual memory are:",
            "1. Transparency",
            "2. Efficiency: easy translation from virtual to physical",
            "3. Protection: processes shielded from one another.",
            "No process, including the kernel, ever sees or knows of physical memory. So translation is performed by hardware -- _the Memory Management Unity (MMU)_*. This contains all the information for a given process to be translated. There are a couple different strategies for how to allocate and translate virtual memory.",
            "h2. Dynamic Relocation ",
            "[dynamic relocation diagram here, p9]",
            "[dynamic relocation code here, p9]",
            "Advantages: super efficient translation!",
            "Disadvantages: tons of _external fragmentation_*, since everything's got to be coniguous.",
            "h2. Paging!",
            "[paging diagram here, p10]",
            "All memory is divided into _frames_* (for physical memory) and _pages_* (for virtual memory). The size of frames and pages are equal. In this approach, the MMU has a page table register that points to the _pages_* (for virtual memory). The size of frames and pages are equal. In this approach, the MMU has a page table register that points to the _page table_*.",
            "[page table diagram here, p10]",
            "To translate the addresses, we'll need some formulas.",
            "v = PP...POO...O",
            "    |____||____|",
            "\tpg #  offset",
            "[replace diagram]",
            "NUM OF PAGES = max virtual memory size / page size",
            "PG#(V) = V / PG SIZE",
            "# bits for PG NUM = ceil(log(#PTEs))",
            "OFFSET(V) = V % PG SIZE",
            "# bits for offset = ceil(log(PG SIZE))",
            "p = FRAME NUM * FRAME SIZE + OFFSET",
            "p = FF ... FOO ... O",
            "\t|______||______|",
            "\tframe # offset",
            "[redo all bit diagrams/equations]",
            "Note: sizes here are represented in bytes",
            "We can also add a _protection bit_* to indicate whether or not a page is read-only, or bits to indicate _track useage_, such as the _dirty bit_*, whcih tracks whether or not the page has been changed.",
            "Advantages: trading external fragmentation for internal. Doesn't requre categories or ordered allocation.",
            "Disadvantages: tables get real big real fast. Programs may make tables mostly invalid, so inefficient use of space.",
            "In this paradign, we have the roles of...",
            "Kernel: manages MMU registers, creates and manages page tables, allocated physical memory handles and MMU exceptions.",
            "MMU: translates addresses, raises exceptions.",
            "To eliminate redudant page table lookups, we have the _TLB (translation lookaside buffer)_*, a small cache in the MMU that stores page to frame mappings. This can be managed by hardware or software.",
            "If a miss is encountered, the pair of page and corresponding frame is looke dup and added to the TLB.",
            "h2. Segmentation ",
            "[segmentation diagram, p12]",
            "Let's be real -- no matter what kind of allocation you use, there's a pretty big chance that alot of the addresses you make available to the program will never be used.",
            "So, why bother making space for things that won't be available anyways? This problem crops up in Paging, where a ton of Page Table Entries (PTEs) might be marked as invalid, since they were never used.",
            "So, _segmentation_ maps the different parts of virtual memory discontiguously. The MMU will contain different registers to the various segments represented physically.",
            "[segmentation algorithm here, p12]",
            "Advantages: less space allocated! More flexible.",
            "Disadvantages: still physical external fragmentation.",
            "So, what's the solution to this terrible disadvantage? Paging *on* your segments!",
            "h2. Two-Level Paging",
            "[two-level paging diagram, p13]",
            "We split up page tables according to what's allocated. If nothing's allocated for a range of addresses, no page table is made for them. Page tables are accessed through a directory.",
            "Now our virtual addresses will look like:",
            "L1L1 ... L1L2L2 ... L2OO ... O",
            "|_________||_________||______|",
            "dir. bits  page tbl   offset",
            "[redo bit diagram]",
            "Advantages: fewer PTEs overall!",
            "Disadvantages: we may get a large directory.",
            "h2. Multi-level Paging",
            "Large virtual memories are divided by the addition of more levels! Page tables adn directories remain small.",
            "#bits for offset = ceil(log(PAGE SIZE))",
            "#PTEs on page = PG SIZE / PTE SIZE",
            "#levels = ceil((# BITS IN V ADDR - OFFSET) / # BITS IN PG NUM)",
            "[pg bits diagrap here, p13]",
            "[redo all equations]",
            "[end of midterm notes]",
            "OS161 has a _software-managed TLB_*, where exceptions are raised upon misses to vm_fault. This system uses the addrspace structure, which provides a brief description of _the text segment_* and _data segment_* in terms of v_base and p_base mapping. The _stack segment_* is only provided a p_base, since it's always given 12 4KB pages (i.e. from 0x7fff4000 to 0x7ffffff).",
            "Initializing the addrspace requires, in OS161, an _ELF (Executable and Linking Format)_* file. This contains segment descriptions as well as other useful info for running the program. For each segment, the ELF file contains an _image_* of the segment (a copy of all segment contents), and also contains:",
            "* virtual address of segment start",
            "* length of segment",
            "* location of segment image in file",
            "* length of image",
            "[ELF file diagram, p14]",
            "We'd like the Kernel to be in virtual memory, but we run into two problems.",
            "1. Bootstrapping: how does kernel end up in Virtual Memory when it partially implements the VM?",
            "2. Sharing: how is the kernel singular across use in many processes?",
            "We solve Sharing through having the kernel overlap with all Virtual Memories. Bootstrapping solutions are usually more architecture-specific. ",
            "[kseg0/1/2 diagram, p14 here, with corresponding equations.]",
            "Unlike dumbvm, _On-Demand Paging_* leads a relatively small ortion of a program into RAM upon initializing the program (at most, 4MB). These allow for pages to be stored on secondary sotrage. Ideally, all pages needed by the program are loaded into RAM when needed, but when a page is requested that isn't present (i.e. in RAM), it's called a _page fault_*, and it's very expensive to fix.",
            "We keep track of what's in RAM in the TLB though the _present bit_* in the TLB entry. The set of pages present in memory is called the _resident set_*.",
            "Upon a page fault, the kernel...",
            "1. Swaps page into memory from secondary storage, possibly evicting another page",
            "2. Sets the present bit in the PTE",
            "3. Returns from exception so gram can retry page access.",
            "Since page faults are ridiculously slow to deal with, we need to be clever about keeping them to a minimum. Some strategies:",
            "* limit process count",
            "* use good strategies for what of keep and evict",
            "* pre-fetch pages using other cores.",
            "Some eviction strategies:",
            "* _FIFO_: First in, first out. Evict the page that's been there the longest. Generally pretty terrible.",
            "* _MIN_: replace the page that won't be used for the longest time. Great for wizards who can see into the future (optimal, actually), but pretty shit for the rest of us, since we don't really have that kind of information off-hand.",
            "Since we don't know what the future holds, we can guess at some trends a program will likely exhibit in how it uses pages. This is called _locality_*.",
            "* _Temporal Locality_: programs tend ot access pages they've recently accessed.",
            "* _Spatial Locality_: programs tend to access pages close to recent pages.",
            "_LRU_: Least Recently Used. Takes advantage of temporal locality. Kinda bad.",
            "There's a problem, though! We don't know what's being used! So we add a _use bit_* to the PTE. Whenever we translate that PTE, we set the use bit. ",
            "_Clock Replacement_: aka 'Second Chance', identical to FIFO except page is skipped if use bit is set, but it's use bit is reset in the process of observing it.",
            "[clock replacement diagram here, p15]"
          ]
        },
        "6 CPU Scheduling": {
          "null": [
            "We are set of jobs J. For each job i, we are given a job arrival time (ai) and job run time (ri). We define a job's response time as the time between it's arraival and its start, and its turnaround time as the time between its arrival and its end. These figures depend on the scheduling algorithm used and the state of the schedule.",
            "_FCFS_: first come, first serve. Run jobs in order of arrival time. Simple and avoids starvation, but neglects to take advantage of shorter jobs.",
            "_SJF_: shortest job first. Runs jobs in order of runtime. Minimizes average turnaround time, but amy starve longer jobs.",
            "[FCFS/SJF diagrams here, p16]",
            "_RR_: round robing. FCFS with pre-emption.",
            "_SRTF_: shortest time remaining first. SJF with pre-emption.",
            "[RR/SRTF diagrams here, p16]",
            "In reality, 'jobs' are threads, which have unknown run times, may block, and have varying levels of priority. The thread scheduler must balance responsiveness, fairness, and efficiency.",
            "_Multi-level Feedback Queues_* aim to give interactive threads (those being threads that are frequently blocked), good responsiveness.",
            "[MFQ diagram here, p17]",
            "The MFQ algorithm consists of following rules:",
            "* always choose a job from Qn, unless empty. Then choose from the highest priority non-empty queue.",
            "* threads in Qi use quantum qi, which gets larger in lower priority queues.",
            "* if a thread from Qi gets itself pre-empted, shift it into Qi-1.",
            "* put ny sleeping thread into Qn when it wakes up",
            "* every once in a while (ex. 2 min) move all threads into Qn, so as to prevent starvation.",
            "The _Linux Completely Fair Scheduler (CFS)_* follows these rules:",
            "* each thread, ti, is assigned a weight, wi.",
            "* each thread is given access to the CPU in preemption to its weight",
            "* always run ready thread with lowest virtual runtime",
            "* actual runtime is multiplied THE SUM OF ALL WEIGHTS / wi to get Virtual Runtime",
            "* VR very slowly advances for high responsive threads",
            "VIRTUAL RUNTIME = ACTUAL RUNTIME * (SUM OF ALL THREADS / wi)",
            "_Per core ready queues_ have each core get its own independent set of jobs. _Shared ready queues_ balance a shared set of jobs amoung all cores. In this system, the ready queue is a critical section, which scales to larger core numbers. This design suffers whenever a thread needs to be moved from one core to another, because after a while a thread develops a cache _affinity_ for a certain core that's lost in transfer.",
            "Per core ready queues may suffer for _load imbalance_. This usually requires some mechanism of _thread migration_. "
          ]
        },
        "7 Devices and IO": {
          "null": [
            "A _device_* can be anything from the home button on the iPhone, to the computer's disk drive, to the timer behind pre-emption.",
            "Devices interface with the rest of the OS through _device registers_*, whcih come in three types:",
            "1. command register takes in instructions",
            "2. status register: info on the state of the device",
            "3. data register: input/output for data with device",
            "The _device drivers_* are responsible for writing the commands to the command registers. These drivers are usually included as optional loadable modules outside the kernel. We want many different threads to take advantage of the driver, so we use a binary semaphor",
            "\tDevice Write Handler:",
            "\tP(device semaphore)",
            "\twrite data to register",
            "\tInterrupt Handler:",
            "\twrite to status register to acknowledge completion",
            "\tV(device semaphore)",
            "This inevitably and invariably means that the colleciton of drives for all devices in a modern OS is a *giant mess*. Oh well.",
            "So how does a device driver know where to read and write? There are two options:",
            "1. Port-mapped I/O: a second address space is created and maintains outside of RAM, 16-bit. Maintains mappings of port id's to physical addresses.",
            "2. Memory-mapped I/OL certain physical addresses in RAM are monitored constantly as representations of device registers. Access/writing via typical operations for any other read/write operations.",
            "S161, along with most modern operating systems, use memory-mapped I/O. Remember how kseg1 was dedicated to devices? It interfaces to 32 64KB device slots.",
            "So, logically, the hard drive is divided into equally sized blocks of memory, and storage is non-volatile. In physical reality, however, this storage is conducted on either _disk drives_ or _solid state drives_.",
            "[hard drive diagram here, p19]",
            "In the hard drive, the cost of I/O operations on a disk is dependent on three factors:",
            "1. _Seek time_: the time to move R/W head to cylinder",
            "2. _Rotational latency_: time for desired sector to rotate to the R/W head",
            "3. _Transfer time_: time for sectors to spin past R/W heads",
            "[seek time/rotational latency/transfer time here, p19]",
            "time to move head 1 cylinder = MAX SEEK TIME / # TRACKS per PLATTER",
            "time to move 1 sector = TIME TO ROTATE ONCE / # SECTORYS per TRACK",
            "[redo equations, p19]",
            "Because seek time is typically the most costly factor of the three, we attempt to make I/O sequential as much as possible. Yet, still we have to figure out how to deal with non-sequential I/O's. A couple scheduling algorithms:",
            "1. _FCFS_: first come first serve. Fair and simple, but bad seek times",
            "2. _SSTF_: shortest seek time first. Greedy, so some may starve.",
            "3. _SCAN_: elevator algorithm. The R/W head moves first in one direction until there's nothing left in that direciton to do, and only then it turns back. Optimizal performance, and results in no starvation!",
            "Two strategiees for data transfer to/from devices:",
            "1. Program-controller I/O: CPU transfers memory to and from disk buffer",
            "2. Direct Memory Access: device mobes data to and from memory",
            "[direct memory access diagram here, p20]",
            "Solid state drives don't use moving parts. Most of them use flash memory implemented via NAND gates. This si logically paritioned into pages, most commonly sized 4MB. The only problem is that a high voltage is required to overwirte/delete pages, which can only be applied on the page level itself. For this reason, the SSD controller optimizes this process to only require unused pages to have writes, and for overwriting/deleting pages to be kept to a minimum. For this reason, the SSD controller tries to control _wear-levels_*, since each page can only take so many writes, and once the page is down, it's *all over*."
          ]
        },
        "8 File Systems" : {
          "null": [
            "A _file_* is a persistent, named data object. Its data consists of a sequence of bytes, its size may vary, and it exists as an abstraction for user processes. It is accessed and managed through the _file system_*:",
            "[three layers of file systems diagram, p21]",
            "Typical user operations within a file system include:",
            "* open: returns file idnetifier handler to do other opterations with",
            "* close: invalidates a valid file descriptor (i.e. created by an open operation)",
            "* read: copies data from the file into virtual address space",
            "* write: copies data from virtual address space into file",
            "* seek: set where read/write operations read from and write to",
            "* get/set meta-data (ex. fstat, chmod)",
            "Each file descriptor has an associated _file position_*, which dictates the position of read/write operations. Seek changes this position.",
            "Every directory and file has a unique _i-number_*. This is used to locate the file/directory in memory, along with its meta-data. So a directory is precisely of strings (representing file names) to i-num's. So when a file is specified with a sequence of directories, what the system is really doing is navigating a tree of directories, with the intent of adding the file as a leaf on the tree.",
            "A _hard link_* is an association between a string and an i-number. More generally, though, a link is the 'edge' on the directory tree that connects a directory to a directory, or a file to a directory. New hard links will be created automatically with the addition of new directories and files:",
            "[file addition diagram, p22]",
            "Note: although any given directory of file (that hasn't been deleted) only has one hard link, it's possible for a file to be hardlinked to multiple directories wia link(). However, creating an additional link from one directory to another is prohibited basically everywhere, since that would introduce a cycle in the directory tree, which would be *very bad indeed*.",
            "[very bad cyclical file system diagram, p22]",
            "Note: any hard link can be removed as well. unlink('/foo/bar.txt') would remove the link from /foo to bar.txt. When all hardlinks to a file are removed, the file is automatically deleted.",
            "A computer may contain many different file systems. In DOS/Windows, this is resolved by first specifying the system name (i.e. C:), then the pathname. Unix combines multiple file systems into one hierarchical namespace via mount. This doesn't combine the two file systems into one, but just merges the namespaces together until it's unmounted.",
            "All file systems must store",
            "* Persistent Data:",
            "\t* file data",
            "\t* file meta-data",
            "\t* directory/file hard links",
            "\t* file system meta-data",
            "* Non-Persistent Data:",
            "\t* open files",
            "\t* file postiion per file handler",
            "\t* cached copies of persistent data",
            "h2. Very Simple File System (on 256 KB disk, 512 bytes/sector)",
            "[VSFS diagram, p23]",
            "Each block is 8 consecutive sectors (4096 bytes).",
            "* Block 0: superblock. Contains metadata on entire file system: number of i-nodes, location of i-node table, etc...",
            "* Blocks 1,2: inode bitmap. Contains info on what i-nodes are and aren't allowed. DAta bitmap contains info on what block are being used.",
            "* Block 3-7: inodes. Each inode contains info on the file, hardlinks to the file, and direct/indirect pointers (more info on those later). ",
            "* Blocks 8-63: data region. Where actual file data is stored, though not necessarilly in a particular order.",
            "[vsfs block 0-7 diagram, p24]",
            "So i-node lookup is actually just an array operation. Each i-node itself is a relatively small structure.",
            "[i-node structure diagram, p24]",
            "Keep in mind that the average file is still quite small (around 2KB). The design of the i-node, and the size of the block, depends upon the kind of user you're designing for.",
            "A directory is a file containing a mapping between strings and i-nums. It can be read by user programs, but certainly can't be written to.",
            "To file system also has to keep track of non-persistent data. Per process, what files are open and the state of a file handle. In general, a table of open files, and an i-node bitmap / data bitmap have to be cached.",
            "[cat operations diagram, p25]",
            "[touch operations diagram, p25]",
            "Complicated operations may require several I/O oeprations! DElete's a good example. So what happens if we crash right in the middle of things?! Very bad indeed. We should design in-memory file system storage to be destroyed, and persistent structures to be _crash consistent_*.",
            "To ensure consistency upon boot, special consistency operations like tsck run on boot in most systems to find and repair broken structures.",
            "Another response to crash inconsistency is _journalling_*, where file system meta-data changes are written toa  journal, so sequence of operations can be written all at once. After a failure, redo the journalled changes."
          ]
        }
      },
      "course_name": "CS 350",
      "is_online": "False",
      "taken": "Spring Term 2017, 3B"
    }
  }
}